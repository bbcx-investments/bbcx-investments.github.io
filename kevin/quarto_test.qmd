---
title: "Investments"
author: "Kevin Crotty"
format: 
    revealjs:
        incremental: true
        logo: RiceLogo.png
        footer: "BUSI 448 "
        self-contained: true
        code-fold: true
execute:
    echo: true
jupyter: python3
---

## Pitfalls in using Markowitz optimization

-Mean-variance optimization is sensitive to the inputs.


## Sensitivity of portfolio weights to inputs (aka Garbage In=Garbage Out)

FROM YUHANG'S SLIDES, HOW FRENCH PORTFOLIO WGT CHANGES BASED ON THE INPUTS

COULD ALSO BE A HOMEWORK ASSIGNMENT

## Inputs Must Be Estimated!^[more on estimation to come...]

Mean-variance optimization is quite sensitive to the input parameters.

Inputs: \
-Set of expected returns for assets \<br />

-Set of variances for assets \<br />

-Set of covariances (correlations) across assets \<br />

How good are we at estimating these things?

## The Error-Maximization Problem

Mean-variance portfolio optimization: \
-Will tilt too heavily toward assets with estimated expected returns above true expected returns $(\hat{\mu}>\mu)$ \ 

-Will tilt too heavily toward assets with diversification benefits greater than true benefits $(\widehat{\text{cov}}_{ij}<\text{cov}_{ij})$ \ 

-Often tries to short assets with diversification benefits lower than true benefits $(\widehat{\text{cov}}_{ij}>\text{cov}_{ij})$


## Performance of Historical Plug-in Estimators

ADD WEBPAGE DOING SIMULATION IN KEVIN'S NOTES BASED ON 5-ASSET ALLOCATION EXAMPLE


## Strategies Dealing with Estimation Error

#### Shrinkage \
&emsp; Shrink extreme inputs toward some more moderate input 

#### Short-selling constraints: \
&emsp; Prevent hedging positions due to overestimated covariances or underestimated expected returns

#### Maximum position limits \
&emsp; Prevents overweighting due to overestimated $E[r]$ or underestimated covariances 

## Strategies Dealing with Estimation Error

#### Apply models to infer expected returns \
&emsp; Use market wgts to back out $E[r_i]$'s via CAPM (Black-Litterman) \
&emsp; Use more advanced factor models to estiamte $E[r_i]$'s <br />

#### Donâ€™t even try to estimate some inputs \
&emsp; Global minimum variance:	assume all $E[r_i]$'s equal \
&emsp; Risk parity: assume all $E[r_i]$'s equal and all $\rho_{ij}=0$ \
&emsp; Equal-weighted portfolio: assume all $E[r_i]$'s, $\text{sd}[r_i]$'s equal; all  $\rho_{ij}=0$

## Historical Performance

LINK TO OPTIMAL PORTFOLIOS OF STOCKS, BONDS, AND GOLD?

ADD SIMULATION WITH GMV/RISK PARITY/EW/VW?


## Another Solution: Sort on Predictive Signals

We will see this later in the course

ADD TABLE OR LINK TO FACTOR INVESTING PAGE
```{python}
import numpy as np
import pandas as pd
from scipy.stats import norm
import plotly.express as px
import plotly.io as pio
pio.renderers.default='notebook'

# Parameters
mn1 = 0.15
sd1 = 0.10
mn2 = 0.35
sd2 = 0.10
T = 50

# Generate data
rv1   = norm(loc=mn1, scale=sd1).rvs(T)
rv2   = norm(loc=mn2, scale=sd2).rvs(T)
time  = np.arange(T)
df = pd.DataFrame(data={'time': time, 'ret1': rv1, 'ret2': rv2})

# Plot data
fig = px.line(df,x='time', y=['ret1', 'ret2'])
fig.update_layout(yaxis_title='Return',
                  xaxis_title='',
    legend_title_text='',
)
fig.show()
```