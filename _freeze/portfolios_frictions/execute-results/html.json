{
  "hash": "a570ea267fba5ba65bdc2be2752f2878",
  "result": {
    "markdown": "# Optimal Portfolios: Practice {#sec-optimal-portfolios-practice}\n\n\n\nThe optimal portfolios studied in @sec-diversification and @sec-optimal-portfolios-theory assumed away a number of frictions that are important in practice.  Most investors cannot borrow at the same rate at which they save.  Some investors cannot sell securities short or may also have other position limits such as maximum portfolio weights.  We show how the analyses in the preceding chapters change when we impose more realistic assumptions on the investing environment.\n\n\n## Different Borrowing & Lending Rates\n\n### Kinked CALs {-}\n\nThe capital allocation line is the set of expected returns and standard deviations formed by combining a single risky asset (or portfolio) with weight $w$ and a risk-free asset with weight $1-w$.  In @sec-optimal-portfolios-theory, we assumed a single risk-free rate.  Any portfolios with $w>100\\%$ involve borrowing at the risk-free rate (that is, issuing bonds at the same rate as, say, US Treasuries).  This is probably not a reasonable assumption.  For most investors, $r^{\\text{borrow}}>r^{\\text{saving}}$.  In this case, the capital allocation line is kinked at the risky-asset.  For portfolios with some risk-free saving, the capital allocation line is the same as in @eq-cal:\n\n\n$$ E[r_p] = r_f^{\\text{saving}} + \\bigg[ \\frac{E[r_{\\text{risky}}]-r_f^{\\text{saving}}}{\\text{sd}[r_{\\text{risky}}] }\\bigg]\\cdot \\text{sd}[r_p]\\,.$$\n\n\nFor portfolios with borrowing, the capital allocation line has a lower slope:\n\n$$ E[r_p] = r_f^{\\text{borrow}} + \\bigg[ \\frac{E[r_{\\text{risky}}]-r_f^{\\text{borrow}}}{\\text{sd}[r_{\\text{risky}}] }\\bigg]\\cdot \\text{sd}[r_p]\\,.$$\n\n@fig-cal shows the set of possible portfolios along the kinked capital allocation line with differential savings and borrowing rates.  The black dotted lines extend the blue solid lines, but the points on the black dotted lines are infeasible, because they involve saving at the borrowing rate or borrowing at the savings rate.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\n\n# Parameter values (in percent)\nmn = 6\nsd = 15\ns = 2\nextra = 1.25    #incremental borrowing rate\n\ndef data(mn, sd, s, b):\n    grid = np.linspace(0, 2, 201)\n    mns = [(s + w * (mn - s) if w <= 1 else b + w * (mn - b)) for w in grid]\n    sds = [w * sd for w in grid]\n    mns_infeasible = [(s + w * (mn - s) if w > 1 else b + w * (mn - b)) for w in grid]\n    return grid, mns, sds, mns_infeasible\n\ndef figtbl(mn, sd, s, extra):\n    mn /= 100\n    sd /= 100\n    b = s+extra\n    s /= 100\n    b /= 100\n    grid, mns, sds, mns_infeasible = data(mn, sd, s, b)\n    df = pd.DataFrame({'grid': grid, 'mns': mns, 'sds': sds, 'mns_infeas':mns_infeasible})\n    string = \"wealth in market = %{text:.0f}%<extra></extra>\"\n    trace1 = go.Scatter(\n        x=df[grid<=1].sds, y=df[grid<=1].mns, mode=\"lines\", text=100 * df[grid<=1].grid, hovertemplate=string, name='CAL (saving)', line=dict(color=\"blue\"),\n    )\n    string = \"wealth in market = %{text:.0f}%<extra></extra>\"\n    trace1a = go.Scatter(\n        x=df[grid>1].sds, y=df[grid>1].mns, mode=\"lines\", text=100 * df[grid>1].grid, hovertemplate=string, name='CAL (borrowing)', line=dict(color=\"blue\"),\n    )\n    string = \"infeasible saving at borrowing rate<extra></extra>\"\n    trace2 = go.Scatter(\n        x=df[grid<=1].sds, y=df[grid<=1].mns_infeas, mode=\"lines\", hovertemplate=string, showlegend = False, line=dict(color=\"black\", dash='dot'),\n    )\n    string = \"infeasible borrowing at saving rate<extra></extra>\"\n    trace2a = go.Scatter(\n        x=df[grid>1].sds, y=df[grid>1].mns_infeas, mode=\"lines\", hovertemplate=string, showlegend = False, line=dict(color=\"black\", dash='dot'),\n    )\n    string = \"wealth in market = 100%<extra></extra>\"\n    trace3 = go.Scatter(\n        x=[sd], y=[mn], mode=\"markers\", hovertemplate=string, marker=dict(size=15), name='Market'\n    )\n    string = \"wealth in market = 0%<extra></extra>\"\n    trace4 = go.Scatter(\n        x=[0], y=[s], mode=\"markers\", hovertemplate=string, marker=dict(size=15), name='Risk-free (Saving)'\n    )  \n    string = \"Borrowing rate<extra></extra>\"\n    trace5 = go.Scatter(\n        x=[0], y=[b], mode=\"markers\", hovertemplate=string, marker=dict(size=15), name='Risk-free (Borrowing)'\n    )       \n    fig = go.Figure()\n    fig.add_trace(trace1)\n    fig.add_trace(trace1a)\n    fig.add_trace(trace2)\n    fig.add_trace(trace2a)\n    fig.add_trace(trace3)\n    fig.add_trace(trace4)\n    fig.add_trace(trace5)\n    fig.layout.xaxis[\"title\"] = \"Standard Deviation\"\n    fig.layout.yaxis[\"title\"] = \"Expected Return\"\n    fig.update_yaxes(tickformat=\".0%\")\n    fig.update_xaxes(tickformat=\".0%\")\n    fig.update_layout(legend=dict(yanchor=\"top\", y =0.99, xanchor=\"left\", x=0.01))\n    fig.show()\nfigtbl(mn, sd, s, extra)\n```\n\n::: {#fig-cal .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"b454e446-47c7-494f-8e6b-3b44585c756e\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"b454e446-47c7-494f-8e6b-3b44585c756e\")) {                    Plotly.newPlot(                        \"b454e446-47c7-494f-8e6b-3b44585c756e\",                        [{\"hovertemplate\":\"wealth in market = %{text:.0f}%<extra></extra>\",\"line\":{\"color\":\"blue\"},\"mode\":\"lines\",\"name\":\"CAL (saving)\",\"text\":[0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.000000000000001,8.0,9.0,10.0,11.0,12.0,13.0,14.000000000000002,15.0,16.0,17.0,18.0,19.0,20.0,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.000000000000004,28.999999999999996,30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,41.0,42.0,43.0,44.0,45.0,46.0,47.0,48.0,49.0,50.0,51.0,52.0,53.0,54.0,55.00000000000001,56.00000000000001,57.00000000000001,57.99999999999999,59.0,60.0,61.0,62.0,63.0,64.0,65.0,66.0,67.0,68.0,69.0,70.0,71.0,72.0,73.0,74.0,75.0,76.0,77.0,78.0,79.0,80.0,81.0,82.0,83.0,84.0,85.0,86.0,87.0,88.0,89.0,90.0,91.0,92.0,93.0,94.0,95.0,96.0,97.0,98.0,99.0,100.0],\"x\":[0.0,0.0015,0.003,0.0045,0.006,0.0075,0.009,0.0105,0.012,0.0135,0.015,0.0165,0.018,0.0195,0.021,0.0225,0.024,0.025500000000000002,0.027,0.028499999999999998,0.03,0.0315,0.033,0.0345,0.036,0.0375,0.039,0.0405,0.042,0.0435,0.045,0.0465,0.048,0.0495,0.051000000000000004,0.052500000000000005,0.054,0.0555,0.056999999999999995,0.058499999999999996,0.06,0.0615,0.063,0.0645,0.066,0.0675,0.069,0.07050000000000001,0.072,0.0735,0.075,0.0765,0.078,0.0795,0.081,0.0825,0.084,0.0855,0.087,0.0885,0.09,0.0915,0.093,0.0945,0.096,0.0975,0.099,0.1005,0.10200000000000001,0.10350000000000001,0.10500000000000001,0.1065,0.108,0.1095,0.111,0.11249999999999999,0.11399999999999999,0.11549999999999999,0.11699999999999999,0.1185,0.12,0.1215,0.123,0.1245,0.126,0.1275,0.129,0.1305,0.132,0.1335,0.135,0.1365,0.138,0.1395,0.14100000000000001,0.14250000000000002,0.144,0.1455,0.147,0.1485,0.15],\"y\":[0.02,0.0204,0.0208,0.0212,0.0216,0.022,0.0224,0.0228,0.0232,0.0236,0.024,0.024399999999999998,0.0248,0.0252,0.0256,0.026,0.0264,0.0268,0.0272,0.0276,0.027999999999999997,0.028399999999999998,0.0288,0.0292,0.029599999999999998,0.03,0.0304,0.0308,0.0312,0.031599999999999996,0.032,0.0324,0.032799999999999996,0.0332,0.0336,0.034,0.0344,0.0348,0.035199999999999995,0.0356,0.036,0.0364,0.0368,0.0372,0.037599999999999995,0.038,0.038400000000000004,0.0388,0.0392,0.039599999999999996,0.039999999999999994,0.0404,0.0408,0.0412,0.0416,0.041999999999999996,0.0424,0.0428,0.043199999999999995,0.0436,0.044,0.044399999999999995,0.04479999999999999,0.0452,0.0456,0.046,0.0464,0.046799999999999994,0.0472,0.0476,0.048,0.0484,0.048799999999999996,0.049199999999999994,0.04959999999999999,0.049999999999999996,0.0504,0.0508,0.051199999999999996,0.05159999999999999,0.05199999999999999,0.0524,0.0528,0.0532,0.053599999999999995,0.05399999999999999,0.05439999999999999,0.0548,0.0552,0.0556,0.055999999999999994,0.05639999999999999,0.0568,0.0572,0.0576,0.057999999999999996,0.058399999999999994,0.05879999999999999,0.05919999999999999,0.0596,0.06],\"type\":\"scatter\"},{\"hovertemplate\":\"wealth in market = %{text:.0f}%<extra></extra>\",\"line\":{\"color\":\"blue\"},\"mode\":\"lines\",\"name\":\"CAL (borrowing)\",\"text\":[101.0,102.0,103.0,104.0,105.0,106.0,107.0,108.0,109.00000000000001,110.00000000000001,111.00000000000001,112.00000000000001,113.00000000000001,114.00000000000001,115.00000000000001,115.99999999999999,117.0,118.0,119.0,120.0,121.0,122.0,123.0,124.0,125.0,126.0,127.0,128.0,129.0,130.0,131.0,132.0,133.0,134.0,135.0,136.0,137.0,138.0,139.0,140.0,141.0,142.0,143.0,144.0,145.0,146.0,147.0,148.0,149.0,150.0,151.0,152.0,153.0,154.0,155.0,156.0,157.0,158.0,159.0,160.0,161.0,162.0,163.0,164.0,165.0,166.0,167.0,168.0,169.0,170.0,171.0,172.0,173.0,174.0,175.0,176.0,177.0,178.0,179.0,180.0,181.0,182.0,183.0,184.0,185.0,186.0,187.0,188.0,189.0,190.0,191.0,192.0,193.0,194.0,195.0,196.0,197.0,198.0,199.0,200.0],\"x\":[0.1515,0.153,0.1545,0.156,0.1575,0.159,0.1605,0.162,0.1635,0.165,0.1665,0.168,0.1695,0.171,0.17250000000000001,0.174,0.1755,0.177,0.1785,0.18,0.1815,0.183,0.1845,0.186,0.1875,0.189,0.1905,0.192,0.1935,0.195,0.1965,0.198,0.1995,0.201,0.2025,0.20400000000000001,0.20550000000000002,0.20700000000000002,0.20850000000000002,0.21000000000000002,0.2115,0.213,0.2145,0.216,0.2175,0.219,0.2205,0.222,0.2235,0.22499999999999998,0.22649999999999998,0.22799999999999998,0.22949999999999998,0.23099999999999998,0.23249999999999998,0.23399999999999999,0.2355,0.237,0.2385,0.24,0.2415,0.243,0.2445,0.246,0.2475,0.249,0.2505,0.252,0.2535,0.255,0.2565,0.258,0.2595,0.261,0.2625,0.264,0.2655,0.267,0.2685,0.27,0.2715,0.273,0.2745,0.276,0.2775,0.279,0.2805,0.28200000000000003,0.28350000000000003,0.28500000000000003,0.28650000000000003,0.288,0.2895,0.291,0.2925,0.294,0.2955,0.297,0.2985,0.3],\"y\":[0.060274999999999995,0.06055,0.060825,0.0611,0.061375,0.061649999999999996,0.061925,0.0622,0.062475,0.06275,0.063025,0.0633,0.06357499999999999,0.06385,0.064125,0.06439999999999999,0.064675,0.06495,0.065225,0.0655,0.065775,0.06605,0.066325,0.06659999999999999,0.06687499999999999,0.06714999999999999,0.067425,0.0677,0.06797500000000001,0.06825,0.068525,0.0688,0.069075,0.06935,0.06962499999999999,0.06989999999999999,0.070175,0.07045,0.07072500000000001,0.07100000000000001,0.07127499999999999,0.07155,0.071825,0.0721,0.072375,0.07264999999999999,0.07292499999999999,0.07319999999999999,0.073475,0.07375,0.074025,0.0743,0.074575,0.07485,0.075125,0.0754,0.07567499999999999,0.07594999999999999,0.076225,0.0765,0.076775,0.07705000000000001,0.077325,0.0776,0.077875,0.07815,0.078425,0.07869999999999999,0.07897499999999999,0.07924999999999999,0.07952499999999998,0.0798,0.080075,0.08035,0.080625,0.0809,0.081175,0.08145,0.08172499999999999,0.08199999999999999,0.08227499999999999,0.08255,0.082825,0.08310000000000001,0.083375,0.08365,0.083925,0.0842,0.084475,0.08474999999999999,0.08502499999999999,0.08529999999999999,0.08557499999999998,0.08585,0.086125,0.08639999999999999,0.086675,0.08695,0.087225,0.0875],\"type\":\"scatter\"},{\"hovertemplate\":\"infeasible saving at borrowing rate<extra></extra>\",\"line\":{\"color\":\"black\",\"dash\":\"dot\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[0.0,0.0015,0.003,0.0045,0.006,0.0075,0.009,0.0105,0.012,0.0135,0.015,0.0165,0.018,0.0195,0.021,0.0225,0.024,0.025500000000000002,0.027,0.028499999999999998,0.03,0.0315,0.033,0.0345,0.036,0.0375,0.039,0.0405,0.042,0.0435,0.045,0.0465,0.048,0.0495,0.051000000000000004,0.052500000000000005,0.054,0.0555,0.056999999999999995,0.058499999999999996,0.06,0.0615,0.063,0.0645,0.066,0.0675,0.069,0.07050000000000001,0.072,0.0735,0.075,0.0765,0.078,0.0795,0.081,0.0825,0.084,0.0855,0.087,0.0885,0.09,0.0915,0.093,0.0945,0.096,0.0975,0.099,0.1005,0.10200000000000001,0.10350000000000001,0.10500000000000001,0.1065,0.108,0.1095,0.111,0.11249999999999999,0.11399999999999999,0.11549999999999999,0.11699999999999999,0.1185,0.12,0.1215,0.123,0.1245,0.126,0.1275,0.129,0.1305,0.132,0.1335,0.135,0.1365,0.138,0.1395,0.14100000000000001,0.14250000000000002,0.144,0.1455,0.147,0.1485,0.15],\"y\":[0.0325,0.032775,0.03305,0.033325,0.0336,0.033875,0.03415,0.034425000000000004,0.0347,0.034975,0.035250000000000004,0.035525,0.0358,0.036075,0.03635,0.036625,0.0369,0.037175,0.03745,0.037725,0.038,0.038275,0.03855,0.038825,0.0391,0.039375,0.03965,0.039925,0.0402,0.040475,0.04075,0.041025,0.0413,0.041575,0.04185,0.042125,0.0424,0.042675,0.04295,0.043225,0.0435,0.043775,0.04405,0.044325,0.0446,0.044875,0.04515,0.045425,0.0457,0.045975,0.04625,0.046525,0.0468,0.047075,0.04735,0.047625,0.0479,0.048175,0.04844999999999999,0.048725,0.049,0.049275,0.04955,0.049824999999999994,0.0501,0.050375,0.05065,0.050925,0.051199999999999996,0.051475,0.051750000000000004,0.052025,0.0523,0.052575,0.052849999999999994,0.053125,0.0534,0.053675,0.05395,0.054224999999999995,0.0545,0.054775000000000004,0.05505,0.055325,0.0556,0.055874999999999994,0.05615,0.056425,0.0567,0.056975,0.057249999999999995,0.057525,0.057800000000000004,0.058075,0.05835,0.058625,0.058899999999999994,0.059175,0.059449999999999996,0.059725,0.06],\"type\":\"scatter\"},{\"hovertemplate\":\"infeasible borrowing at saving rate<extra></extra>\",\"line\":{\"color\":\"black\",\"dash\":\"dot\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[0.1515,0.153,0.1545,0.156,0.1575,0.159,0.1605,0.162,0.1635,0.165,0.1665,0.168,0.1695,0.171,0.17250000000000001,0.174,0.1755,0.177,0.1785,0.18,0.1815,0.183,0.1845,0.186,0.1875,0.189,0.1905,0.192,0.1935,0.195,0.1965,0.198,0.1995,0.201,0.2025,0.20400000000000001,0.20550000000000002,0.20700000000000002,0.20850000000000002,0.21000000000000002,0.2115,0.213,0.2145,0.216,0.2175,0.219,0.2205,0.222,0.2235,0.22499999999999998,0.22649999999999998,0.22799999999999998,0.22949999999999998,0.23099999999999998,0.23249999999999998,0.23399999999999999,0.2355,0.237,0.2385,0.24,0.2415,0.243,0.2445,0.246,0.2475,0.249,0.2505,0.252,0.2535,0.255,0.2565,0.258,0.2595,0.261,0.2625,0.264,0.2655,0.267,0.2685,0.27,0.2715,0.273,0.2745,0.276,0.2775,0.279,0.2805,0.28200000000000003,0.28350000000000003,0.28500000000000003,0.28650000000000003,0.288,0.2895,0.291,0.2925,0.294,0.2955,0.297,0.2985,0.3],\"y\":[0.060399999999999995,0.06079999999999999,0.06119999999999999,0.0616,0.062,0.0624,0.0628,0.06319999999999999,0.0636,0.064,0.0644,0.0648,0.0652,0.06559999999999999,0.066,0.06639999999999999,0.06679999999999998,0.0672,0.0676,0.06799999999999999,0.06839999999999999,0.06879999999999999,0.0692,0.0696,0.06999999999999999,0.07039999999999999,0.07079999999999999,0.0712,0.0716,0.072,0.07239999999999999,0.07279999999999999,0.0732,0.0736,0.074,0.0744,0.07479999999999999,0.0752,0.0756,0.076,0.07639999999999998,0.0768,0.07719999999999999,0.07759999999999999,0.07799999999999999,0.07839999999999998,0.0788,0.07919999999999999,0.07959999999999999,0.07999999999999999,0.08039999999999999,0.0808,0.0812,0.08159999999999999,0.08199999999999999,0.08239999999999999,0.0828,0.0832,0.0836,0.08399999999999999,0.0844,0.0848,0.0852,0.0856,0.086,0.0864,0.08679999999999999,0.08719999999999999,0.0876,0.088,0.08839999999999999,0.08879999999999999,0.08919999999999999,0.0896,0.09,0.0904,0.09079999999999999,0.09119999999999999,0.0916,0.092,0.0924,0.0928,0.09319999999999999,0.0936,0.094,0.0944,0.0948,0.09519999999999999,0.09559999999999999,0.096,0.0964,0.09679999999999998,0.0972,0.09759999999999999,0.09799999999999999,0.09839999999999999,0.09879999999999999,0.0992,0.0996,0.09999999999999999],\"type\":\"scatter\"},{\"hovertemplate\":\"wealth in market = 100%<extra></extra>\",\"marker\":{\"size\":15},\"mode\":\"markers\",\"name\":\"Market\",\"x\":[0.15],\"y\":[0.06],\"type\":\"scatter\"},{\"hovertemplate\":\"wealth in market = 0%<extra></extra>\",\"marker\":{\"size\":15},\"mode\":\"markers\",\"name\":\"Risk-free (Saving)\",\"x\":[0],\"y\":[0.02],\"type\":\"scatter\"},{\"hovertemplate\":\"Borrowing rate<extra></extra>\",\"marker\":{\"size\":15},\"mode\":\"markers\",\"name\":\"Risk-free (Borrowing)\",\"x\":[0],\"y\":[0.0325],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"title\":{\"text\":\"Standard Deviation\"},\"tickformat\":\".0%\"},\"yaxis\":{\"title\":{\"text\":\"Expected Return\"},\"tickformat\":\".0%\"},\"legend\":{\"yanchor\":\"top\",\"y\":0.99,\"xanchor\":\"left\",\"x\":0.01}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('b454e446-47c7-494f-8e6b-3b44585c756e');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nCapital Allocation Line\n:::\n:::\n\n\n### Optimal Portfolios {-}\n\nUnder the more realistic assumption that $r_f^{\\text{borrow}}>r_f^{\\text{saving}}$, efficient portfolios fall into three regions, separated by blue dots in  @fig-two-asset-plus_rf_saveborrow.^[This is true if the interest rates are lower than expected returns. If interest rates are set higher than expected returns, then the efficient portfolios may not exist.]  These blue dots indicate an efficient low risk portfolio and an efficient high mean portfolio, both comprised solely of risky assets.  The efficient low risk portfolio is the tangency portfolio calculated using the savings rate, and the efficient high mean portfolio is the portfolio maximizing the Sharpe ratio with respect to the borrowing rate.\n\nTo the left of the efficient low risk portfolio, the efficient portfolios are scaled-down versions of the efficient low risk portfolio with some savings. To the right of the efficient high mean portfolio, the efficient portfolios are scaled-up versions of the efficient high mean portfolio with some borrowing. Both cases are shown as blue lines in the figure. The third region is the portion of the efficient frontier between the efficient low risk and efficient high mean portfolios. These portfolios do not involve saving or borrowing.  Investors with different preferences will choose to invest in different locations across these three regions, as discussed in the next section.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\n\nmn_stock = 6\nmn_bond  = 3.5\nsd_stock = 15\nsd_bond  = 3.5\ncorr = -5\n\nrs = 2\nextra = 1.25\n\n\ndef data(mn1, mn2, sd1, sd2, c, rs, extra):\n    c = c / 100\n    rb = rs + extra   \n    rs = rs/100\n    rb = rb/100\n    mns = [mn1, mn2]\n    sds = [sd1, sd2]\n    grid = np.linspace(0, 1, 121)\n    # grid = np.linspace(-0.2, 2, 121)\n    ports = [np.array([w, 1 - w]) for w in grid]\n    means = [p.T @ np.array(mns) for p in ports]\n    df = pd.DataFrame(means)\n    df.columns = [\"mean\"]\n    cov = np.array(\n        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]\n    ).reshape(2, 2)\n    df[\"stdev\"] = [np.sqrt(p.T @ cov @ p) for p in ports]\n    df[\"wt1\"] = grid\n    df[\"wt2\"] = 1 - df.wt1\n    for col in [\"mean\", \"stdev\"]:\n        df[col] = df[col] / 100\n    df[\"sr_s\"]= (df[\"mean\"] - rs)/df[\"stdev\"]\n    df[\"sr_b\"]= (df[\"mean\"] - rb)/df[\"stdev\"]\n   \n    return df\n\ndef rf_plus_risky(mn, sd, rs, rb, w_min, w_max):\n    mn /= 100\n    sd /= 100\n    rs /= 100\n    rb /= 100\n    grid = np.linspace(w_min, w_max, 201)\n    mns = [(rs + w * (mn - rs) if w <= 1 else rb + w * (mn - rb)) for w in grid]\n    sds = [w * sd for w in grid]\n    srs = (mn - rs)/sd\n    srb = (mn - rb)/sd\n    return grid, mns, sds, srs, srb\n\ndef rf_plus_risky_nokink(mn, sd, rf, w_min, w_max):\n    mn /= 100\n    sd /= 100\n    rf /= 100\n    grid = np.linspace(w_min, w_max, 201)\n    mns = [(rf + w * (mn - rf)) for w in grid]\n    sds = [w * sd for w in grid]\n    return grid, mns, sds\n\n\ndef figtbl(mn1, mn2, sd1, sd2, c, rs, extra, asset1_name, asset2_name):\n    df = data(mn1, mn2, sd1, sd2, c, rs, extra)\n    \n    #Plot the portfolios of the two assets\n    trace1 = go.Scatter(\n        x=df[\"stdev\"],\n        y=df[\"mean\"],\n        mode=\"lines\",\n        # line={'color': green},\n        text=100 * df[\"wt1\"],\n        customdata=100 * df[\"wt2\"],\n        hovertemplate=asset1_name+\": %{text:.0f}%<br>\"+asset2_name+\": %{customdata:.0f}%<extra></extra>\",\n        line=dict(color=\"black\"),\n        name=\"Stock & Bond Frontier\"\n    )\n    \n    # Plot the two assets\n    df = df[df.wt1.isin([0, 1])]\n    df[\"text\"] = np.where(df.wt1 == 1, asset1_name, asset2_name)\n    trace2a = go.Scatter(\n        x=df[df.wt1==1][\"stdev\"],\n        y=df[df.wt1==1][\"mean\"],\n        mode=\"markers\",\n        text=df[df.wt1==1][\"text\"],\n        hovertemplate=\"%{text}<extra></extra>\",\n        marker=dict(size=10, color=\"orange\"),\n        name=asset1_name\n    )\n    trace2b = go.Scatter(\n        x=df[df.wt1==0][\"stdev\"],\n        y=df[df.wt1==0][\"mean\"],\n        mode=\"markers\",\n        text=df[df.wt1==0][\"text\"],\n        hovertemplate=\"%{text}<extra></extra>\",\n        marker=dict(size=10, color=\"red\"),\n        name=asset2_name\n    )\n\n    fig = go.Figure()\n    fig.add_trace(trace2a)\n    fig.add_trace(trace2b)\n    fig.add_trace(trace1)\n\n    # Plot the combination of the risk-free and each asset (CAL for each asset)\n    grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mn1, sd1, rs, rs + extra, 0, 1.0)\n    string = \"wealth in \"+asset1_name+\"= %{text:.0f}%<br>\" + \"Sharpe ratio: \" + \"{:.4f}\".format(srs_cal) +\"<extra></extra>\"\n    trace3 = go.Scatter(\n        x=sds_cal, \n        y=mns_cal, \n        mode=\"lines\", \n        text=100 * grid, \n        hovertemplate=string, \n        line=dict(color=\"orange\"),\n        name=\"CAL: \"+asset1_name\n    )\n    grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mn2, sd2, rs, rs + extra, 0, 1.0)\n    string = \"wealth in \"+asset2_name+\"= %{text:.0f}%<br>\" + \"Sharpe ratio : \" + \"{:.4f}\".format(srs_cal) +\"<extra></extra>\"\n    trace4 = go.Scatter(\n        x=sds_cal, \n        y=mns_cal, \n        mode=\"lines\", \n        text=100 * grid, \n        hovertemplate=string, \n        line=dict(color=\"red\"),\n        name=\"CAL: \"+asset2_name\n    )\n    # fig.add_trace(trace3)\n    # fig.add_trace(trace4)  \n\n\n    def custom(string, ports,srTang,borrow_flag):\n        # borrow_flag=1 adds statement about \"relative to borrowing rate\"\n        cd = np.empty(shape=(len(ports), N+1, 1), dtype=float)\n        for i in range(N):\n            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)\n        cd[:,N] = np.round(srTang,4)\n        # print(cd)\n        string += \"<br>\"\n        for i in range(N):\n            if i ==0:\n                string += asset1_name\n            elif i==1:\n                string += asset2_name\n            else:\n                string += \"asset \" + str(i + 1)\n            string += \": %{customdata[\"\n            string += str(i)\n            string += \"]:.1%}<br>\"\n        if borrow_flag==1:\n            string += \"Sharpe ratio (relative to borrowing rate): %{customdata[\" +  str(N) + \"]:.4f}<br>\"    \n        else:\n            string += \"Sharpe ratio: %{customdata[\" +  str(N) + \"]:.4f}<br>\"\n        string += \"<extra></extra>\"\n        return string, cd  \n\n    # Plot the tangency portfolios\n    c = c / 100\n    rb = rs + extra     \n    rs = rs/100\n    rb = rb/100\n    mns = [mn1, mn2]\n    mns = np.array(mns) / 100\n    sds = [sd1, sd2]\n    sds = np.array(sds) / 100\n    cov = np.array(\n        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]\n    ).reshape(2, 2)\n    \n    Shorts = True     \n    N = len(mns)\n    P = portfolio(mns, cov, Shorts)    \n    gmv = P.GMV @ mns\n    # print('GMV return is: ',gmv)\n    if (rs < gmv) or (not Shorts):\n        portTang = P.tangency(rs)\n        mnTang = portTang @ mns\n        if mnTang < np.max(mns):\n            sdTang = np.sqrt(portTang @ cov @ portTang)\n            srTang = (mnTang - rs)/sdTang\n            string0 = 'tangency portfolio' if rb == rs else 'efficient low risk' if rb != rs else 'tangency portfolio'\n            string, cd = custom(string0, [portTang], srTang,0)\n            trace = go.Scatter(\n                x=[sdTang],\n                y=[mnTang],\n                mode=\"markers\",\n                customdata=cd,\n                hovertemplate=string,\n                marker=dict(size=10, color=\"blue\"),\n                name=string0\n            )\n            fig.add_trace(trace)\n            \n            #Plot CAL (no leverage)\n            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rs*100,0, 1.0)\n            portlabel = 'tangency portfolio' if rb == rs else 'efficient low risk' if rb != rs else 'tangency portfolio'\n            string = \"wealth in \"+portlabel + \" = %{text:.0f}%<br>\" + \"Sharpe ratio: \" +  \"{:.4f}\".format(srTang) +\"<extra></extra>\"\n            trace5 = go.Scatter(\n                x=sds_cal, \n                y=mns_cal, \n                mode=\"lines\", \n                text=100 * grid, \n                hovertemplate=string, \n                line=dict(color=\"blue\"),\n                name=\"CAL: \" + portlabel\n            )           \n            fig.add_trace(trace5)\n            \n            #Plot CAL (with leverage)\n            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rs*100,1.0, 1.5)\n            trace5a = go.Scatter(\n                x=sds_cal, \n                y=mns_cal, \n                mode=\"lines\", \n                text=100 * grid, \n                hovertemplate=string, \n                line=dict(color=\"blue\",dash='dot'),\n                name=\"CAL: \"  + portlabel + \" (levered)\"\n                # showlegend=False\n            )           \n            # fig.add_trace(trace5a)         \n            \n            \n            \n            \n\n    if (rb != rs) and ((gmv > rb) or (not Shorts)):\n        portTang = P.tangency(rb)\n        mnTang = portTang @ mns\n        if mnTang < np.max(mns):\n            sdTang = np.sqrt(portTang @ cov @ portTang)\n            srTang = (mnTang - rb)/sdTang\n            string = 'efficient high mean portfolio'\n            string, cd = custom(string, [portTang], srTang,1)\n            trace = go.Scatter(\n                x=[sdTang],\n                y=[mnTang],\n                mode=\"markers\",\n                customdata=cd,\n                hovertemplate=string,\n                marker=dict(size=10, color=\"blue\"),\n                name=\"efficient high mean portfolio\"\n            )\n            fig.add_trace(trace)\n            \n            #Plot CAL (with leverage)            \n            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rb*100, 1.0, 3.0)\n            string = \"wealth in efficient high mean = %{text:.0f}%<br>\" + \"Sharpe ratio (relative to borrowing rate): \" + \"{:.4f}\".format(srTang) +\"<extra></extra>\"\n            trace6 = go.Scatter(\n                x=sds_cal, \n                y=mns_cal, \n                mode=\"lines\", \n                text=100 * grid, \n                hovertemplate=string,\n                line=dict(color=\"blue\"),\n                name = \"CAL: efficient high mean\"\n            )           \n            fig.add_trace(trace6)   \n            \n            #Plot CAL (without leverage) \n            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rb*100, 0, 1)\n            trace6a = go.Scatter(\n                x=sds_cal, \n                y=mns_cal, \n                mode=\"lines\", \n                text=100 * grid, \n                hovertemplate=string, \n                line=dict(color=\"blue\", dash='dot'),\n                name = \"CAL: efficient high mean (unlevered)\"\n            )           \n            # fig.add_trace(trace6a)      \n\n    string = \"Saving rate<extra></extra>\"\n    trace7 = go.Scatter(\n        x=[0], y=[rs], mode=\"markers\", hovertemplate=string, marker=dict(size=10, color=\"black\"), name='Risk-free (Saving)'\n    )\n    fig.add_trace(trace7)     \n    string = \"Borrowing rate<extra></extra>\"\n    trace8 = go.Scatter(\n        x=[0], y=[rb], mode=\"markers\", hovertemplate=string, marker=dict(size=10, color=\"DarkGrey\"), name='Risk-free (Borrowing)'\n    )  \n    fig.add_trace(trace8)   \n\n\n    fig.layout.xaxis[\"title\"] = \"Standard Deviation\"\n    fig.layout.yaxis[\"title\"] = \"Expected Return\"\n    fig.update_xaxes(range=[-0.005, 1.25 * df[\"stdev\"].max()])\n    fig.update_yaxes(range=[0, 1.15 * df[\"mean\"].max()])\n    fig.update_yaxes(tickformat=\".0%\")\n    fig.update_xaxes(tickformat=\".0%\")\n    fig.update_layout(legend=dict(yanchor=\"top\", y =0.65, xanchor=\"left\", x=0.535))\n    fig.show()\nfigtbl(mn_stock,mn_bond,sd_stock,sd_bond,corr,rs,extra,\"Stock\",\"Bond\")\n```\n\n::: {#fig-two-asset-plus_rf_saveborrow .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"d1f581fe-13cb-409b-8be5-331632d9000f\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d1f581fe-13cb-409b-8be5-331632d9000f\")) {                    Plotly.newPlot(                        \"d1f581fe-13cb-409b-8be5-331632d9000f\",                        [{\"hovertemplate\":\"%{text}<extra></extra>\",\"marker\":{\"color\":\"orange\",\"size\":10},\"mode\":\"markers\",\"name\":\"Stock\",\"text\":[\"Stock\"],\"x\":[0.15],\"y\":[0.06],\"type\":\"scatter\"},{\"hovertemplate\":\"%{text}<extra></extra>\",\"marker\":{\"color\":\"red\",\"size\":10},\"mode\":\"markers\",\"name\":\"Bond\",\"text\":[\"Bond\"],\"x\":[0.035],\"y\":[0.035],\"type\":\"scatter\"},{\"customdata\":[100.0,99.16666666666667,98.33333333333333,97.5,96.66666666666667,95.83333333333334,95.0,94.16666666666667,93.33333333333333,92.5,91.66666666666666,90.83333333333333,90.0,89.16666666666666,88.33333333333333,87.5,86.66666666666667,85.83333333333334,85.0,84.16666666666667,83.33333333333334,82.5,81.66666666666667,80.83333333333333,80.0,79.16666666666666,78.33333333333333,77.5,76.66666666666666,75.83333333333333,75.0,74.16666666666667,73.33333333333334,72.5,71.66666666666667,70.83333333333333,70.0,69.16666666666667,68.33333333333333,67.5,66.66666666666667,65.83333333333333,65.0,64.16666666666666,63.33333333333333,62.5,61.66666666666667,60.83333333333334,60.0,59.166666666666664,58.33333333333333,57.49999999999999,56.666666666666664,55.833333333333336,55.00000000000001,54.16666666666667,53.333333333333336,52.5,51.66666666666666,50.83333333333333,50.0,49.16666666666667,48.33333333333334,47.5,46.666666666666664,45.833333333333336,44.99999999999999,44.166666666666664,43.333333333333336,42.50000000000001,41.666666666666664,40.833333333333336,40.0,39.16666666666667,38.33333333333333,37.5,36.66666666666667,35.83333333333334,35.0,34.166666666666664,33.333333333333336,32.49999999999999,31.666666666666664,30.833333333333336,30.000000000000004,29.166666666666664,28.333333333333332,27.500000000000004,26.66666666666667,25.83333333333333,25.0,24.16666666666667,23.33333333333334,22.499999999999996,21.666666666666668,20.833333333333336,19.999999999999996,19.166666666666664,18.333333333333336,17.500000000000004,16.666666666666664,15.833333333333332,15.000000000000002,14.166666666666671,13.33333333333333,12.5,11.66666666666667,10.83333333333334,9.999999999999998,9.166666666666668,8.333333333333337,7.500000000000007,6.666666666666665,5.833333333333335,5.000000000000004,4.1666666666666625,3.3333333333333326,2.500000000000002,1.6666666666666718,0.8333333333333304,0.0],\"hovertemplate\":\"Stock: %{text:.0f}%<br>Bond: %{customdata:.0f}%<extra></extra>\",\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"name\":\"Stock & Bond Frontier\",\"text\":[0.0,0.8333333333333334,1.6666666666666667,2.5,3.3333333333333335,4.166666666666666,5.0,5.833333333333333,6.666666666666667,7.5,8.333333333333332,9.166666666666666,10.0,10.833333333333334,11.666666666666666,12.5,13.333333333333334,14.166666666666666,15.0,15.833333333333332,16.666666666666664,17.5,18.333333333333332,19.166666666666664,20.0,20.833333333333336,21.666666666666668,22.5,23.333333333333332,24.166666666666668,25.0,25.83333333333333,26.666666666666668,27.500000000000004,28.333333333333332,29.166666666666668,30.0,30.833333333333336,31.666666666666664,32.5,33.33333333333333,34.166666666666664,35.0,35.833333333333336,36.666666666666664,37.5,38.33333333333333,39.166666666666664,40.0,40.833333333333336,41.66666666666667,42.5,43.333333333333336,44.166666666666664,45.0,45.83333333333333,46.666666666666664,47.5,48.333333333333336,49.166666666666664,50.0,50.83333333333333,51.66666666666666,52.5,53.333333333333336,54.166666666666664,55.00000000000001,55.833333333333336,56.666666666666664,57.49999999999999,58.333333333333336,59.166666666666664,60.0,60.83333333333333,61.66666666666667,62.5,63.33333333333333,64.16666666666666,65.0,65.83333333333333,66.66666666666666,67.5,68.33333333333333,69.16666666666667,70.0,70.83333333333334,71.66666666666667,72.5,73.33333333333333,74.16666666666667,75.0,75.83333333333333,76.66666666666666,77.5,78.33333333333333,79.16666666666666,80.0,80.83333333333333,81.66666666666667,82.5,83.33333333333334,84.16666666666667,85.0,85.83333333333333,86.66666666666667,87.5,88.33333333333333,89.16666666666666,90.0,90.83333333333333,91.66666666666666,92.5,93.33333333333333,94.16666666666667,95.0,95.83333333333334,96.66666666666667,97.5,98.33333333333333,99.16666666666667,100.0],\"x\":[0.035,0.03466831927150653,0.03438244868792474,0.03414353892027011,0.03395258131243894,0.03381038836084423,0.03371757701852254,0.033674555593867075,0.03368151487751767,0.03373842394066445,0.033845030818587106,0.03400086804447466,0.03420526275297414,0.034457350852579734,0.03475609458945454,0.03510030270524743,0.035488652333449416,0.035919711781199536,0.03639196339853072,0.03690382583298256,0.037453675090407056,0.038039863958747276,0.03866073948824282,0.03931465834915917,0.04,0.04071517769142662,0.041458647402495476,0.042228914857002905,0.04302454080070014,0.04384414473767025,0.0446864073292987,0.04555007165502353,0.04643394352315029,0.047336891004796676,0.04825784334638717,0.049195789397512915,0.05014977567247933,0.05111890414622668,0.05210232986899701,0.053099258469398614,0.0541089436024931,0.05513068438819811,0.05616382287558424,0.05720774156042558,0.05826186097649511,0.05932563737542143,0.060398560505289446,0.06148015149442768,0.06256996084384263,0.0636675665294173,0.06477257221317609,0.06588460556154221,0.06700331666749375,0.06812837657279414,0.06925947588597534,0.07039632349143747,0.07153864534486082,0.07268618335007004,0.07383869431252003,0.07499594896466816,0.07615773105863909,0.07732383652176374,0.07849407267077205,0.07966825748063026,0.0808462189042327,0.08202779423937827,0.08321282953968097,0.08440117906627714,0.08559270477739975,0.08678727585308804,0.08798476825249041,0.08918506430139772,0.09038805230781334,0.09159362620352526,0.09280168520979443,0.09401213352541254,0.09522488003551265,0.09643983803963542,0.09765692499766722,0.09887606229236905,0.100097175007312,0.10132019171912379,0.10254504430303353,0.1037716677507776,0.105,0.10622998177434552,0.10746155643350376,0.10869466983251755,0.10992927018971992,0.1111653079627113,0.11240273573183172,0.1136415080906229,0.11488158154281206,0.11612291440538342,0.11736546671733462,0.11860920015374488,0.11985407794480754,0.12110006479950557,0.12234712683363039,0.12359523150186659,0.12484434753368337,0.12609444487279278,0.12734549461995112,0.12859746897889468,0.12985034120521638,0.13110408555800235,0.1323586772540601,0.1336140924245809,0.1348703080740902,0.136127302041549,0.13738505296347844,0.1386435402389884,0.13990274399659852,0.1411626450627471,0.14242322493189094,0.14368446573810423,0.1449463502280911,0.1462088617355323,0.14747198415669027,0.148735701927203,0.15],\"y\":[0.035,0.03520833333333333,0.035416666666666666,0.035625,0.035833333333333335,0.036041666666666666,0.03625,0.036458333333333336,0.03666666666666667,0.036875,0.03708333333333333,0.03729166666666667,0.0375,0.03770833333333333,0.03791666666666667,0.038125,0.03833333333333333,0.03854166666666667,0.03875,0.03895833333333333,0.03916666666666667,0.03937499999999999,0.03958333333333333,0.03979166666666666,0.04,0.04020833333333333,0.04041666666666667,0.040625,0.04083333333333333,0.04104166666666667,0.04125,0.04145833333333333,0.04166666666666667,0.041875,0.042083333333333334,0.04229166666666666,0.0425,0.04270833333333334,0.04291666666666666,0.043125,0.04333333333333334,0.04354166666666666,0.04375,0.04395833333333333,0.04416666666666666,0.044375,0.04458333333333333,0.04479166666666667,0.045,0.045208333333333336,0.04541666666666666,0.045625,0.04583333333333334,0.04604166666666666,0.04625,0.04645833333333334,0.04666666666666666,0.046875,0.04708333333333333,0.04729166666666666,0.0475,0.04770833333333333,0.04791666666666666,0.048125,0.04833333333333334,0.04854166666666667,0.04875,0.04895833333333334,0.049166666666666664,0.049375,0.04958333333333333,0.04979166666666666,0.05,0.05020833333333333,0.05041666666666667,0.050625,0.05083333333333333,0.05104166666666666,0.05125,0.05145833333333334,0.051666666666666666,0.051875,0.05208333333333333,0.05229166666666667,0.0525,0.05270833333333333,0.05291666666666666,0.053125,0.05333333333333333,0.05354166666666667,0.05375,0.05395833333333333,0.05416666666666666,0.054375,0.05458333333333334,0.05479166666666667,0.05500000000000001,0.05520833333333333,0.05541666666666667,0.055624999999999994,0.05583333333333333,0.05604166666666666,0.05625,0.05645833333333333,0.05666666666666667,0.056875,0.05708333333333333,0.05729166666666666,0.0575,0.05770833333333334,0.05791666666666667,0.058125,0.05833333333333333,0.05854166666666667,0.05874999999999999,0.05895833333333333,0.05916666666666666,0.059375,0.05958333333333333,0.05979166666666667,0.06],\"type\":\"scatter\"},{\"customdata\":[[[0.13203429462197971],[0.8679657053780202],[0.5166]]],\"hovertemplate\":\"efficient low risk<br>Stock: %{customdata[0]:.1%}<br>Bond: %{customdata[1]:.1%}<br>Sharpe ratio: %{customdata[2]:.4f}<br><extra></extra>\",\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers\",\"name\":\"efficient low risk\",\"x\":[0.03542526719998681],\"y\":[0.038300857365549494],\"type\":\"scatter\"},{\"hovertemplate\":\"wealth in efficient low risk = %{text:.0f}%<br>Sharpe ratio: 0.5166<extra></extra>\",\"line\":{\"color\":\"blue\"},\"mode\":\"lines\",\"name\":\"CAL: efficient low risk\",\"text\":[0.0,0.5,1.0,1.5,2.0,2.5,3.0,3.5000000000000004,4.0,4.5,5.0,5.5,6.0,6.5,7.000000000000001,7.5,8.0,8.5,9.0,9.5,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.000000000000002,14.499999999999998,15.0,15.5,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,25.0,25.5,26.0,26.5,27.0,27.500000000000004,28.000000000000004,28.500000000000004,28.999999999999996,29.5,30.0,30.5,31.0,31.5,32.0,32.5,33.0,33.5,34.0,34.5,35.0,35.5,36.0,36.5,37.0,37.5,38.0,38.5,39.0,39.5,40.0,40.5,41.0,41.5,42.0,42.5,43.0,43.5,44.0,44.5,45.0,45.5,46.0,46.5,47.0,47.5,48.0,48.5,49.0,49.5,50.0,50.5,51.0,51.5,52.0,52.5,53.0,53.5,54.0,54.50000000000001,55.00000000000001,55.50000000000001,56.00000000000001,56.50000000000001,57.00000000000001,57.50000000000001,57.99999999999999,58.5,59.0,59.5,60.0,60.5,61.0,61.5,62.0,62.5,63.0,63.5,64.0,64.5,65.0,65.5,66.0,66.5,67.0,67.5,68.0,68.5,69.0,69.5,70.0,70.5,71.0,71.5,72.0,72.5,73.0,73.5,74.0,74.5,75.0,75.5,76.0,76.5,77.0,77.5,78.0,78.5,79.0,79.5,80.0,80.5,81.0,81.5,82.0,82.5,83.0,83.5,84.0,84.5,85.0,85.5,86.0,86.5,87.0,87.5,88.0,88.5,89.0,89.5,90.0,90.5,91.0,91.5,92.0,92.5,93.0,93.5,94.0,94.5,95.0,95.5,96.0,96.5,97.0,97.5,98.0,98.5,99.0,99.5,100.0],\"x\":[0.0,0.00017712633599993404,0.0003542526719998681,0.0005313790079998021,0.0007085053439997361,0.0008856316799996703,0.0010627580159996042,0.0012398843519995384,0.0014170106879994723,0.0015941370239994062,0.0017712633599993406,0.0019483896959992745,0.0021255160319992084,0.0023026423679991426,0.0024797687039990767,0.0026568950399990104,0.0028340213759989446,0.0030111477119988787,0.0031882740479988124,0.003365400383998747,0.003542526719998681,0.003719653055998615,0.003896779391998549,0.004073905727998483,0.004251032063998417,0.004428158399998351,0.004605284735998285,0.004782411071998219,0.0049595374079981535,0.005136663743998087,0.005313790079998021,0.005490916415997955,0.005668042751997889,0.005845169087997823,0.0060222954239977575,0.006199421759997692,0.006376548095997625,0.006553674431997559,0.006730800767997494,0.006907927103997428,0.007085053439997362,0.0072621797759972965,0.00743930611199723,0.007616432447997164,0.007793558783997098,0.007970685119997031,0.008147811455996965,0.0083249377919969,0.008502064127996834,0.008679190463996768,0.008856316799996702,0.009033443135996636,0.00921056947199657,0.009387695807996504,0.009564822143996439,0.009741948479996373,0.009919074815996307,0.010096201151996241,0.010273327487996173,0.010450453823996108,0.010627580159996042,0.010804706495995976,0.01098183283199591,0.011158959167995844,0.011336085503995778,0.011513211839995713,0.011690338175995647,0.01186746451199558,0.012044590847995515,0.012221717183995449,0.012398843519995383,0.012575969855995316,0.01275309619199525,0.012930222527995184,0.013107348863995118,0.013284475199995052,0.013461601535994988,0.013638727871994922,0.013815854207994856,0.01399298054399479,0.014170106879994725,0.014347233215994659,0.014524359551994593,0.014701485887994527,0.01487861222399446,0.015055738559994394,0.015232864895994328,0.015409991231994262,0.015587117567994196,0.01576424390399413,0.015941370239994063,0.016118496575994,0.01629562291199393,0.016472749247993867,0.0166498755839938,0.016827001919993735,0.017004128255993668,0.0171812545919936,0.017358380927993536,0.017535507263993468,0.017712633599993404,0.01788975993599334,0.018066886271993272,0.01824401260799321,0.01842113894399314,0.018598265279993077,0.01877539161599301,0.018952517951992945,0.019129644287992877,0.019306770623992813,0.019483896959992746,0.01966102329599268,0.019838149631992614,0.02001527596799255,0.020192402303992482,0.020369528639992418,0.020546654975992347,0.020723781311992283,0.020900907647992215,0.02107803398399215,0.021255160319992084,0.02143228665599202,0.021609412991991952,0.021786539327991888,0.02196366566399182,0.022140791999991756,0.02231791833599169,0.022495044671991624,0.022672171007991557,0.022849297343991493,0.023026423679991425,0.02320355001599136,0.023380676351991293,0.02355780268799123,0.02373492902399116,0.023912055359991097,0.02408918169599103,0.024266308031990966,0.024443434367990898,0.024620560703990834,0.024797687039990766,0.0249748133759907,0.02515193971199063,0.025329066047990567,0.0255061923839905,0.025683318719990435,0.025860445055990368,0.026037571391990304,0.026214697727990236,0.026391824063990172,0.026568950399990104,0.02674607673599004,0.026923203071989976,0.02710032940798991,0.027277455743989844,0.027454582079989777,0.027631708415989713,0.027808834751989645,0.02798596108798958,0.028163087423989513,0.02834021375998945,0.028517340095989382,0.028694466431989318,0.02887159276798925,0.029048719103989186,0.02922584543998912,0.029402971775989054,0.029580098111988983,0.02975722444798892,0.02993435078398885,0.030111477119988787,0.03028860345598872,0.030465729791988656,0.030642856127988588,0.030819982463988524,0.030997108799988456,0.031174235135988392,0.031351361471988325,0.03152848780798826,0.031705614143988196,0.031882740479988125,0.03205986681598806,0.032236993151988,0.03241411948798793,0.03259124582398786,0.0327683721599878,0.032945498495987734,0.03312262483198767,0.0332997511679876,0.033476877503987534,0.03365400383998747,0.033831130175987406,0.034008256511987335,0.03418538284798727,0.0343625091839872,0.034539635519987136,0.03471676185598707,0.03489388819198701,0.035071014527986936,0.03524814086398687,0.03542526719998681],\"y\":[0.02,0.02009150428682775,0.020183008573655497,0.02027451286048324,0.02036601714731099,0.020457521434138738,0.020549025720966486,0.02064053000779423,0.02073203429462198,0.020823538581449728,0.020915042868277476,0.02100654715510522,0.02109805144193297,0.021189555728760717,0.021281060015588465,0.021372564302416214,0.02146406858924396,0.021555572876071707,0.021647077162899455,0.021738581449727203,0.021830085736554948,0.021921590023382696,0.022013094310210445,0.022104598597038193,0.02219610288386594,0.022287607170693686,0.022379111457521434,0.022470615744349182,0.02256212003117693,0.022653624318004675,0.022745128604832424,0.022836632891660172,0.02292813717848792,0.02301964146531567,0.023111145752143413,0.02320265003897116,0.02329415432579891,0.023385658612626658,0.023477162899454403,0.02356866718628215,0.0236601714731099,0.023751675759937647,0.023843180046765396,0.02393468433359314,0.02402618862042089,0.024117692907248637,0.024209197194076385,0.02430070148090413,0.024392205767731878,0.024483710054559626,0.024575214341387375,0.024666718628215123,0.024758222915042868,0.024849727201870616,0.024941231488698364,0.025032735775526112,0.025124240062353857,0.025215744349181606,0.025307248636009354,0.025398752922837102,0.02549025720966485,0.025581761496492595,0.025673265783320343,0.02576477007014809,0.02585627435697584,0.025947778643803585,0.026039282930631333,0.02613078721745908,0.02622229150428683,0.026313795791114578,0.026405300077942326,0.02649680436477007,0.02658830865159782,0.026679812938425564,0.026771317225253312,0.02686282151208106,0.02695432579890881,0.027045830085736557,0.027137334372564305,0.02722883865939205,0.027320342946219798,0.027411847233047546,0.027503351519875294,0.02759485580670304,0.027686360093530787,0.027777864380358536,0.027869368667186284,0.027960872954014032,0.028052377240841777,0.028143881527669525,0.028235385814497273,0.028326890101325018,0.028418394388152766,0.028509898674980515,0.028601402961808263,0.02869290724863601,0.02878441153546376,0.028875915822291504,0.028967420109119252,0.029058924395946997,0.029150428682774746,0.029241932969602494,0.029333437256430242,0.02942494154325799,0.02951644583008574,0.029607950116913487,0.029699454403741235,0.02979095869056898,0.029882462977396728,0.029973967264224473,0.03006547155105222,0.03015697583787997,0.030248480124707718,0.030339984411535466,0.030431488698363214,0.030522992985190962,0.030614497272018704,0.030706001558846452,0.0307975058456742,0.03088901013250195,0.030980514419329697,0.031072018706157445,0.031163522992985193,0.03125502727981294,0.03134653156664069,0.03143803585346844,0.03152954014029618,0.03162104442712393,0.031712548713951676,0.031804053000779424,0.03189555728760717,0.03198706157443492,0.03207856586126267,0.03217007014809042,0.03226157443491816,0.032353078721745906,0.032444583008573655,0.0325360872954014,0.03262759158222915,0.0327190958690569,0.03281060015588465,0.032902104442712396,0.032993608729540144,0.033085113016367886,0.033176617303195634,0.03326812159002338,0.03335962587685113,0.03345113016367888,0.03354263445050663,0.033634138737334375,0.033725643024162116,0.033817147310989865,0.03390865159781761,0.03400015588464536,0.03409166017147311,0.03418316445830086,0.034274668745128606,0.034366173031956354,0.0344576773187841,0.03454918160561185,0.0346406858924396,0.03473219017926735,0.034823694466095095,0.03491519875292284,0.035006703039750585,0.03509820732657833,0.03518971161340608,0.03528121590023382,0.03537272018706157,0.03546422447388932,0.03555572876071707,0.035647233047544816,0.035738737334372564,0.03583024162120031,0.03592174590802806,0.03601325019485581,0.03610475448168356,0.036196258768511305,0.03628776305533905,0.0363792673421668,0.03647077162899455,0.03656227591582229,0.03665378020265004,0.03674528448947779,0.036836788776305536,0.036928293063133284,0.037019797349961026,0.037111301636788774,0.03720280592361652,0.03729431021044427,0.03738581449727202,0.03747731878409977,0.037568823070927515,0.03766032735775526,0.03775183164458301,0.03784333593141076,0.03793484021823851,0.038026344505066256,0.038117848791894,0.038209353078721746,0.038300857365549494],\"type\":\"scatter\"},{\"customdata\":[[[0.3511182108626197],[0.6488817891373803],[0.2003]]],\"hovertemplate\":\"efficient high mean portfolio<br>Stock: %{customdata[0]:.1%}<br>Bond: %{customdata[1]:.1%}<br>Sharpe ratio (relative to borrowing rate): %{customdata[2]:.4f}<br><extra></extra>\",\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers\",\"name\":\"efficient high mean portfolio\",\"x\":[0.05630328830688629],\"y\":[0.043777955271565486],\"type\":\"scatter\"},{\"hovertemplate\":\"wealth in efficient high mean = %{text:.0f}%<br>Sharpe ratio (relative to borrowing rate): 0.2003<extra></extra>\",\"line\":{\"color\":\"blue\"},\"mode\":\"lines\",\"name\":\"CAL: efficient high mean\",\"text\":[100.0,101.0,102.0,103.0,104.0,105.0,106.0,107.0,108.0,109.00000000000001,110.00000000000001,111.00000000000001,112.00000000000001,112.99999999999999,114.00000000000001,114.99999999999999,115.99999999999999,117.0,118.0,119.0,120.0,121.0,122.0,123.0,124.0,125.0,126.0,127.0,128.0,129.0,130.0,131.0,132.0,133.0,134.0,135.0,136.0,137.0,138.0,139.0,140.0,141.0,142.0,143.0,144.0,145.0,146.0,147.0,148.0,149.0,150.0,151.0,152.0,153.0,154.0,155.0,156.0,157.0,158.0,159.0,160.0,161.0,162.0,163.0,164.0,165.0,166.0,167.0,168.00000000000003,169.0,170.00000000000003,171.0,172.0,173.0,174.0,175.0,176.0,177.0,178.0,179.0,180.0,181.0,182.0,183.0,184.0,185.0,186.0,187.0,188.0,189.0,190.0,191.0,192.0,193.00000000000003,194.0,195.00000000000003,196.0,197.0,198.0,199.0,200.0,200.99999999999997,202.0,203.00000000000003,204.0,204.99999999999997,206.0,207.00000000000003,208.0,209.0,210.0,211.00000000000003,212.0,213.0,214.0,215.00000000000003,216.0,217.0,217.99999999999997,219.0,220.00000000000003,221.0,221.99999999999997,223.0,224.00000000000003,225.0,225.99999999999997,227.0,228.00000000000003,229.0,229.99999999999997,231.0,232.00000000000003,233.0,234.0,235.0,236.00000000000003,237.0,238.0,239.0,240.00000000000003,241.0,242.0,242.99999999999997,244.0,245.00000000000003,246.0,246.99999999999997,248.0,249.00000000000003,250.0,250.99999999999997,252.0,253.00000000000003,254.0,254.99999999999997,256.0,257.0,258.0,259.0,260.0,261.00000000000006,262.0,263.0,264.0,265.00000000000006,266.0,267.0,268.0,269.0,270.0,271.0,272.0,273.0,274.0,275.0,276.0,277.0,278.0,279.0,280.0,281.0,282.0,283.0,284.0,285.0,286.00000000000006,287.0,288.0,289.0,290.00000000000006,291.0,292.0,293.0,294.0,295.0,296.0,297.0,298.0,299.0,300.0],\"x\":[0.05630328830688629,0.05686632118995515,0.05742935407302401,0.05799238695609288,0.05855541983916174,0.059118452722230604,0.05968148560529947,0.06024451848836833,0.060807551371437195,0.06137058425450606,0.06193361713757492,0.062496650020643786,0.06305968290371265,0.0636227157867815,0.06418574866985037,0.06474878155291923,0.06531181443598809,0.06587484731905695,0.06643788020212582,0.06700091308519468,0.06756394596826354,0.06812697885133241,0.06869001173440127,0.06925304461747013,0.06981607750053899,0.07037911038360786,0.07094214326667672,0.07150517614974558,0.07206820903281445,0.07263124191588331,0.07319427479895217,0.07375730768202104,0.0743203405650899,0.07488337344815876,0.07544640633122764,0.0760094392142965,0.07657247209736534,0.07713550498043421,0.07769853786350307,0.07826157074657195,0.07882460362964079,0.07938763651270968,0.07995066939577852,0.08051370227884738,0.08107673516191626,0.08163976804498511,0.08220280092805397,0.08276583381112285,0.0833288666941917,0.08389189957726056,0.08445493246032942,0.0850179653433983,0.08558099822646716,0.08614403110953602,0.08670706399260489,0.08727009687567375,0.0878331297587426,0.08839616264181148,0.08895919552488034,0.08952222840794918,0.09008526129101807,0.09064829417408692,0.09121132705715579,0.09177435994022465,0.09233739282329352,0.09290042570636237,0.09346345858943124,0.0940264914725001,0.09458952435556897,0.09515255723863782,0.0957155901217067,0.09627862300477555,0.09684165588784441,0.09740468877091328,0.09796772165398214,0.098530754537051,0.09909378742011987,0.09965682030318873,0.10021985318625759,0.10078288606932645,0.10134591895239532,0.10190895183546418,0.10247198471853304,0.10303501760160191,0.10359805048467076,0.10416108336773963,0.10472411625080849,0.10528714913387736,0.10585018201694621,0.1064132149000151,0.10697624778308394,0.10753928066615281,0.10810231354922167,0.10866534643229055,0.10922837931535939,0.10979141219842826,0.11035444508149712,0.11091747796456598,0.11148051084763484,0.11204354373070372,0.11260657661377257,0.11316960949684142,0.1137326423799103,0.11429567526297918,0.11485870814604802,0.11542174102911688,0.11598477391218576,0.11654780679525463,0.11711083967832348,0.11767387256139233,0.11823690544446121,0.11879993832753008,0.11936297121059894,0.11992600409366778,0.12048903697673666,0.12105206985980553,0.12161510274287439,0.12217813562594323,0.1227411685090121,0.12330420139208097,0.12386723427514984,0.1244302671582187,0.12499330004128754,0.12555633292435642,0.1261193658074253,0.12668239869049414,0.127245431573563,0.12780846445663188,0.12837149733970074,0.1289345302227696,0.12949756310583846,0.13006059598890732,0.1306236288719762,0.13118666175504506,0.1317496946381139,0.13231272752118278,0.13287576040425167,0.1334387932873205,0.13400182617038936,0.13456485905345825,0.1351278919365271,0.13569092481959596,0.13625395770266482,0.13681699058573366,0.13738002346880254,0.1379430563518714,0.13850608923494026,0.13906912211800912,0.13963215500107798,0.14019518788414687,0.14075822076721572,0.14132125365028456,0.14188428653335344,0.14244731941642233,0.14301035229949116,0.14357338518256002,0.1441364180656289,0.14469945094869777,0.14526248383176663,0.14582551671483548,0.14638854959790434,0.14695158248097323,0.1475146153640421,0.14807764824711092,0.1486406811301798,0.14920371401324867,0.14976674689631753,0.15032977977938639,0.15089281266245524,0.1514558455455241,0.152018878428593,0.15258191131166185,0.15314494419473068,0.15370797707779957,0.15427100996086843,0.1548340428439373,0.15539707572700615,0.155960108610075,0.1565231414931439,0.15708617437621275,0.15764920725928158,0.15821224014235047,0.15877527302541936,0.1593383059084882,0.15990133879155705,0.16046437167462593,0.1610274045576948,0.16159043744076365,0.1621534703238325,0.16271650320690137,0.16327953608997026,0.16384256897303912,0.16440560185610795,0.1649686347391768,0.1655316676222457,0.16609470050531455,0.1666577333883834,0.16722076627145227,0.16778379915452113,0.16834683203759002,0.16890986492065885],\"y\":[0.043777955271565486,0.043890734824281144,0.044003514376996795,0.04411629392971245,0.044229073482428105,0.04434185303514376,0.044454632587859415,0.044567412140575066,0.044680191693290724,0.04479297124600638,0.044905750798722034,0.04501853035143769,0.045131309904153344,0.045244089456868995,0.045356869009584654,0.045469648562300305,0.04558242811501596,0.04569520766773162,0.04580798722044727,0.045920766773162924,0.04603354632587858,0.04614632587859424,0.04625910543130989,0.046371884984025544,0.0464846645367412,0.04659744408945686,0.04671022364217251,0.04682300319488816,0.04693578274760382,0.04704856230031948,0.04716134185303513,0.04727412140575078,0.04738690095846644,0.0474996805111821,0.04761246006389775,0.04772523961661341,0.04783801916932906,0.04795079872204472,0.04806357827476037,0.04817635782747602,0.04828913738019168,0.04840191693290734,0.04851469648562299,0.04862747603833864,0.0487402555910543,0.04885303514376996,0.04896581469648561,0.04907859424920126,0.04919137380191692,0.04930415335463258,0.04941693290734823,0.04952971246006388,0.04964249201277954,0.049755271565495196,0.04986805111821085,0.0499808306709265,0.05009361022364216,0.050206389776357815,0.05031916932907347,0.05043194888178912,0.050544728434504776,0.050657507987220435,0.050770287539936086,0.05088306709265174,0.050995846645367396,0.051108626198083054,0.051221405750798706,0.05133418530351436,0.051446964856230015,0.051559744408945674,0.05167252396166133,0.051785303514376976,0.051898083067092635,0.05201086261980829,0.052123642172523944,0.052236421725239596,0.052349201277955254,0.05246198083067091,0.052574760383386564,0.052687539936102215,0.05280031948881787,0.05291309904153353,0.05302587859424918,0.053138658146964834,0.05325143769968049,0.05336421725239615,0.0534769968051118,0.053589776357827454,0.05370255591054311,0.05381533546325877,0.05392811501597442,0.05404089456869007,0.05415367412140573,0.05426645367412139,0.05437923322683704,0.0544920127795527,0.05460479233226835,0.05471757188498401,0.05483035143769966,0.05494313099041531,0.05505591054313097,0.05516869009584662,0.05528146964856228,0.05539424920127794,0.05550702875399359,0.05561980830670924,0.0557325878594249,0.05584536741214056,0.05595814696485621,0.05607092651757187,0.05618370607028752,0.05629648562300318,0.05640926517571883,0.05652204472843449,0.05663482428115014,0.056747603833865796,0.05686038338658145,0.056973162939297106,0.05708594249201275,0.05719872204472841,0.05731150159744407,0.057424281150159726,0.05753706070287537,0.05764984025559103,0.05776261980830669,0.057875399361022345,0.05798817891373799,0.05810095846645365,0.058213738019169306,0.058326517571884964,0.05843929712460061,0.05855207667731627,0.058664856230031925,0.058777635782747584,0.058890415335463235,0.059003194888178886,0.059115974440894545,0.0592287539936102,0.059341533546325854,0.059454313099041506,0.059567092651757164,0.05967987220447282,0.059792651757188474,0.059905431309904125,0.060018210862619784,0.06013099041533544,0.06024376996805109,0.060356549520766745,0.0604693290734824,0.06058210862619806,0.06069488817891371,0.060807667731629364,0.06092044728434502,0.06103322683706068,0.06114600638977633,0.06125878594249198,0.06137156549520764,0.0614843450479233,0.06159712460063895,0.0617099041533546,0.06182268370607026,0.06193546325878592,0.06204824281150157,0.06216102236421722,0.06227380191693288,0.06238658146964854,0.06249936102236419,0.06261214057507984,0.0627249201277955,0.06283769968051116,0.06295047923322682,0.06306325878594246,0.06317603833865812,0.06328881789137378,0.06340159744408944,0.06351437699680508,0.06362715654952074,0.0637399361022364,0.06385271565495204,0.0639654952076677,0.06407827476038336,0.06419105431309902,0.06430383386581467,0.06441661341853033,0.06452939297124598,0.06464217252396164,0.0647549520766773,0.06486773162939294,0.0649805111821086,0.06509329073482426,0.06520607028753991,0.06531884984025557,0.06543162939297122,0.06554440894568686,0.06565718849840252,0.06576996805111818,0.06588274760383384,0.0659955271565495,0.06610830670926515,0.06622108626198081,0.06633386581469645],\"type\":\"scatter\"},{\"hovertemplate\":\"Saving rate<extra></extra>\",\"marker\":{\"color\":\"black\",\"size\":10},\"mode\":\"markers\",\"name\":\"Risk-free (Saving)\",\"x\":[0],\"y\":[0.02],\"type\":\"scatter\"},{\"hovertemplate\":\"Borrowing rate<extra></extra>\",\"marker\":{\"color\":\"DarkGrey\",\"size\":10},\"mode\":\"markers\",\"name\":\"Risk-free (Borrowing)\",\"x\":[0],\"y\":[0.0325],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"title\":{\"text\":\"Standard Deviation\"},\"range\":[-0.005,0.1875],\"tickformat\":\".0%\"},\"yaxis\":{\"title\":{\"text\":\"Expected Return\"},\"range\":[0,0.06899999999999999],\"tickformat\":\".0%\"},\"legend\":{\"yanchor\":\"top\",\"y\":0.65,\"xanchor\":\"left\",\"x\":0.535}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('d1f581fe-13cb-409b-8be5-331632d9000f');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPortfolios of two risky assets and risk-free saving and borrowing\n:::\n:::\n\n\n### Optimal Capital Allocation {-}\n\nWhere do investors with different risk aversions choose to invest when faced with this investment opportunity set?  The answer depends on the investor's risk aversion and the Sharpe ratios of the efficient low risk and high mean portfolios.  First, consider investors risk aversion greater than the Sharpe ratio of the efficient low risk portfolio, calculated with respect to the savings rate.^[That is, $A>\\frac{E[r_{\\text{low}}-r_f^{\\text{saving}}]}{\\text{var}_{\\text{low}}}$.]  These high risk aversion investors invest a fraction $w^*$ of their wealth in the efficient low risk portfolio and the remainder is saved as the savings rate.  The optimal fraction of wealth in the efficient low risk portfolio as a function of risk aversion is:\n\n$$ w^*_{\\text{low}} = \\frac{E[r_{\\text{low}}-r_f^{\\text{saving}}]}{A \\cdot \\text{var}_{\\text{low}}}.$$\n\n\n\nSecond, consider investors with risk aversion less than the Sharpe ratio of the efficient high mean portfolio, calculated with respect to the borrowing rate.^[That is, $A<\\frac{E[r_{\\text{high}}-r_f^{\\text{borrow}}]}{\\text{var}_{\\text{high}}}$.]  These low risk aversion investors borrow money and hold a levered position in the efficient high mean portfolio.  The optimal weight in the efficient high mean portfolio is:\n\n$$ w^*_{\\text{high}} = \\frac{E[r_{\\text{high}}-r_f^{\\text{borrow}}]}{A \\cdot \\text{var}_{\\text{high}}}.$$\n\n\nThe third group of investors are those with intermediate risk aversion (i.e., risk aversion falling between the savings rate efficient low risk Sharpe ratio and the borrowing rate efficient high mean Sharpe ratio).  These investors hold a portfolio that is a combination of the efficient low risk and high mean portfolios.  They do not borrow or save.  The optimal weight in the low-risk portfolio is:\n\n$$ a^* = \\frac{E[r_{\\text{low}} - r_{\\text{high}}] - A (\\text{cov}[r_{\\text{low}}, r_{\\text{high}}]-\\text{var}[r_{\\text{high}}])}{A (\\text{var}[r_{\\text{low}}]+\\text{var}[r_{\\text{high}}]-2\\text{cov}[r_{\\text{low}}, r_{\\text{high}}])}\\,,$$ {#eq-frontier-optimal}\nand $1-a^*$ is the efficient high mean portfolio weight.^[The covariance between the efficient low risk and high mean portfolios ($\\text{cov}[r_{\\text{low}}, r_{\\text{high}}]$) can be calculated as $w_{\\text{low}}' V w_{\\text{high}}$, where $w_{\\text{low}}$ and $w_{\\text{high}}$ are the weights in the underlying risky assets for the efficient low-risk and high-mean portfolios, respectively.]\n\n::: {.callout-note collapse=\"true\"}\n# Deriving $a^*$\nFor intermediate risk aversion levels, the optimal weight in the efficient low-risk portfolio solves $$ \\underset{a}\\max E[a\\cdot r_{\\text{low}} + (1-a)\\cdot r_{\\text{high}}] - 0.5\\cdot A \\cdot \\text{var}[a\\cdot r_{\\text{low}} + (1-a)\\cdot r_{\\text{high}}]\\,. $$  @eq-frontier-optimal is found by taking the derivative of the mean-variance utility with respect to $a$ and solving the first-order condition for $a$.\n:::\n\n@fig-diffsaveborrow-and-preferences shows indifference curves at the highest possible utility level for investors with the indicated risk aversions. The portfolio where each indifference curve intersects the efficient frontier is that investor's optimal portfolio.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\n\nmn_stock = 6\nmn_bond  = 3.5\nsd_stock = 15\nsd_bond  = 3.5\ncorr = -5\n\nrs = 2\nextra = 1.25\n\nraver1 = 2\nraver2 = 5\n\ndef data(mn1, mn2, sd1, sd2, c, rs, extra):\n    c = c / 100\n    rb = rs + extra   \n    rs = rs/100\n    rb = rb/100\n    mns = [mn1, mn2]\n    sds = [sd1, sd2]\n    grid = np.linspace(0, 1, 101)\n    ports = [np.array([w, 1 - w]) for w in grid]\n    means = [p.T @ np.array(mns) for p in ports]\n    df = pd.DataFrame(means)\n    df.columns = [\"mean\"]\n    cov = np.array(\n        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]\n    ).reshape(2, 2)\n    df[\"stdev\"] = [np.sqrt(p.T @ cov @ p) for p in ports]\n    df[\"wt1\"] = grid\n    df[\"wt2\"] = 1 - df.wt1\n    for col in [\"mean\", \"stdev\"]:\n        df[col] = df[col] / 100\n    df[\"sr_s\"]= (df[\"mean\"] - rs)/df[\"stdev\"]\n    df[\"sr_b\"]= (df[\"mean\"] - rb)/df[\"stdev\"]\n   \n    return df\n\ndef rf_plus_risky(mn, sd, rs, rb, w_min, w_max):\n    mn /= 100\n    sd /= 100\n    rs /= 100\n    rb /= 100\n    grid = np.linspace(w_min, w_max, 201)\n    mns = [(rs + w * (mn - rs) if w <= 1 else rb + w * (mn - rb)) for w in grid]\n    sds = [w * sd for w in grid]\n    srs = (mn - rs)/sd\n    srb = (mn - rb)/sd\n    return grid, mns, sds, srs, srb\n\ndef opt_utility(mns, cov, Shorts, s, b, A):\n    # P is a portfolio object based on expected returns, covariance matrix, and shorts\n    P = portfolio(mns, cov, Shorts) \n    gmv = P.GMV @ mns\n    if s==b:\n        #tangency exp ret and sd\n        if (s < gmv) or (not Shorts):\n            portTang = P.tangency(s)\n            mnTang = portTang @ mns\n            if mnTang < np.max(mns):\n                sdTang = np.sqrt(portTang @ cov @ portTang)\n\n                #optimal weight in tangency based on risk-aversion\n                wgt = (mnTang - s) / (A * (sdTang**2))\n                expret= wgt*mnTang + (1-wgt)*s\n                sdret = wgt*sdTang \n                wgt_rf = 1-wgt\n                wgt_lo = wgt\n                wgt_hi = 0.0\n    else:\n        #efficient low-risk portfolio\n        if (s < gmv) or (not Shorts):\n            portTangLowRisk = P.tangency(s)\n            mnTangLowRisk = portTangLowRisk @ mns\n            if mnTangLowRisk < np.max(mns):\n                sdTangLowRisk = np.sqrt(portTangLowRisk @ cov @ portTangLowRisk)\n\n        #efficient high-risk portfolio\n        if ((b<gmv) or (not Shorts)):\n            portTangHighRisk = P.tangency(b)\n            mnTangHighRisk = portTangHighRisk @ mns\n            if mnTangHighRisk < np.max(mns):\n                sdTangHighRisk = np.sqrt(portTangHighRisk @ cov @ portTangHighRisk)\n\n        #1st: efficient low risk CAL\n        wgt = (mnTangLowRisk - s) / (A * (sdTangLowRisk**2))\n        expret= wgt*mnTangLowRisk + (1-wgt)*s\n        sdret = wgt*sdTangLowRisk \n        wgt_rf = 1-wgt\n        wgt_lo = wgt\n        wgt_hi = 0.0\n        # print('Weight low risk CAL: ', wgt)\n        if wgt > 1.0:\n            #2nd: efficient high risk CAL\n            wgt = (mnTangHighRisk - b) / (A * (sdTangHighRisk**2))\n            expret= wgt*mnTangHighRisk + (1-wgt)*b\n            sdret = wgt*sdTangHighRisk \n            wgt_rf = 1-wgt\n            wgt_lo = 0.0\n            wgt_hi = wgt\n            # print('Weight high risk CAL: ', wgt)\n            if wgt < 1.0:\n                #3rd: risky asset frontier\n                wgt = 1 #This is should be interpreted as total weight in risky assets.\n                # Method 1: solve analytically for utility-maximizing mix of efficient low and high risk portfolios\n                cov_hilo = portTangLowRisk.T @cov @ portTangHighRisk\n                wgt_lo = (mnTangLowRisk - mnTangHighRisk - A *(cov_hilo  - sdTangHighRisk**2))/(A*(sdTangLowRisk**2 + sdTangHighRisk**2 - 2*cov_hilo))\n                expret = wgt_lo*mnTangLowRisk + (1-wgt_lo)* mnTangHighRisk\n                sdret = np.sqrt((wgt_lo**2) *sdTangLowRisk**2 + ((1-wgt_lo)**2) * sdTangHighRisk**2 + 2*wgt_lo*(1-wgt_lo)*portTangLowRisk.T @cov @ portTangHighRisk)\n                wgt_hi = 1-wgt_lo\n                wgt_rf = 0.0\n\n                # #Method 2: calculate frontier manually and choose max utility\n                # eret_grid = np.linspace(mnTangLowRisk, mnTangHighRisk, 100)\n                # df = pd.DataFrame(dtype='float', columns=['mn','sd','u'],index=np.arange(0,100))\n                # for i,m in enumerate(eret_grid):\n                #     portFrontier = P.frontier(m)\n                #     df.loc[i,'mn'] = portFrontier @ mns\n                #     df.loc[i,'sd'] = np.sqrt(portFrontier @ cov @ portFrontier)\n                # df['u']  = df['mn'] - 0.5*A* df['sd']**2\n                # opt_mn = df.loc[df['u'].idxmax(),'mn']\n                # portFrontier = P.frontier(opt_mn)\n                # expret = portFrontier @ mns\n                # sdret  = np.sqrt(portFrontier @ cov @ portFrontier)\n                # print('Weight frontier: ', wgt)\n\n    u = expret - 0.5*A*sdret**2\n    return u, wgt, wgt_rf, wgt_lo, wgt_hi\n\n\n\ndef figtbl(mn1, mn2, sd1, sd2, c, rs, extra, raver1, raver2, asset1_name, asset2_name):\n    df = data(mn1, mn2, sd1, sd2, c, rs, extra)\n    \n    #Plot the portfolios of the two assets\n    trace1 = go.Scatter(\n        x=df[\"stdev\"],\n        y=df[\"mean\"],\n        mode=\"lines\",\n        # line={'color': green},\n        text=100 * df[\"wt1\"],\n        customdata=100 * df[\"wt2\"],\n        hovertemplate=asset1_name+\": %{text:.0f}%<br>\"+asset2_name+\": %{customdata:.0f}%<extra></extra>\",\n        line=dict(color=\"black\"),\n        name=\"Stock & Bond Frontier\"\n    )\n    \n    # Plot the two assets\n    df = df[df.wt1.isin([0, 1])]\n    df[\"text\"] = np.where(df.wt1 == 1, asset1_name, asset2_name)\n    trace2a = go.Scatter(\n        x=df[df.wt1==1][\"stdev\"],\n        y=df[df.wt1==1][\"mean\"],\n        mode=\"markers\",\n        text=df[df.wt1==1][\"text\"],\n        hovertemplate=\"%{text}<extra></extra>\",\n        marker=dict(size=10, color=\"orange\"),\n        name=asset1_name\n    )\n    trace2b = go.Scatter(\n        x=df[df.wt1==0][\"stdev\"],\n        y=df[df.wt1==0][\"mean\"],\n        mode=\"markers\",\n        text=df[df.wt1==0][\"text\"],\n        hovertemplate=\"%{text}<extra></extra>\",\n        marker=dict(size=10, color=\"red\"),\n        name=asset2_name\n    )\n\n    fig = go.Figure()\n    fig.add_trace(trace2a)\n    fig.add_trace(trace2b)\n    fig.add_trace(trace1)\n\n\n\n    def custom(string, ports,srTang,borrow_flag):\n        # borrow_flag=1 adds statement about \"relative to borrowing rate\"\n        cd = np.empty(shape=(len(ports), N+1, 1), dtype=float)\n        for i in range(N):\n            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)\n        cd[:,N] = np.round(srTang,4)\n        # print(cd)\n        string += \"<br>\"\n        for i in range(N):\n            string += \"asset \" + str(i + 1)\n            string += \": %{customdata[\"\n            string += str(i)\n            string += \"]:.1%}<br>\"\n        if borrow_flag==1:\n            string += \"Sharpe ratio (relative to borrowing rate): %{customdata[\" +  str(N) + \"]:.4f}<br>\"    \n        else:\n            string += \"Sharpe ratio: %{customdata[\" +  str(N) + \"]:.4f}<br>\"\n        string += \"<extra></extra>\"\n        return string, cd  \n\n    # Plot the tangency portfolios\n    c = c / 100\n    rb = rs + extra     \n    rs = rs/100\n    rb = rb/100\n    mns = [mn1, mn2]\n    mns = np.array(mns) / 100\n    sds = [sd1, sd2]\n    sds = np.array(sds) / 100\n    cov = np.array(\n        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]\n    ).reshape(2, 2)\n    \n    Shorts = True    \n    N = len(mns)\n    P = portfolio(mns, cov, Shorts)    \n    gmv = P.GMV @ mns\n    # print('GMV return is: ',gmv)\n    if (rs < gmv) or (not Shorts):\n        portTang = P.tangency(rs)\n        mnTang = portTang @ mns\n        if mnTang < np.max(mns):\n            sdTang = np.sqrt(portTang @ cov @ portTang)\n            srTang = (mnTang - rs)/sdTang\n            string0 = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'\n            string, cd = custom(string0, [portTang], srTang,0)\n            trace = go.Scatter(\n                x=[sdTang],\n                y=[mnTang],\n                mode=\"markers\",\n                customdata=cd,\n                hovertemplate=string,\n                marker=dict(size=10, color=\"blue\"),\n                name=string0\n            )\n            fig.add_trace(trace)\n            \n            #Plot CAL (no leverage)\n            if rb==rs:\n                max_wgt = 4.0\n            else:\n                max_wgt = 1.0\n            grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mnTang*100, sdTang*100, rs*100,rb*100,0, max_wgt)\n            portlabel = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'\n            string = \"wealth in \"+portlabel + \" = %{text:.0f}%<br>\" + \"Sharpe ratio: \" +  \"{:.4f}\".format(srTang) +\"<extra></extra>\"\n            trace5 = go.Scatter(\n                x=sds_cal, \n                y=mns_cal, \n                mode=\"lines\", \n                text=100 * grid, \n                hovertemplate=string, \n                line=dict(color=\"blue\"),\n                name=\"CAL: \" + portlabel\n            )           \n            fig.add_trace(trace5)\n              \n            \n            \n\n    if (rb != rs) and ((gmv > rb) or (not Shorts)):\n        portTang = P.tangency(rb)\n        mnTang = portTang @ mns\n        if mnTang < np.max(mns):\n            sdTang = np.sqrt(portTang @ cov @ portTang)\n            srTang = (mnTang - rb)/sdTang\n            string = 'efficient high mean portfolio'\n            string, cd = custom(string, [portTang], srTang,1)\n            trace = go.Scatter(\n                x=[sdTang],\n                y=[mnTang],\n                mode=\"markers\",\n                customdata=cd,\n                hovertemplate=string,\n                marker=dict(size=10, color=\"blue\"),\n                name=\"efficient high mean portfolio\"\n            )\n            fig.add_trace(trace)\n            \n            #Plot CAL (with leverage)            \n            grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mnTang*100, sdTang*100, rs*100,rb*100, 1.0, 4.0)\n            string = \"wealth in efficient high mean portfolio = %{text:.0f}%<br>\" + \"Sharpe ratio (relative to borrowing rate): \" + \"{:.4f}\".format(srTang) +\"<extra></extra>\"\n            trace6 = go.Scatter(\n                x=sds_cal, \n                y=mns_cal, \n                mode=\"lines\", \n                text=100 * grid, \n                hovertemplate=string,\n                line=dict(color=\"blue\"),\n                name = \"CAL: efficient high mean\"\n            )           \n            fig.add_trace(trace6)   \n \n\n\n    # Utility plot info\n    u1, wgt1, wgt_rf1, wgt_lo1, wgt_hi1 = opt_utility(mns, cov, Shorts, rs, rb, raver1)\n    u2, wgt2, wgt_rf2, wgt_lo2, wgt_hi2 = opt_utility(mns, cov, Shorts, rs, rb, raver2)\n    string1='Risk Aversion='+str(raver1)\n    string2='Risk Aversion='+str(raver2)\n    grid = np.linspace(0,1.4,100)\n    sds = [w*np.max(sds) for w in grid]\n    eret1 = [u1 + 0.5*raver1* (sd**2) for sd in sds]\n    eret2 = [u2 + 0.5*raver2* (sd**2) for sd in sds] \n    # df = pd.DataFrame(data={'Standard Deviation': sds, string1: U1, string2: U2})\n    string = \"indifference curve for <br> optimal utility for risk aversion of \"+str(np.round(raver1,1))+\"<extra></extra>\"\n    trace7 = go.Scatter(\n        x=sds, y=eret1, mode=\"lines\", hovertemplate=string, name=string1, line=dict(color=\"purple\",dash='dot'),\n    )  \n    string = \"indifference curve for <br> optimal utility for risk aversion of \"+str(np.round(raver2,1))+\"<extra></extra>\"\n    trace8 = go.Scatter(\n        x=sds, y=eret2, mode=\"lines\", hovertemplate=string, name=string2, line=dict(color=\"purple\"),\n    )  \n    fig.add_trace(trace7) \n    fig.add_trace(trace8) \n \n    \n    fig.layout.xaxis[\"title\"] = \"Standard Deviation\"\n    fig.layout.yaxis[\"title\"] = \"Expected Return\"\n    fig.update_xaxes(range=[0, 1.25 * df[\"stdev\"].max()])\n    fig.update_yaxes(range=[0, 1.25 * df[\"mean\"].max()])\n    fig.update_yaxes(tickformat=\".0%\")\n    fig.update_xaxes(tickformat=\".0%\")\n    fig.update_layout(legend=dict(yanchor=\"top\", y =0.55, xanchor=\"left\", x=0.6))\n    fig.show()\n\nfigtbl(mn_stock,mn_bond,sd_stock,sd_bond,corr,rs,extra,raver1, raver2, \"Stock\",\"Bond\")\n```\n\n::: {#fig-diffsaveborrow-and-preferences .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"5f584a88-72e8-452a-89c6-104aaad45cc0\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"5f584a88-72e8-452a-89c6-104aaad45cc0\")) {                    Plotly.newPlot(                        \"5f584a88-72e8-452a-89c6-104aaad45cc0\",                        [{\"hovertemplate\":\"%{text}<extra></extra>\",\"marker\":{\"color\":\"orange\",\"size\":10},\"mode\":\"markers\",\"name\":\"Stock\",\"text\":[\"Stock\"],\"x\":[0.15],\"y\":[0.06],\"type\":\"scatter\"},{\"hovertemplate\":\"%{text}<extra></extra>\",\"marker\":{\"color\":\"red\",\"size\":10},\"mode\":\"markers\",\"name\":\"Bond\",\"text\":[\"Bond\"],\"x\":[0.035],\"y\":[0.035],\"type\":\"scatter\"},{\"customdata\":[100.0,99.0,98.0,97.0,96.0,95.0,94.0,93.0,92.0,91.0,90.0,89.0,88.0,87.0,86.0,85.0,84.0,83.0,82.0,81.0,80.0,79.0,78.0,77.0,76.0,75.0,74.0,73.0,72.0,71.0,70.0,69.0,68.0,67.0,65.99999999999999,64.99999999999999,64.0,63.0,62.0,61.0,60.0,59.0,58.00000000000001,57.00000000000001,56.00000000000001,55.00000000000001,54.0,53.0,52.0,51.0,50.0,49.0,48.0,47.0,46.0,44.99999999999999,43.99999999999999,42.99999999999999,42.00000000000001,41.0,40.0,39.0,38.0,37.0,36.0,35.0,34.0,32.99999999999999,31.999999999999996,30.999999999999993,29.999999999999993,29.000000000000004,28.000000000000004,27.0,26.0,25.0,24.0,23.0,21.999999999999996,20.999999999999996,19.999999999999996,18.999999999999993,17.999999999999993,16.999999999999993,16.000000000000004,15.000000000000002,14.000000000000002,13.0,12.0,10.999999999999998,9.999999999999998,8.999999999999996,7.9999999999999964,6.999999999999995,5.999999999999995,4.999999999999993,4.0000000000000036,3.0000000000000027,2.0000000000000018,1.0000000000000009,0.0],\"hovertemplate\":\"Stock: %{text:.0f}%<br>Bond: %{customdata:.0f}%<extra></extra>\",\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"name\":\"Stock & Bond Frontier\",\"text\":[0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.000000000000001,8.0,9.0,10.0,11.0,12.0,13.0,14.000000000000002,15.0,16.0,17.0,18.0,19.0,20.0,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.000000000000004,28.999999999999996,30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,41.0,42.0,43.0,44.0,45.0,46.0,47.0,48.0,49.0,50.0,51.0,52.0,53.0,54.0,55.00000000000001,56.00000000000001,57.00000000000001,57.99999999999999,59.0,60.0,61.0,62.0,63.0,64.0,65.0,66.0,67.0,68.0,69.0,70.0,71.0,72.0,73.0,74.0,75.0,76.0,77.0,78.0,79.0,80.0,81.0,82.0,83.0,84.0,85.0,86.0,87.0,88.0,89.0,90.0,91.0,92.0,93.0,94.0,95.0,96.0,97.0,98.0,99.0,100.0],\"x\":[0.035,0.034607441396324,0.034281190177705326,0.03402315388085002,0.033834893231692045,0.03371757701852254,0.03367194678066594,0.03369829372535055,0.033796449517663835,0.033965791614505324,0.03420526275297414,0.03451340319354207,0.034888393485513196,0.035328104959083215,0.03583015489779524,0.03639196339853072,0.03701080923189873,0.03768388249636706,0.03840833242930497,0.03918130931962331,0.04,0.04086165684354955,0.04176362053270765,0.04270333710613259,0.04367836993295422,0.0446864073292987,0.04572526653831556,0.04679289475978164,0.0478873678541638,0.0490068872710765,0.05014977567247933,0.05131447164299756,0.052499523807364196,0.053703584610340485,0.05492540395845988,0.056163822875584246,0.057417767285048625,0.05868624199929656,0.05996832497243858,0.061263161851148364,0.06256996084384263,0.06388798791635249,0.06521656231357185,0.06655505240024982,0.06790287180966649,0.06925947588597534,0.07062435840416534,0.07199704855061768,0.07337710814688733,0.07476412909945516,0.07615773105863909,0.07755755927051858,0.07896328260653808,0.08037459175635046,0.08179119757039874,0.08321282953968097,0.0846392344010743,0.08607017485749636,0.08750542840304253,0.08894478624405142,0.09038805230781334,0.09183504233134539,0.09328558302331609,0.09473951129280751,0.09619667353916142,0.09765692499766722,0.0991201291363162,0.10058615709927485,0.10205488719311781,0.10352620441221633,0.10500000000000002,0.1064761710431024,0.10795462009566797,0.10943525483133851,0.11091798772065782,0.11240273573183172,0.1138894200529619,0.11537796583403609,0.11686830194710626,0.11836036076322173,0.11985407794480754,0.12134939225228943,0.1228462453638694,0.12434458170744715,0.1258443483037677,0.12734549461995112,0.12884797243263083,0.1303517356999898,0.13185674044204188,0.13336294462855863,0.1348703080740902,0.13637879233957162,0.13788836064004822,0.1393989777580883,0.1409106099624865,0.14242322493189094,0.14393679168301618,0.14545128050312928,0.14696666288651994,0.1484829114746879,0.15],\"y\":[0.035,0.03525,0.0355,0.035750000000000004,0.036,0.03625,0.0365,0.03675,0.037000000000000005,0.03725,0.0375,0.037750000000000006,0.038,0.03825,0.0385,0.03875,0.039,0.03925,0.0395,0.03975,0.04,0.04025,0.0405,0.04075,0.040999999999999995,0.04125,0.0415,0.041749999999999995,0.042,0.042249999999999996,0.0425,0.04275,0.043,0.04324999999999999,0.0435,0.04375,0.044000000000000004,0.04425,0.044500000000000005,0.04475,0.045,0.045250000000000005,0.045500000000000006,0.04575,0.046000000000000006,0.04625,0.04650000000000001,0.04675000000000001,0.047,0.04724999999999999,0.0475,0.04775,0.048,0.04825,0.048499999999999995,0.04875,0.049,0.04925000000000001,0.049499999999999995,0.049749999999999996,0.05,0.05025,0.050499999999999996,0.05075,0.051,0.05125,0.051500000000000004,0.051750000000000004,0.052000000000000005,0.052250000000000005,0.0525,0.052750000000000005,0.053000000000000005,0.05325,0.0535,0.05375,0.054000000000000006,0.05425,0.05449999999999999,0.05474999999999999,0.05500000000000001,0.05525,0.0555,0.05575,0.055999999999999994,0.05625,0.0565,0.056749999999999995,0.057,0.057249999999999995,0.0575,0.057749999999999996,0.05800000000000001,0.05825,0.0585,0.05875,0.059000000000000004,0.059250000000000004,0.059500000000000004,0.05975,0.06],\"type\":\"scatter\"},{\"customdata\":[[[0.13203429462197971],[0.8679657053780202],[0.5166]]],\"hovertemplate\":\"efficient low risk portfolio<br>asset 1: %{customdata[0]:.1%}<br>asset 2: %{customdata[1]:.1%}<br>Sharpe ratio: %{customdata[2]:.4f}<br><extra></extra>\",\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers\",\"name\":\"efficient low risk portfolio\",\"x\":[0.03542526719998681],\"y\":[0.038300857365549494],\"type\":\"scatter\"},{\"hovertemplate\":\"wealth in efficient low risk portfolio = %{text:.0f}%<br>Sharpe ratio: 0.5166<extra></extra>\",\"line\":{\"color\":\"blue\"},\"mode\":\"lines\",\"name\":\"CAL: efficient low risk portfolio\",\"text\":[0.0,0.5,1.0,1.5,2.0,2.5,3.0,3.5000000000000004,4.0,4.5,5.0,5.5,6.0,6.5,7.000000000000001,7.5,8.0,8.5,9.0,9.5,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.000000000000002,14.499999999999998,15.0,15.5,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,25.0,25.5,26.0,26.5,27.0,27.500000000000004,28.000000000000004,28.500000000000004,28.999999999999996,29.5,30.0,30.5,31.0,31.5,32.0,32.5,33.0,33.5,34.0,34.5,35.0,35.5,36.0,36.5,37.0,37.5,38.0,38.5,39.0,39.5,40.0,40.5,41.0,41.5,42.0,42.5,43.0,43.5,44.0,44.5,45.0,45.5,46.0,46.5,47.0,47.5,48.0,48.5,49.0,49.5,50.0,50.5,51.0,51.5,52.0,52.5,53.0,53.5,54.0,54.50000000000001,55.00000000000001,55.50000000000001,56.00000000000001,56.50000000000001,57.00000000000001,57.50000000000001,57.99999999999999,58.5,59.0,59.5,60.0,60.5,61.0,61.5,62.0,62.5,63.0,63.5,64.0,64.5,65.0,65.5,66.0,66.5,67.0,67.5,68.0,68.5,69.0,69.5,70.0,70.5,71.0,71.5,72.0,72.5,73.0,73.5,74.0,74.5,75.0,75.5,76.0,76.5,77.0,77.5,78.0,78.5,79.0,79.5,80.0,80.5,81.0,81.5,82.0,82.5,83.0,83.5,84.0,84.5,85.0,85.5,86.0,86.5,87.0,87.5,88.0,88.5,89.0,89.5,90.0,90.5,91.0,91.5,92.0,92.5,93.0,93.5,94.0,94.5,95.0,95.5,96.0,96.5,97.0,97.5,98.0,98.5,99.0,99.5,100.0],\"x\":[0.0,0.00017712633599993404,0.0003542526719998681,0.0005313790079998021,0.0007085053439997361,0.0008856316799996703,0.0010627580159996042,0.0012398843519995384,0.0014170106879994723,0.0015941370239994062,0.0017712633599993406,0.0019483896959992745,0.0021255160319992084,0.0023026423679991426,0.0024797687039990767,0.0026568950399990104,0.0028340213759989446,0.0030111477119988787,0.0031882740479988124,0.003365400383998747,0.003542526719998681,0.003719653055998615,0.003896779391998549,0.004073905727998483,0.004251032063998417,0.004428158399998351,0.004605284735998285,0.004782411071998219,0.0049595374079981535,0.005136663743998087,0.005313790079998021,0.005490916415997955,0.005668042751997889,0.005845169087997823,0.0060222954239977575,0.006199421759997692,0.006376548095997625,0.006553674431997559,0.006730800767997494,0.006907927103997428,0.007085053439997362,0.0072621797759972965,0.00743930611199723,0.007616432447997164,0.007793558783997098,0.007970685119997031,0.008147811455996965,0.0083249377919969,0.008502064127996834,0.008679190463996768,0.008856316799996702,0.009033443135996636,0.00921056947199657,0.009387695807996504,0.009564822143996439,0.009741948479996373,0.009919074815996307,0.010096201151996241,0.010273327487996173,0.010450453823996108,0.010627580159996042,0.010804706495995976,0.01098183283199591,0.011158959167995844,0.011336085503995778,0.011513211839995713,0.011690338175995647,0.01186746451199558,0.012044590847995515,0.012221717183995449,0.012398843519995383,0.012575969855995316,0.01275309619199525,0.012930222527995184,0.013107348863995118,0.013284475199995052,0.013461601535994988,0.013638727871994922,0.013815854207994856,0.01399298054399479,0.014170106879994725,0.014347233215994659,0.014524359551994593,0.014701485887994527,0.01487861222399446,0.015055738559994394,0.015232864895994328,0.015409991231994262,0.015587117567994196,0.01576424390399413,0.015941370239994063,0.016118496575994,0.01629562291199393,0.016472749247993867,0.0166498755839938,0.016827001919993735,0.017004128255993668,0.0171812545919936,0.017358380927993536,0.017535507263993468,0.017712633599993404,0.01788975993599334,0.018066886271993272,0.01824401260799321,0.01842113894399314,0.018598265279993077,0.01877539161599301,0.018952517951992945,0.019129644287992877,0.019306770623992813,0.019483896959992746,0.01966102329599268,0.019838149631992614,0.02001527596799255,0.020192402303992482,0.020369528639992418,0.020546654975992347,0.020723781311992283,0.020900907647992215,0.02107803398399215,0.021255160319992084,0.02143228665599202,0.021609412991991952,0.021786539327991888,0.02196366566399182,0.022140791999991756,0.02231791833599169,0.022495044671991624,0.022672171007991557,0.022849297343991493,0.023026423679991425,0.02320355001599136,0.023380676351991293,0.02355780268799123,0.02373492902399116,0.023912055359991097,0.02408918169599103,0.024266308031990966,0.024443434367990898,0.024620560703990834,0.024797687039990766,0.0249748133759907,0.02515193971199063,0.025329066047990567,0.0255061923839905,0.025683318719990435,0.025860445055990368,0.026037571391990304,0.026214697727990236,0.026391824063990172,0.026568950399990104,0.02674607673599004,0.026923203071989976,0.02710032940798991,0.027277455743989844,0.027454582079989777,0.027631708415989713,0.027808834751989645,0.02798596108798958,0.028163087423989513,0.02834021375998945,0.028517340095989382,0.028694466431989318,0.02887159276798925,0.029048719103989186,0.02922584543998912,0.029402971775989054,0.029580098111988983,0.02975722444798892,0.02993435078398885,0.030111477119988787,0.03028860345598872,0.030465729791988656,0.030642856127988588,0.030819982463988524,0.030997108799988456,0.031174235135988392,0.031351361471988325,0.03152848780798826,0.031705614143988196,0.031882740479988125,0.03205986681598806,0.032236993151988,0.03241411948798793,0.03259124582398786,0.0327683721599878,0.032945498495987734,0.03312262483198767,0.0332997511679876,0.033476877503987534,0.03365400383998747,0.033831130175987406,0.034008256511987335,0.03418538284798727,0.0343625091839872,0.034539635519987136,0.03471676185598707,0.03489388819198701,0.035071014527986936,0.03524814086398687,0.03542526719998681],\"y\":[0.02,0.02009150428682775,0.020183008573655497,0.02027451286048324,0.02036601714731099,0.020457521434138738,0.020549025720966486,0.02064053000779423,0.02073203429462198,0.020823538581449728,0.020915042868277476,0.02100654715510522,0.02109805144193297,0.021189555728760717,0.021281060015588465,0.021372564302416214,0.02146406858924396,0.021555572876071707,0.021647077162899455,0.021738581449727203,0.021830085736554948,0.021921590023382696,0.022013094310210445,0.022104598597038193,0.02219610288386594,0.022287607170693686,0.022379111457521434,0.022470615744349182,0.02256212003117693,0.022653624318004675,0.022745128604832424,0.022836632891660172,0.02292813717848792,0.02301964146531567,0.023111145752143413,0.02320265003897116,0.02329415432579891,0.023385658612626658,0.023477162899454403,0.02356866718628215,0.0236601714731099,0.023751675759937647,0.023843180046765396,0.02393468433359314,0.02402618862042089,0.024117692907248637,0.024209197194076385,0.02430070148090413,0.024392205767731878,0.024483710054559626,0.024575214341387375,0.024666718628215123,0.024758222915042868,0.024849727201870616,0.024941231488698364,0.025032735775526112,0.025124240062353857,0.025215744349181606,0.025307248636009354,0.025398752922837102,0.02549025720966485,0.025581761496492595,0.025673265783320343,0.02576477007014809,0.02585627435697584,0.025947778643803585,0.026039282930631333,0.02613078721745908,0.02622229150428683,0.026313795791114578,0.026405300077942326,0.02649680436477007,0.02658830865159782,0.026679812938425564,0.026771317225253312,0.02686282151208106,0.02695432579890881,0.027045830085736557,0.027137334372564305,0.02722883865939205,0.027320342946219798,0.027411847233047546,0.027503351519875294,0.02759485580670304,0.027686360093530787,0.027777864380358536,0.027869368667186284,0.027960872954014032,0.028052377240841777,0.028143881527669525,0.028235385814497273,0.028326890101325018,0.028418394388152766,0.028509898674980515,0.028601402961808263,0.02869290724863601,0.02878441153546376,0.028875915822291504,0.028967420109119252,0.029058924395946997,0.029150428682774746,0.029241932969602494,0.029333437256430242,0.02942494154325799,0.02951644583008574,0.029607950116913487,0.029699454403741235,0.02979095869056898,0.029882462977396728,0.029973967264224473,0.03006547155105222,0.03015697583787997,0.030248480124707718,0.030339984411535466,0.030431488698363214,0.030522992985190962,0.030614497272018704,0.030706001558846452,0.0307975058456742,0.03088901013250195,0.030980514419329697,0.031072018706157445,0.031163522992985193,0.03125502727981294,0.03134653156664069,0.03143803585346844,0.03152954014029618,0.03162104442712393,0.031712548713951676,0.031804053000779424,0.03189555728760717,0.03198706157443492,0.03207856586126267,0.03217007014809042,0.03226157443491816,0.032353078721745906,0.032444583008573655,0.0325360872954014,0.03262759158222915,0.0327190958690569,0.03281060015588465,0.032902104442712396,0.032993608729540144,0.033085113016367886,0.033176617303195634,0.03326812159002338,0.03335962587685113,0.03345113016367888,0.03354263445050663,0.033634138737334375,0.033725643024162116,0.033817147310989865,0.03390865159781761,0.03400015588464536,0.03409166017147311,0.03418316445830086,0.034274668745128606,0.034366173031956354,0.0344576773187841,0.03454918160561185,0.0346406858924396,0.03473219017926735,0.034823694466095095,0.03491519875292284,0.035006703039750585,0.03509820732657833,0.03518971161340608,0.03528121590023382,0.03537272018706157,0.03546422447388932,0.03555572876071707,0.035647233047544816,0.035738737334372564,0.03583024162120031,0.03592174590802806,0.03601325019485581,0.03610475448168356,0.036196258768511305,0.03628776305533905,0.0363792673421668,0.03647077162899455,0.03656227591582229,0.03665378020265004,0.03674528448947779,0.036836788776305536,0.036928293063133284,0.037019797349961026,0.037111301636788774,0.03720280592361652,0.03729431021044427,0.03738581449727202,0.03747731878409977,0.037568823070927515,0.03766032735775526,0.03775183164458301,0.03784333593141076,0.03793484021823851,0.038026344505066256,0.038117848791894,0.038209353078721746,0.038300857365549494],\"type\":\"scatter\"},{\"customdata\":[[[0.3511182108626197],[0.6488817891373803],[0.2003]]],\"hovertemplate\":\"efficient high mean portfolio<br>asset 1: %{customdata[0]:.1%}<br>asset 2: %{customdata[1]:.1%}<br>Sharpe ratio (relative to borrowing rate): %{customdata[2]:.4f}<br><extra></extra>\",\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers\",\"name\":\"efficient high mean portfolio\",\"x\":[0.05630328830688629],\"y\":[0.043777955271565486],\"type\":\"scatter\"},{\"hovertemplate\":\"wealth in efficient high mean portfolio = %{text:.0f}%<br>Sharpe ratio (relative to borrowing rate): 0.2003<extra></extra>\",\"line\":{\"color\":\"blue\"},\"mode\":\"lines\",\"name\":\"CAL: efficient high mean\",\"text\":[100.0,101.49999999999999,103.0,104.5,106.0,107.5,109.00000000000001,110.5,112.00000000000001,113.5,114.99999999999999,116.5,118.0,119.5,121.0,122.50000000000001,124.0,125.49999999999999,127.0,128.5,130.0,131.5,133.0,134.5,136.0,137.5,139.0,140.5,142.0,143.5,145.0,146.5,148.0,149.5,151.0,152.5,154.0,155.5,156.99999999999997,158.5,160.0,161.5,163.0,164.5,166.0,167.49999999999997,169.0,170.5,172.0,173.5,175.0,176.5,178.0,179.5,181.0,182.5,184.0,185.5,187.0,188.5,190.0,191.5,193.0,194.49999999999997,196.0,197.5,199.0,200.5,202.0,203.5,204.99999999999997,206.5,208.0,209.49999999999997,211.0,212.5,213.99999999999997,215.50000000000003,217.0,218.5,220.00000000000003,221.5,223.0,224.5,225.99999999999997,227.5,229.0,230.49999999999997,231.99999999999997,233.5,234.99999999999997,236.50000000000003,238.0,239.5,241.0,242.49999999999997,244.0,245.5,246.99999999999997,248.5,250.0,251.49999999999997,253.00000000000003,254.5,256.0,257.5,259.0,260.5,262.0,263.5,265.0,266.5,268.0,269.5,271.0,272.49999999999994,274.0,275.5,277.0,278.5,280.0,281.5,283.0,284.5,286.0,287.5,288.99999999999994,290.5,292.0,293.49999999999994,295.0,296.5,298.0,299.5,301.0,302.5,304.0,305.5,307.0,308.5,310.0,311.5,313.0,314.5,316.0,317.5,319.0,320.5,322.0,323.5,325.0,326.5,328.0,329.5,331.0,332.5,334.0,335.5,337.0,338.5,340.0,341.5,343.0,344.5,346.0,347.5,349.0,350.5,352.0,353.49999999999994,355.0,356.5,358.0,359.5,361.0,362.5,363.99999999999994,365.5,367.0,368.5,370.0,371.5,373.0,374.5,376.0,377.5,379.0,380.5,382.0,383.5,385.0,386.5,388.0,389.5,390.99999999999994,392.5,394.0,395.5,397.0,398.5,400.0],\"x\":[0.05630328830688629,0.057147837631489576,0.05799238695609288,0.05883693628069617,0.05968148560529947,0.06052603492990276,0.06137058425450606,0.06221513357910935,0.06305968290371265,0.06390423222831594,0.06474878155291923,0.06559333087752253,0.06643788020212582,0.06728242952672912,0.06812697885133241,0.0689715281759357,0.06981607750053899,0.07066062682514228,0.07150517614974558,0.07234972547434887,0.07319427479895217,0.07403882412355546,0.07488337344815876,0.07572792277276205,0.07657247209736534,0.07741702142196864,0.07826157074657195,0.07910612007117523,0.07995066939577852,0.08079521872038183,0.08163976804498511,0.0824843173695884,0.0833288666941917,0.08417341601879501,0.0850179653433983,0.08586251466800159,0.08670706399260489,0.08755161331720818,0.08839616264181147,0.08924071196641477,0.09008526129101807,0.09092981061562136,0.09177435994022465,0.09261890926482794,0.09346345858943123,0.09430800791403453,0.09515255723863782,0.09599710656324112,0.09684165588784441,0.0976862052124477,0.098530754537051,0.0993753038616543,0.10021985318625759,0.10106440251086088,0.10190895183546418,0.10275350116006747,0.10359805048467076,0.10444259980927406,0.10528714913387736,0.10613169845848065,0.10697624778308394,0.10782079710768724,0.10866534643229053,0.10950989575689382,0.11035444508149712,0.11119899440610043,0.11204354373070372,0.112888093055307,0.1137326423799103,0.11457719170451361,0.11542174102911688,0.11626629035372019,0.11711083967832348,0.11795538900292676,0.11879993832753005,0.11964448765213336,0.12048903697673663,0.12133358630133996,0.12217813562594323,0.12302268495054654,0.12386723427514984,0.12471178359975311,0.12555633292435642,0.12640088224895973,0.127245431573563,0.1280899808981663,0.1289345302227696,0.1297790795473729,0.13062362887197618,0.13146817819657947,0.13231272752118275,0.13315727684578607,0.13400182617038936,0.13484637549499265,0.13569092481959596,0.13653547414419923,0.13738002346880254,0.13822457279340583,0.13906912211800912,0.1399136714426124,0.14075822076721572,0.14160277009181899,0.14244731941642233,0.1432918687410256,0.1441364180656289,0.1449809673902322,0.14582551671483548,0.14667006603943877,0.1475146153640421,0.14835916468864535,0.14920371401324867,0.15004826333785196,0.15089281266245524,0.15173736198705853,0.15258191131166185,0.1534264606362651,0.15427100996086843,0.15511555928547172,0.155960108610075,0.15680465793467832,0.15764920725928158,0.1584937565838849,0.1593383059084882,0.16018285523309148,0.16102740455769476,0.16187195388229808,0.16271650320690134,0.16356105253150469,0.16440560185610795,0.16525015118071124,0.16609470050531455,0.16693924982991784,0.16778379915452113,0.16862834847912445,0.1694728978037277,0.17031744712833102,0.1711619964529343,0.1720065457775376,0.1728510951021409,0.1736956444267442,0.1745401937513475,0.17538474307595078,0.17622929240055407,0.17707384172515736,0.17791839104976068,0.17876294037436397,0.17960748969896725,0.18045203902357054,0.18129658834817383,0.18214113767277712,0.18298568699738044,0.18383023632198373,0.18467478564658701,0.1855193349711903,0.18636388429579362,0.18720843362039688,0.1880529829450002,0.18889753226960349,0.1897420815942068,0.19058663091881006,0.19143118024341338,0.19227572956801667,0.19312027889261996,0.19396482821722325,0.19480937754182656,0.19565392686642985,0.19649847619103314,0.19734302551563643,0.19818757484023974,0.199032124164843,0.19987667348944632,0.2007212228140496,0.2015657721386529,0.2024103214632562,0.20325487078785948,0.2040994201124628,0.20494396943706605,0.20578851876166937,0.20663306808627266,0.20747761741087598,0.20832216673547924,0.20916671606008255,0.21001126538468584,0.21085581470928916,0.21170036403389242,0.21254491335849574,0.21338946268309902,0.2142340120077023,0.2150785613323056,0.21592311065690892,0.2167676599815122,0.2176122093061155,0.21845675863071878,0.2193013079553221,0.22014585727992536,0.22099040660452868,0.22183495592913197,0.22267950525373528,0.22352405457833854,0.22436860390294186,0.22521315322754515],\"y\":[0.043777955271565486,0.043947124600638966,0.04411629392971245,0.044285463258785934,0.044454632587859415,0.044623801916932895,0.04479297124600638,0.04496214057507986,0.045131309904153344,0.045300479233226824,0.045469648562300305,0.04563881789137379,0.04580798722044727,0.045977156549520753,0.04614632587859424,0.04631549520766772,0.0464846645367412,0.04665383386581468,0.04682300319488816,0.04699217252396165,0.04716134185303513,0.04733051118210861,0.0474996805111821,0.04766884984025558,0.04783801916932906,0.04800718849840254,0.04817635782747602,0.04834552715654951,0.04851469648562299,0.04868386581469647,0.04885303514376996,0.04902220447284343,0.04919137380191692,0.049360543130990406,0.04952971246006388,0.04969888178913737,0.04986805111821085,0.05003722044728433,0.05020638977635781,0.05037555910543129,0.050544728434504776,0.05071389776357826,0.05088306709265174,0.051052236421725225,0.051221405750798706,0.051390575079872186,0.051559744408945674,0.051728913738019154,0.051898083067092635,0.052067252396166115,0.052236421725239596,0.05240559105431308,0.052574760383386564,0.052743929712460044,0.05291309904153353,0.053082268370607005,0.05325143769968049,0.05342060702875397,0.053589776357827454,0.05375894568690094,0.05392811501597442,0.0540972843450479,0.05426645367412139,0.05443562300319486,0.05460479233226835,0.05477396166134184,0.05494313099041531,0.0551123003194888,0.05528146964856228,0.05545063897763576,0.05561980830670924,0.05578897763578272,0.05595814696485621,0.05612731629392969,0.05629648562300317,0.05646565495207666,0.05663482428115013,0.05680399361022362,0.056973162939297106,0.05714233226837059,0.05731150159744407,0.05748067092651755,0.05764984025559103,0.057819009584664516,0.05798817891373799,0.05815734824281148,0.058326517571884964,0.05849568690095844,0.058664856230031925,0.058834025559105406,0.059003194888178886,0.059172364217252374,0.059341533546325854,0.059510702875399335,0.05967987220447282,0.059849041533546296,0.060018210862619784,0.06018738019169327,0.060356549520766745,0.06052571884984023,0.06069488817891371,0.06086405750798719,0.06103322683706068,0.061202396166134154,0.06137156549520764,0.06154073482428113,0.0617099041533546,0.06187907348242809,0.06204824281150157,0.06221741214057505,0.06238658146964854,0.06255575079872203,0.0627249201277955,0.06289408945686897,0.06306325878594246,0.06323242811501595,0.06340159744408944,0.06357076677316291,0.0637399361022364,0.06390910543130987,0.06407827476038336,0.06424744408945685,0.06441661341853033,0.06458578274760379,0.06475495207667728,0.06492412140575077,0.06509329073482426,0.06526246006389774,0.06543162939297122,0.06560079872204469,0.06576996805111818,0.06593913738019166,0.06610830670926515,0.06627747603833863,0.0664466453674121,0.06661581469648559,0.06678498402555907,0.06695415335463256,0.06712332268370604,0.06729249201277952,0.067461661341853,0.06763083067092648,0.06779999999999997,0.06796916932907346,0.06813833865814693,0.0683075079872204,0.0684766773162939,0.06864584664536738,0.06881501597444087,0.06898418530351434,0.06915335463258783,0.0693225239616613,0.06949169329073479,0.06966086261980828,0.06983003194888177,0.06999920127795523,0.07016837060702871,0.0703375399361022,0.07050670926517569,0.07067587859424916,0.07084504792332265,0.07101421725239612,0.07118338658146961,0.0713525559105431,0.07152172523961658,0.07169089456869006,0.07186006389776353,0.07202923322683702,0.0721984025559105,0.072367571884984,0.07253674121405747,0.07270591054313096,0.07287507987220443,0.07304424920127792,0.0732134185303514,0.07338258785942489,0.07355175718849835,0.07372092651757184,0.07389009584664533,0.07405926517571881,0.0742284345047923,0.07439760383386577,0.07456677316293925,0.07473594249201274,0.07490511182108622,0.07507428115015971,0.0752434504792332,0.07541261980830666,0.07558178913738015,0.07575095846645363,0.07592012779552712,0.0760892971246006,0.07625846645367408,0.07642763578274755,0.07659680511182104,0.07676597444089453,0.07693514376996802,0.07710431309904149,0.07727348242811496,0.07744265175718845,0.07761182108626194],\"type\":\"scatter\"},{\"hovertemplate\":\"indifference curve for <br> optimal utility for risk aversion of 2<extra></extra>\",\"line\":{\"color\":\"purple\",\"dash\":\"dot\"},\"mode\":\"lines\",\"name\":\"Risk Aversion=2\",\"x\":[0.0,0.002121212121212121,0.004242424242424242,0.006363636363636363,0.008484848484848484,0.010606060606060605,0.012727272727272726,0.014848484848484847,0.016969696969696968,0.01909090909090909,0.02121212121212121,0.023333333333333334,0.025454545454545452,0.027575757575757573,0.029696969696969694,0.031818181818181815,0.033939393939393936,0.03606060606060606,0.03818181818181818,0.040303030303030306,0.04242424242424242,0.04454545454545454,0.04666666666666667,0.04878787878787878,0.050909090909090904,0.05303030303030303,0.055151515151515146,0.05727272727272727,0.05939393939393939,0.06151515151515151,0.06363636363636363,0.06575757575757575,0.06787878787878787,0.06999999999999999,0.07212121212121211,0.07424242424242423,0.07636363636363636,0.07848484848484848,0.08060606060606061,0.08272727272727272,0.08484848484848484,0.08696969696969696,0.08909090909090908,0.0912121212121212,0.09333333333333334,0.09545454545454544,0.09757575757575757,0.09969696969696969,0.10181818181818181,0.10393939393939393,0.10606060606060606,0.10818181818181817,0.11030303030303029,0.11242424242424241,0.11454545454545453,0.11666666666666664,0.11878787878787878,0.1209090909090909,0.12303030303030302,0.12515151515151512,0.12727272727272726,0.12939393939393937,0.1315151515151515,0.13363636363636364,0.13575757575757574,0.13787878787878785,0.13999999999999999,0.14212121212121212,0.14424242424242423,0.14636363636363636,0.14848484848484847,0.1506060606060606,0.1527272727272727,0.15484848484848485,0.15696969696969695,0.1590909090909091,0.16121212121212122,0.1633333333333333,0.16545454545454544,0.16757575757575754,0.16969696969696968,0.1718181818181818,0.17393939393939392,0.17606060606060606,0.17818181818181816,0.1803030303030303,0.1824242424242424,0.18454545454545454,0.18666666666666668,0.18878787878787875,0.1909090909090909,0.193030303030303,0.19515151515151513,0.19727272727272724,0.19939393939393937,0.2015151515151515,0.20363636363636362,0.20575757575757575,0.20787878787878786,0.21],\"y\":[0.042530745798737196,0.042535245339600375,0.042548743962189904,0.04257124166650579,0.042602738452548035,0.04264323432031663,0.042692729269811575,0.04275122330103288,0.04281871641398054,0.042895208608654554,0.042980699885054915,0.04307519024318164,0.04317867968303472,0.04329116820461415,0.043412655807919934,0.043543142492952075,0.04368262825971057,0.043831113108195416,0.043988597038406616,0.04415508005034417,0.04433056214400809,0.04451504331939835,0.044708523576514975,0.04491100291535795,0.04512248133592728,0.045342958838222966,0.045572435422245,0.04581091108799339,0.04605838583546814,0.04631485966466924,0.0465803325755967,0.04685480456825051,0.04713827564263068,0.0474307457987372,0.04773221503657007,0.048042683356129295,0.04836215075741488,0.048690617240426816,0.049028082805165116,0.04937454745162976,0.04973001117982076,0.05009447398973811,0.05046793588138182,0.050850396854751886,0.05124185690984831,0.05164231604667108,0.0520517742652202,0.052470231565495684,0.052897687947497524,0.053334143411225714,0.05377959795668026,0.05423405158386116,0.054697504292768415,0.05516995608340203,0.055651406955761984,0.0561418569098483,0.056641305945660976,0.057149754063200005,0.057667201262465384,0.058193647543457114,0.05872909290617521,0.059273537350619646,0.05982698087679045,0.06038942348468761,0.06096086517431111,0.06154130594566097,0.06213074579873719,0.06272918473353976,0.06333662275006868,0.06395305984832397,0.06457849602830561,0.0652129312900136,0.06585636563344793,0.06650879905860864,0.06717023156549569,0.0678406631541091,0.06852009382444886,0.06920852357651497,0.06990595241030743,0.07061238032582626,0.07132780732307144,0.07205223340204298,0.07278565856274086,0.07352808280516511,0.07427950612931569,0.07503992853519266,0.07580935002279596,0.07658777059212563,0.07737519024318165,0.07817160897596401,0.07897702679047272,0.07979144368670779,0.08061485966466923,0.08144727472435702,0.08228868886577116,0.08313910208891166,0.0839985143937785,0.08486692578037172,0.08574433624869127,0.0866307457987372],\"type\":\"scatter\"},{\"hovertemplate\":\"indifference curve for <br> optimal utility for risk aversion of 5<extra></extra>\",\"line\":{\"color\":\"purple\"},\"mode\":\"lines\",\"name\":\"Risk Aversion=5\",\"x\":[0.0,0.002121212121212121,0.004242424242424242,0.006363636363636363,0.008484848484848484,0.010606060606060605,0.012727272727272726,0.014848484848484847,0.016969696969696968,0.01909090909090909,0.02121212121212121,0.023333333333333334,0.025454545454545452,0.027575757575757573,0.029696969696969694,0.031818181818181815,0.033939393939393936,0.03606060606060606,0.03818181818181818,0.040303030303030306,0.04242424242424242,0.04454545454545454,0.04666666666666667,0.04878787878787878,0.050909090909090904,0.05303030303030303,0.055151515151515146,0.05727272727272727,0.05939393939393939,0.06151515151515151,0.06363636363636363,0.06575757575757575,0.06787878787878787,0.06999999999999999,0.07212121212121211,0.07424242424242423,0.07636363636363636,0.07848484848484848,0.08060606060606061,0.08272727272727272,0.08484848484848484,0.08696969696969696,0.08909090909090908,0.0912121212121212,0.09333333333333334,0.09545454545454544,0.09757575757575757,0.09969696969696969,0.10181818181818181,0.10393939393939393,0.10606060606060606,0.10818181818181817,0.11030303030303029,0.11242424242424241,0.11454545454545453,0.11666666666666664,0.11878787878787878,0.1209090909090909,0.12303030303030302,0.12515151515151512,0.12727272727272726,0.12939393939393937,0.1315151515151515,0.13363636363636364,0.13575757575757574,0.13787878787878785,0.13999999999999999,0.14212121212121212,0.14424242424242423,0.14636363636363636,0.14848484848484847,0.1506060606060606,0.1527272727272727,0.15484848484848485,0.15696969696969695,0.1590909090909091,0.16121212121212122,0.1633333333333333,0.16545454545454544,0.16757575757575754,0.16969696969696968,0.1718181818181818,0.17393939393939392,0.17606060606060606,0.17818181818181816,0.1803030303030303,0.1824242424242424,0.18454545454545454,0.18666666666666668,0.18878787878787875,0.1909090909090909,0.193030303030303,0.19515151515151513,0.19727272727272724,0.19939393939393937,0.2015151515151515,0.20363636363636362,0.20575757575757575,0.20787878787878786,0.21],\"y\":[0.03627643363402062,0.03628768248617856,0.03632142904265239,0.036377673303442104,0.036456415268547704,0.0365576549379692,0.03668139231170657,0.03682762738975983,0.03699636017212898,0.037187590658814,0.03740131884981492,0.03763754474513173,0.03789626834476442,0.038177489648712995,0.03848120865697746,0.03880742536955781,0.03915613978645404,0.03952735190766617,0.03992106173319417,0.040337269263038066,0.040775974497197845,0.04123717743567351,0.041720878078465064,0.042227076425572496,0.04275577247699582,0.043306966232735035,0.04388065769279013,0.04447684685716111,0.04509553372584798,0.04573671829885073,0.04640040057616937,0.0470865805578039,0.047795258243754316,0.048526433634020615,0.0492801067286028,0.05005627752750087,0.05085494603071483,0.05167611223824467,0.05251977615009041,0.053385937766252015,0.05427459708672952,0.055185754111522906,0.056119408840632184,0.05707556127405734,0.058054211411798395,0.05905535925385533,0.06007900480022814,0.061125148050916844,0.06219378900592144,0.06328492766524191,0.06439856402887828,0.06553469809683053,0.06669332986909866,0.06787445934568269,0.0690780865265826,0.07030421141179838,0.07155283400133006,0.07282395429517763,0.0741175722933411,0.07543368799582043,0.07677230140261565,0.07813341251372674,0.07951702132915375,0.08092312784889666,0.0823517320729554,0.08380283400133005,0.0852764336340206,0.08677253097102705,0.08829112601234934,0.08983221875798755,0.09139580920794163,0.09298189736221162,0.09459048322079747,0.09622156678369923,0.09787514805091685,0.09955122702245037,0.10124980369829978,0.10297087807846503,0.10471445016294623,0.10648051995174326,0.10826908744485622,0.11008015264228505,0.11191371554402979,0.1137697761500904,0.11564833446046688,0.11754939047515928,0.11947294419416751,0.1214189956174917,0.12338754474513175,0.12537859157708764,0.12739213611335945,0.12942817835394713,0.1314867182988507,0.13356775594807016,0.13567129130160552,0.13779732435945677,0.1399458551216239,0.14211688358810692,0.1443104097589058,0.1465264336340206],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"title\":{\"text\":\"Standard Deviation\"},\"range\":[0,0.1875],\"tickformat\":\".0%\"},\"yaxis\":{\"title\":{\"text\":\"Expected Return\"},\"range\":[0,0.075],\"tickformat\":\".0%\"},\"legend\":{\"yanchor\":\"top\",\"y\":0.55,\"xanchor\":\"left\",\"x\":0.6}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('5f584a88-72e8-452a-89c6-104aaad45cc0');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPreferences and Efficient Portfolios\n:::\n:::\n\n\n@fig-diffsaveborrow-cal-allocation-by-riskaversion plots the allocation to risky assets as a function of risk aversion. Investors with very low levels of risk aversion will hold levered portfolios in the efficient high mean portfolio, and investors with very high levels of risk aversion will hold save some capital at the risk-free rate and the remainder in the efficient low risk portfolio.  Investors with intermediate risk aversion will invest 100% of their capital in risky assets, but at different locations along the risky-asset efficient frontier (see hover data in @fig-diffsaveborrow-cal-allocation-by-riskaversion).  These portfolios can be written as a combination of the efficient low risk portfolio and the efficient high mean portfolio (@eq-frontier-optimal).  A larger fraction is invested in the efficient high mean portfolio with lower risk aversion.  \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\n\nmn_stock = 6\nmn_bond  = 3.5\nsd_stock = 15\nsd_bond  = 3.5\ncorr = -5\n\nrs = 2\nextra = 1.25\n\nraver1 = 2\nraver2 = 5\n\ndef data(mn1, mn2, sd1, sd2, c, rs, extra):\n    c = c / 100\n    rb = rs + extra   \n    rs = rs/100\n    rb = rb/100\n    mns = [mn1, mn2]\n    sds = [sd1, sd2]\n    grid = np.linspace(-0.2, 1, 201)\n    ports = [np.array([w, 1 - w]) for w in grid]\n    means = [p.T @ np.array(mns) for p in ports]\n    df = pd.DataFrame(means)\n    df.columns = [\"mean\"]\n    cov = np.array(\n        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]\n    ).reshape(2, 2)\n    df[\"stdev\"] = [np.sqrt(p.T @ cov @ p) for p in ports]\n    df[\"wt1\"] = grid\n    df[\"wt2\"] = 1 - df.wt1\n    for col in [\"mean\", \"stdev\"]:\n        df[col] = df[col] / 100\n    df[\"sr_s\"]= (df[\"mean\"] - rs)/df[\"stdev\"]\n    df[\"sr_b\"]= (df[\"mean\"] - rb)/df[\"stdev\"]\n   \n    return df\n\ndef rf_plus_risky(mn, sd, rs, rb, w_min, w_max):\n    mn /= 100\n    sd /= 100\n    rs /= 100\n    rb /= 100\n    grid = np.linspace(w_min, w_max, 201)\n    mns = [(rs + w * (mn - rs) if w <= 1 else rb + w * (mn - rb)) for w in grid]\n    sds = [w * sd for w in grid]\n    srs = (mn - rs)/sd\n    srb = (mn - rb)/sd\n    return grid, mns, sds, srs, srb\n\ndef opt_utility(mns, cov, Shorts, s, b, A):\n    # P is a portfolio object based on expected returns, covariance matrix, and shorts\n    P = portfolio(mns, cov, Shorts) \n    gmv = P.GMV @ mns\n    if s==b:\n        #tangency exp ret and sd\n        if (s < gmv) or (not Shorts):\n            portTang = P.tangency(s)\n            mnTang = portTang @ mns\n            if mnTang < np.max(mns):\n                sdTang = np.sqrt(portTang @ cov @ portTang)\n\n                #optimal weight in tangency based on risk-aversion\n                wgt = (mnTang - s) / (A * (sdTang**2))\n                expret= wgt*mnTang + (1-wgt)*s\n                sdret = wgt*sdTang \n                wgt_rf = 1-wgt\n                wgt_lo = wgt\n                wgt_hi = 0.0\n    else:\n        #efficient low-risk portfolio\n        if (s < gmv) or (not Shorts):\n            portTangLowRisk = P.tangency(s)\n            mnTangLowRisk = portTangLowRisk @ mns\n            if mnTangLowRisk < np.max(mns):\n                sdTangLowRisk = np.sqrt(portTangLowRisk @ cov @ portTangLowRisk)\n\n        #efficient high-risk portfolio\n        if ((b<gmv) or (not Shorts)):\n            portTangHighRisk = P.tangency(b)\n            mnTangHighRisk = portTangHighRisk @ mns\n            if mnTangHighRisk < np.max(mns):\n                sdTangHighRisk = np.sqrt(portTangHighRisk @ cov @ portTangHighRisk)\n\n        #1st: efficient low risk CAL\n        wgt = (mnTangLowRisk - s) / (A * (sdTangLowRisk**2))\n        expret= wgt*mnTangLowRisk + (1-wgt)*s\n        sdret = wgt*sdTangLowRisk \n        wgt_rf = 1-wgt\n        wgt_lo = wgt\n        wgt_hi = 0.0\n        # print('Weight low risk CAL: ', wgt)\n        if wgt > 1.0:\n            #2nd: efficient high risk CAL\n            wgt = (mnTangHighRisk - b) / (A * (sdTangHighRisk**2))\n            expret= wgt*mnTangHighRisk + (1-wgt)*b\n            sdret = wgt*sdTangHighRisk \n            wgt_rf = 1-wgt\n            wgt_lo = 0.0\n            wgt_hi = wgt\n            # print('Weight high risk CAL: ', wgt)\n            if wgt < 1.0:\n                #3rd: risky asset frontier\n                wgt = 1 #This is should be interpreted as total weight in risky assets.\n                # Method 1: solve analytically for utility-maximizing mix of efficient low and high risk portfolios\n                cov_hilo = portTangLowRisk.T @cov @ portTangHighRisk\n                wgt_lo = (mnTangLowRisk - mnTangHighRisk - A *(cov_hilo  - sdTangHighRisk**2))/(A*(sdTangLowRisk**2 + sdTangHighRisk**2 - 2*cov_hilo))\n                expret = wgt_lo*mnTangLowRisk + (1-wgt_lo)* mnTangHighRisk\n                sdret = np.sqrt((wgt_lo**2) *sdTangLowRisk**2 + ((1-wgt_lo)**2) * sdTangHighRisk**2 + 2*wgt_lo*(1-wgt_lo)*portTangLowRisk.T @cov @ portTangHighRisk)\n                wgt_hi = 1-wgt_lo\n                wgt_rf = 0.0\n\n                # #Method 2: calculate frontier manually and choose max utility\n                # eret_grid = np.linspace(mnTangLowRisk, mnTangHighRisk, 100)\n                # df = pd.DataFrame(dtype='float', columns=['mn','sd','u'],index=np.arange(0,100))\n                # for i,m in enumerate(eret_grid):\n                #     portFrontier = P.frontier(m)\n                #     df.loc[i,'mn'] = portFrontier @ mns\n                #     df.loc[i,'sd'] = np.sqrt(portFrontier @ cov @ portFrontier)\n                # df['u']  = df['mn'] - 0.5*A* df['sd']**2\n                # opt_mn = df.loc[df['u'].idxmax(),'mn']\n                # portFrontier = P.frontier(opt_mn)\n                # expret = portFrontier @ mns\n                # sdret  = np.sqrt(portFrontier @ cov @ portFrontier)\n                # print('Weight frontier: ', wgt)\n\n    u = expret - 0.5*A*sdret**2\n    return u, wgt, wgt_rf, wgt_lo, wgt_hi\n\n\n\ndef figtbl(mn1, mn2, sd1, sd2, c, rs, extra, raver1, raver2, asset1_name, asset2_name):\n    df = data(mn1, mn2, sd1, sd2, c, rs, extra)\n    \n    #Plot the portfolios of the two assets\n    trace1 = go.Scatter(\n        x=df[\"stdev\"],\n        y=df[\"mean\"],\n        mode=\"lines\",\n        # line={'color': green},\n        text=100 * df[\"wt1\"],\n        customdata=100 * df[\"wt2\"],\n        hovertemplate=asset1_name+\": %{text:.0f}%<br>\"+asset2_name+\": %{customdata:.0f}%<extra></extra>\",\n        line=dict(color=\"black\"),\n        name=\"Stock & Bond Frontier\"\n    )\n    \n    # Plot the two assets\n    df = df[df.wt1.isin([0, 1])]\n    df[\"text\"] = np.where(df.wt1 == 1, asset1_name, asset2_name)\n    trace2a = go.Scatter(\n        x=df[df.wt1==1][\"stdev\"],\n        y=df[df.wt1==1][\"mean\"],\n        mode=\"markers\",\n        text=df[df.wt1==1][\"text\"],\n        hovertemplate=\"%{text}<extra></extra>\",\n        marker=dict(size=10, color=\"orange\"),\n        name=asset1_name\n    )\n    trace2b = go.Scatter(\n        x=df[df.wt1==0][\"stdev\"],\n        y=df[df.wt1==0][\"mean\"],\n        mode=\"markers\",\n        text=df[df.wt1==0][\"text\"],\n        hovertemplate=\"%{text}<extra></extra>\",\n        marker=dict(size=10, color=\"red\"),\n        name=asset2_name\n    )\n\n    fig = go.Figure()\n    fig.add_trace(trace2a)\n    fig.add_trace(trace2b)\n    fig.add_trace(trace1)\n\n\n\n    def custom(string, ports,srTang,borrow_flag):\n        # borrow_flag=1 adds statement about \"relative to borrowing rate\"\n        cd = np.empty(shape=(len(ports), N+1, 1), dtype=float)\n        for i in range(N):\n            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)\n        cd[:,N] = np.round(srTang,4)\n        # print(cd)\n        string += \"<br>\"\n        for i in range(N):\n            string += \"asset \" + str(i + 1)\n            string += \": %{customdata[\"\n            string += str(i)\n            string += \"]:.1%}<br>\"\n        if borrow_flag==1:\n            string += \"Sharpe ratio (relative to borrowing rate): %{customdata[\" +  str(N) + \"]:.4f}<br>\"    \n        else:\n            string += \"Sharpe ratio: %{customdata[\" +  str(N) + \"]:.4f}<br>\"\n        string += \"<extra></extra>\"\n        return string, cd  \n\n    # Plot the tangency portfolios\n    c = c / 100\n    rb = rs + extra     \n    rs = rs/100\n    rb = rb/100\n    mns = [mn1, mn2]\n    mns = np.array(mns) / 100\n    sds = [sd1, sd2]\n    sds = np.array(sds) / 100\n    cov = np.array(\n        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]\n    ).reshape(2, 2)\n    \n    Shorts = 1.0     \n    N = len(mns)\n    P = portfolio(mns, cov, Shorts)    \n    gmv = P.GMV @ mns\n    # print('GMV return is: ',gmv)\n    if (rs < gmv) or (not Shorts):\n        portTang = P.tangency(rs)\n        mnTang = portTang @ mns\n        if mnTang < np.max(mns):\n            sdTang = np.sqrt(portTang @ cov @ portTang)\n            srTang = (mnTang - rs)/sdTang\n            string0 = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'\n            string, cd = custom(string0, [portTang], srTang,0)\n            trace = go.Scatter(\n                x=[sdTang],\n                y=[mnTang],\n                mode=\"markers\",\n                customdata=cd,\n                hovertemplate=string,\n                marker=dict(size=10, color=\"blue\"),\n                name=string0\n            )\n            fig.add_trace(trace)\n            \n            #Plot CAL (no leverage)\n            if rb==rs:\n                max_wgt = 4.0\n            else:\n                max_wgt = 1.0\n            grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mnTang*100, sdTang*100, rs*100,rb*100,0, max_wgt)\n            portlabel = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'\n            string = \"wealth in \"+portlabel + \" = %{text:.0f}%<br>\" + \"Sharpe ratio: \" +  \"{:.4f}\".format(srTang) +\"<extra></extra>\"\n            trace5 = go.Scatter(\n                x=sds_cal, \n                y=mns_cal, \n                mode=\"lines\", \n                text=100 * grid, \n                hovertemplate=string, \n                line=dict(color=\"blue\"),\n                name=\"CAL: \" + portlabel\n            )           \n            fig.add_trace(trace5)\n              \n            \n            \n\n    if (rb != rs) and ((gmv > rb) or (not Shorts)):\n        portTang = P.tangency(rb)\n        mnTang = portTang @ mns\n        if mnTang < np.max(mns):\n            sdTang = np.sqrt(portTang @ cov @ portTang)\n            srTang = (mnTang - rb)/sdTang\n            string = 'efficient high mean portfolio'\n            string, cd = custom(string, [portTang], srTang,1)\n            trace = go.Scatter(\n                x=[sdTang],\n                y=[mnTang],\n                mode=\"markers\",\n                customdata=cd,\n                hovertemplate=string,\n                marker=dict(size=10, color=\"blue\"),\n                name=\"efficient high mean portfolio\"\n            )\n            fig.add_trace(trace)\n            \n            #Plot CAL (with leverage)            \n            grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mnTang*100, sdTang*100, rs*100,rb*100, 1.0, 1.5)\n            string = \"wealth in efficient high mean portfolio = %{text:.0f}%<br>\" + \"Sharpe ratio (relative to borrowing rate): \" + \"{:.4f}\".format(srTang) +\"<extra></extra>\"\n            trace6 = go.Scatter(\n                x=sds_cal, \n                y=mns_cal, \n                mode=\"lines\", \n                text=100 * grid, \n                hovertemplate=string,\n                line=dict(color=\"blue\"),\n                name = \"CAL: efficient high mean\"\n            )           \n            fig.add_trace(trace6)   \n \n\n\n\n\n    # Utility plot info\n    u1, wgt1, wgt_rf1, wgt_lo1, wgt_hi1 = opt_utility(mns, cov, Shorts, rs, rb, raver1)\n    u2, wgt2, wgt_rf2, wgt_lo2, wgt_hi2 = opt_utility(mns, cov, Shorts, rs, rb, raver2)\n    string1='Risk Aversion='+str(raver1)\n    string2='Risk Aversion='+str(raver2)\n    grid = np.linspace(0,1.4,100)\n    sds = [w*np.max(sds) for w in grid]\n    eret1 = [u1 + 0.5*raver1* (sd**2) for sd in sds]\n    eret2 = [u2 + 0.5*raver2* (sd**2) for sd in sds] \n    # df = pd.DataFrame(data={'Standard Deviation': sds, string1: U1, string2: U2})\n    string = \"indifference curve for <br> optimal utility for risk aversion of \"+str(np.round(raver1,1))+\"<extra></extra>\"\n    trace7 = go.Scatter(\n        x=sds, y=eret1, mode=\"lines\", hovertemplate=string, name=string1, line=dict(color=\"purple\",dash='dot'),\n    )  \n    string = \"indifference curve for <br> optimal utility for risk aversion of \"+str(np.round(raver2,1))+\"<extra></extra>\"\n    trace8 = go.Scatter(\n        x=sds, y=eret2, mode=\"lines\", hovertemplate=string, name=string2, line=dict(color=\"purple\"),\n    )  \n    fig.add_trace(trace7) \n    fig.add_trace(trace8) \n \n    \n    fig.layout.xaxis[\"title\"] = \"Standard Deviation\"\n    fig.layout.yaxis[\"title\"] = \"Expected Return\"\n    fig.update_xaxes(range=[0, 1.25 * df[\"stdev\"].max()])\n    fig.update_yaxes(range=[0, 1.25 * df[\"mean\"].max()])\n    fig.update_yaxes(tickformat=\".0%\")\n    fig.update_xaxes(tickformat=\".0%\")\n    fig.update_layout(legend=dict(yanchor=\"top\", y =0.99, xanchor=\"left\", x=0.74))\n    # fig.show()\n\n\n    #2nd plot of risky asset share as function of risk aversion:\n    ravers = np.arange(0.5,20,0.1)\n    cd = np.empty(shape=(len(ravers),5,1),dtype=float)\n    wgts = [opt_utility(mns, cov, Shorts, rs, rb, A) for A in ravers]\n    df = pd.DataFrame(wgts, columns=['u','wgt_risky','wgt_rf','wgt_lowrisk','wgt_highrisk'])\n    if (rb != rs):\n        custdat = np.empty(shape=(df.shape[0],3,1), dtype=float)\n        custdat[:,0] = np.array(100*df.wgt_rf).reshape(-1,1)\n        custdat[:,1] = np.array(100*df.wgt_lowrisk).reshape(-1,1)\n        custdat[:,2] = np.array(100*df.wgt_highrisk).reshape(-1,1)\n        string = 'risk-aversion: %{x:.1f}<br>'\n        string+= 'risk-free: %{customdata[0]:.0f}%<br>'\n        string+= 'efficient low risk: %{customdata[1]:.0f}%<br>'\n        string+= 'efficient high mean: %{customdata[2]:.0f}%<br>'\n        string+= '<extra></extra>'\n        trace1 = go.Scatter(x=ravers,y=df['wgt_risky'],mode='lines',customdata=custdat,hovertemplate=string, line=dict(color=\"orange\"))\n        fig = go.Figure()\n        fig.add_trace(trace1)\n    else:\n        custdat = np.empty(shape=(df.shape[0],2,1), dtype=float)\n        custdat[:,0] = np.array(100*df.wgt_rf).reshape(-1,1)\n        custdat[:,1] = np.array(100*df.wgt_lowrisk).reshape(-1,1)\n        string = 'risk-aversion: %{x:.1f}<br>'\n        string+= 'risk-free: %{customdata[0]:.0f}%<br>'\n        string+= 'tangency: %{customdata[1]:.0f}%<br>'\n        string+= '<extra></extra>'\n        trace1 = go.Scatter(x=ravers,y=df['wgt_risky'],mode='lines',customdata=custdat,hovertemplate=string, line=dict(color=\"orange\"))\n        fig = go.Figure()\n        fig.add_trace(trace1)       \n    fig.layout.xaxis[\"title\"] = \"Risk Aversion\"\n    fig.layout.yaxis[\"title\"] = \"Weight in Risky Assets\"\n    fig.update_yaxes(tickformat=\".1%\")\n    fig.update_xaxes(tickformat=\".2\")\n    fig.update_layout(legend=dict(yanchor=\"top\", y =0.99, xanchor=\"left\", x=0.74))\n    fig.show()\n\n\nfigtbl(mn_stock,mn_bond,sd_stock,sd_bond,corr,rs,extra,raver1, raver2, \"Stock\",\"Bond\")\n```\n\n::: {#fig-diffsaveborrow-cal-allocation-by-riskaversion .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"168010ec-525c-48f5-8155-211a008da362\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"168010ec-525c-48f5-8155-211a008da362\")) {                    Plotly.newPlot(                        \"168010ec-525c-48f5-8155-211a008da362\",                        [{\"customdata\":[[[-611.529390369347],[0.0],[711.529390369347]],[[-492.94115864112246],[0.0],[592.9411586411225]],[[-408.23527883524787],[0.0],[508.23527883524787]],[[-344.70586898084184],[0.0],[444.70586898084184]],[[-295.2941057607484],[0.0],[395.2941057607484]],[[-255.76469518467354],[0.0],[355.76469518467354]],[[-223.42245016788502],[0.0],[323.422450167885]],[[-196.4705793205613],[0.0],[296.4705793205613]],[[-173.66515014205658],[0.0],[273.6651501420566]],[[-154.11763941762393],[0.0],[254.11763941762393]],[[-137.17646345644906],[0.0],[237.17646345644906]],[[-122.35293449042098],[0.0],[222.35293449042098]],[[-109.2733501086315],[0.0],[209.27335010863152]],[[-97.64705288037419],[0.0],[197.6470528803742]],[[-87.24457641298609],[0.0],[187.24457641298608]],[[-77.88234759233679],[0.0],[177.8823475923368]],[[-69.41175961174932],[0.0],[169.41175961174932]],[[-61.71122508394251],[0.0],[161.7112250839425]],[[-54.680302254205856],[0.0],[154.68030225420586]],[[-48.23528966028066],[0.0],[148.23528966028064]],[[-42.30587807386943],[0.0],[142.30587807386942]],[[-36.83257507102829],[0.0],[136.8325750710283]],[[-31.764701920249493],[0.0],[131.7647019202495]],[[-27.05881970881199],[0.0],[127.05881970881198]],[[-22.677481098163298],[0.0],[122.6774810981633]],[[-18.588231728224525],[0.0],[118.58823172822453]],[[-14.76280489828179],[0.0],[114.76280489828179]],[[-11.176467245210485],[0.0],[111.17646724521049]],[[-7.807483389295022],[0.0],[107.80748338929502]],[[-4.636675054315753],[0.0],[104.63667505431576]],[[-1.6470557670495989],[0.0],[101.6470557670496]],[[0.0],[1.5560985332371646],[98.44390146676284]],[[0.0],[5.088853741450026],[94.91114625854998]],[[0.0],[8.435674465020126],[91.56432553497987]],[[0.0],[11.610863356612269],[88.38913664338773]],[[0.0],[14.627292803624773],[85.37270719637523]],[[0.0],[17.496579350783055],[82.50342064921693]],[[0.0],[20.229233205219487],[79.77076679478051]],[[0.0],[22.834786880379802],[77.1652131196202]],[[0.0],[25.321906297578273],[74.67809370242173]],[[0.0],[27.698487074012405],[72.3015129259876]],[[0.0],[29.97173825147112],[70.02826174852888]],[[0.0],[32.14825533627202],[67.85174466372797]],[[0.0],[34.234084209206216],[65.76591579079378]],[[0.0],[36.23477720977574],[63.76522279022425]],[[0.0],[38.1554424903225],[61.8445575096775]],[[0.0],[40.000787563789],[59.999212436211]],[[0.0],[41.77515782673755],[58.224842173262445]],[[0.0],[43.48257072127292],[56.51742927872707]],[[0.0],[45.126746101195906],[54.873253898804094]],[[0.0],[46.71113328548532],[53.28886671451468]],[[0.0],[48.238935213192946],[51.761064786807054]],[[0.0],[49.71313005571787],[50.28686994428213]],[[0.0],[51.13649059332814],[48.86350940667186]],[[0.0],[52.511601621188895],[47.488398378811105]],[[0.0],[53.84087561478764],[46.15912438521236]],[[0.0],[55.1265668544979],[44.8734331455021]],[[0.0],[56.370784183249754],[43.629215816750246]],[[0.0],[57.57550254918412],[42.42449745081588]],[[0.0],[58.74257346618301],[41.25742653381699]],[[0.0],[59.873734508812696],[40.126265491187304]],[[0.0],[60.97061794409],[39.02938205591]],[[0.0],[62.03475859025451],[37.96524140974549]],[[0.0],[63.067600982120084],[36.932399017879916]],[[0.0],[64.07050591335187],[35.92949408664813]],[[0.0],[65.04475641797704],[34.955243582022966]],[[0.0],[65.99156324641558],[34.00843675358443]],[[0.0],[66.91206988517526],[33.08793011482474]],[[0.0],[67.80735716396894],[32.19264283603106]],[[0.0],[68.67844748928171],[31.3215525107183]],[[0.0],[69.5263087392528],[30.473691260747206]],[[0.0],[70.35185785106675],[29.648142148933243]],[[0.0],[71.1559641288076],[28.844035871192396]],[[0.0],[71.93945229686281],[28.060547703137185]],[[0.0],[72.70310532142295],[27.296894678577043]],[[0.0],[73.44766702036907],[26.552332979630933]],[[0.0],[74.17384447983505],[25.82615552016494]],[[0.0],[74.88231029394822],[25.11768970605178]],[[0.0],[75.57370464266104],[24.426295357338958]],[[0.0],[76.24863722116643],[23.751362778833574]],[[0.0],[76.90768903311874],[23.092310966881257]],[[0.0],[77.55141405874659],[22.44858594125342]],[[0.0],[78.18034080792322],[21.81965919207679]],[[0.0],[78.79497376734584],[21.205026232654166]],[[0.0],[79.3957947501522],[20.604205249847794]],[[0.0],[79.98326415556288],[20.016735844437118]],[[0.0],[80.55782214547003],[19.442177854529973]],[[0.0],[81.11988974429225],[18.88011025570775]],[[0.0],[81.66986986787096],[18.330130132129042]],[[0.0],[82.2081482866927],[17.791851713307295]],[[0.0],[82.73509452827606],[17.264905471723935]],[[0.0],[83.25106272315979],[16.748937276840202]],[[0.0],[83.75639239856136],[16.243607601438637]],[[0.0],[84.25140922344457],[15.748590776555439]],[[0.0],[84.73642570843111],[15.263574291568883]],[[0.0],[85.21174186371793],[14.788258136282062]],[[0.0],[85.67764581790998],[14.322354182090024]],[[0.0],[86.13441440045119],[13.865585599548801]],[[0.0],[86.5823136901275],[13.41768630987249]],[[0.0],[87.02159953192546],[12.978400468074536]],[[0.0],[87.45251802435583],[12.547481975644182]],[[0.0],[87.87530597919316],[12.124694020806848]],[[0.0],[88.29019135543538],[11.709808644564623]],[[0.0],[88.69739366915465],[11.302606330845355]],[[0.0],[89.09712438078729],[10.902875619212704]],[[0.0],[89.48958726129935],[10.510412738700648]],[[0.0],[89.87497873855894],[10.12502126144107]],[[0.0],[90.25348822515315],[9.746511774846844]],[[0.0],[90.62529842879881],[9.374701571201182]],[[0.0],[90.99058564641562],[9.009414353584377]],[[0.0],[91.3495200428565],[8.650479957143508]],[[0.0],[91.70226591522076],[8.29773408477924]],[[0.0],[92.048981943613],[7.951018056386994]],[[0.0],[92.38982142915113],[7.610178570848869]],[[0.0],[92.72493251997433],[7.275067480025665]],[[0.0],[93.05445842595049],[6.945541574049507]],[[0.0],[93.37853762273699],[6.6214623772630095]],[[0.0],[93.69730404580564],[6.302695954194359]],[[0.0],[94.01088727500326],[5.989112724996737]],[[0.0],[94.31941271018157],[5.6805872898184395]],[[0.0],[94.62300173839702],[5.376998261602973]],[[0.0],[94.92177189314876],[5.078228106851245]],[[0.0],[95.21583700609335],[4.784162993906649]],[[0.0],[95.5053073516482],[4.494692648351806]],[[0.0],[95.79028978486885],[4.209710215131157]],[[0.0],[96.07088787296303],[3.929112127036971]],[[0.0],[96.34720202078097],[3.6527979792190246]],[[0.0],[96.6193295906017],[3.380670409398301]],[[0.0],[96.8873650165153],[3.1126349834846967]],[[0.0],[97.15139991368395],[2.8486000863160554]],[[0.0],[97.41152318274638],[2.5884768172536154]],[[0.0],[97.66782110961672],[2.332178890383274]],[[0.0],[97.92037746091232],[2.0796225390876777]],[[0.0],[98.16927357523262],[1.8307264247673816]],[[0.0],[98.41458845049796],[1.585411549502047]],[[0.0],[98.6563988275452],[1.3436011724548003]],[[0.0],[98.89477927016625],[1.1052207298337446]],[[0.0],[99.12980224176448],[0.8701977582355247]],[[0.0],[99.36153817879489],[0.6384618212051163]],[[0.0],[99.59005556114433],[0.40994443885568055]],[[0.0],[99.81542097959928],[0.18457902040072138]],[[0.11683138825847594],[99.88316861174152],[0.0]],[[0.7963087257533252],[99.20369127424668],[0.0]],[[1.4666039370658024],[98.5333960629342],[0.0]],[[2.1279018972197083],[97.87209810278028],[0.0]],[[2.7803825512382474],[97.21961744876175],[0.0]],[[3.424221077388978],[96.57577892261102],[0.0]],[[4.05958804398513],[95.94041195601487],[0.0]],[[4.686649560037514],[95.31335043996249],[0.0]],[[5.30556742003726],[94.69443257996274],[0.0]],[[5.916499243133799],[94.0835007568662],[0.0]],[[6.519598606959843],[93.48040139304015],[0.0]],[[7.115015176342265],[92.88498482365773],[0.0]],[[7.702894827124929],[92.29710517287508],[0.0]],[[8.28337976531911],[91.71662023468089],[0.0]],[[8.856608641785868],[91.14339135821413],[0.0]],[[9.422716662644326],[90.57728333735568],[0.0]],[[9.981835695590979],[90.01816430440903],[0.0]],[[10.534094372305148],[89.46590562769485],[0.0]],[[11.079618187108176],[88.92038181289182],[0.0]],[[11.618529592034776],[88.38147040796522],[0.0]],[[12.150948088468304],[87.84905191153169],[0.0]],[[12.676990315483462],[87.32300968451653],[0.0]],[[13.196770135034154],[86.80322986496584],[0.0]],[[13.710398714116788],[86.28960128588321],[0.0]],[[14.21798460403375],[85.78201539596625],[0.0]],[[14.719633816875676],[85.28036618312433],[0.0]],[[15.215449899335686],[84.78455010066432],[0.0]],[[15.705534003963795],[84.29446599603621],[0.0]],[[16.18998495796401],[83.81001504203599],[0.0]],[[16.66889932963278],[83.33110067036722],[0.0]],[[17.142371492532614],[82.85762850746738],[0.0]],[[17.610493687490035],[82.38950631250997],[0.0]],[[18.073356082504155],[81.92664391749585],[0.0]],[[18.53104683064658],[81.46895316935343],[0.0]],[[18.98365212603187],[81.01634787396813],[0.0]],[[19.43125625793225],[80.56874374206775],[0.0]],[[19.87394166310844],[80.12605833689156],[0.0]],[[20.311788976424804],[79.68821102357519],[0.0]],[[20.744877079813783],[79.25512292018621],[0.0]],[[21.173283149652644],[78.82671685034735],[0.0]],[[21.59708270261149],[78.40291729738851],[0.0]],[[22.016349640030676],[77.98365035996933],[0.0]],[[22.431156290881592],[77.56884370911841],[0.0]],[[22.841573453363683],[77.15842654663632],[0.0]],[[23.247670435188095],[76.7523295648119],[0.0]],[[23.649515092595475],[76.35048490740452],[0.0]],[[24.047173868154893],[75.95282613184511],[0.0]],[[24.44071182738724],[75.55928817261275],[0.0]],[[24.830192694256368],[75.16980730574363],[0.0]],[[25.215678885567883],[74.78432111443212],[0.0]],[[25.59723154431498],[74.40276845568502],[0.0]],[[25.974910572008824],[74.02508942799118],[0.0]],[[26.348774660028983],[73.65122533997102],[0.0]],[[26.71888132002883],[73.28111867997117],[0.0]]],\"hovertemplate\":\"risk-aversion: %{x:.1f}<br>risk-free: %{customdata[0]:.0f}%<br>efficient low risk: %{customdata[1]:.0f}%<br>efficient high mean: %{customdata[2]:.0f}%<br><extra></extra>\",\"line\":{\"color\":\"orange\"},\"mode\":\"lines\",\"x\":[0.5,0.6,0.7,0.7999999999999999,0.8999999999999999,0.9999999999999999,1.0999999999999999,1.1999999999999997,1.2999999999999998,1.4,1.4999999999999998,1.5999999999999996,1.6999999999999997,1.7999999999999998,1.8999999999999997,1.9999999999999996,2.0999999999999996,2.1999999999999997,2.3,2.3999999999999995,2.4999999999999996,2.5999999999999996,2.6999999999999993,2.7999999999999994,2.8999999999999995,2.9999999999999996,3.0999999999999996,3.1999999999999993,3.2999999999999994,3.3999999999999995,3.499999999999999,3.599999999999999,3.6999999999999993,3.7999999999999994,3.8999999999999995,3.999999999999999,4.1,4.199999999999999,4.299999999999999,4.399999999999999,4.499999999999999,4.599999999999999,4.699999999999999,4.799999999999999,4.899999999999999,4.999999999999999,5.099999999999999,5.199999999999999,5.299999999999999,5.399999999999999,5.499999999999999,5.599999999999999,5.699999999999999,5.799999999999999,5.899999999999999,5.999999999999999,6.099999999999999,6.199999999999998,6.299999999999999,6.399999999999999,6.499999999999998,6.599999999999999,6.699999999999998,6.799999999999999,6.899999999999999,6.999999999999998,7.099999999999999,7.199999999999998,7.299999999999999,7.399999999999999,7.499999999999998,7.599999999999999,7.699999999999998,7.799999999999998,7.899999999999999,7.999999999999998,8.099999999999998,8.2,8.299999999999997,8.399999999999999,8.499999999999998,8.599999999999998,8.699999999999998,8.799999999999999,8.899999999999999,8.999999999999998,9.099999999999998,9.199999999999998,9.299999999999997,9.399999999999999,9.499999999999998,9.599999999999998,9.699999999999998,9.799999999999997,9.899999999999999,9.999999999999998,10.099999999999998,10.199999999999998,10.299999999999997,10.399999999999999,10.499999999999998,10.599999999999998,10.699999999999998,10.799999999999997,10.899999999999999,10.999999999999998,11.099999999999998,11.199999999999998,11.299999999999997,11.399999999999997,11.499999999999998,11.599999999999998,11.699999999999998,11.799999999999997,11.899999999999997,11.999999999999998,12.099999999999998,12.199999999999998,12.299999999999997,12.399999999999997,12.499999999999996,12.599999999999998,12.699999999999998,12.799999999999997,12.899999999999997,12.999999999999996,13.099999999999998,13.199999999999998,13.299999999999997,13.399999999999997,13.499999999999996,13.599999999999998,13.699999999999998,13.799999999999997,13.899999999999997,13.999999999999996,14.099999999999998,14.199999999999998,14.299999999999997,14.399999999999997,14.499999999999996,14.599999999999996,14.699999999999998,14.799999999999997,14.899999999999997,14.999999999999996,15.099999999999996,15.199999999999998,15.299999999999997,15.399999999999997,15.499999999999996,15.599999999999996,15.699999999999996,15.799999999999997,15.899999999999997,15.999999999999996,16.099999999999994,16.199999999999996,16.299999999999997,16.4,16.499999999999996,16.599999999999998,16.699999999999996,16.799999999999997,16.899999999999995,16.999999999999996,17.099999999999998,17.199999999999996,17.299999999999997,17.399999999999995,17.499999999999996,17.599999999999998,17.699999999999996,17.799999999999997,17.899999999999995,17.999999999999996,18.099999999999994,18.199999999999996,18.299999999999997,18.399999999999995,18.499999999999996,18.599999999999994,18.699999999999996,18.799999999999997,18.899999999999995,18.999999999999996,19.099999999999994,19.199999999999996,19.299999999999997,19.399999999999995,19.499999999999996,19.599999999999994,19.699999999999996,19.799999999999997,19.899999999999995],\"y\":[7.11529390369347,5.9294115864112245,5.082352788352479,4.447058689808419,3.9529410576074837,3.5576469518467353,3.2342245016788502,2.964705793205613,2.7366515014205657,2.5411763941762393,2.3717646345644905,2.2235293449042097,2.092733501086315,1.9764705288037419,1.8724457641298609,1.7788234759233679,1.6941175961174932,1.6171122508394251,1.5468030225420586,1.4823528966028066,1.4230587807386943,1.3683257507102828,1.317647019202495,1.2705881970881199,1.226774810981633,1.1858823172822452,1.147628048982818,1.1117646724521049,1.0780748338929502,1.0463667505431575,1.016470557670496,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9988316861174152,0.9920369127424667,0.985333960629342,0.9787209810278029,0.9721961744876175,0.9657577892261102,0.9594041195601487,0.9531335043996249,0.9469443257996274,0.940835007568662,0.9348040139304016,0.9288498482365773,0.9229710517287507,0.9171662023468089,0.9114339135821413,0.9057728333735567,0.9001816430440902,0.8946590562769485,0.8892038181289182,0.8838147040796522,0.878490519115317,0.8732300968451654,0.8680322986496585,0.8628960128588321,0.8578201539596625,0.8528036618312432,0.8478455010066431,0.842944659960362,0.8381001504203599,0.8333110067036722,0.8285762850746738,0.8238950631250996,0.8192664391749584,0.8146895316935342,0.8101634787396813,0.8056874374206775,0.8012605833689156,0.796882110235752,0.7925512292018622,0.7882671685034736,0.7840291729738851,0.7798365035996933,0.7756884370911841,0.7715842654663632,0.767523295648119,0.7635048490740453,0.7595282613184511,0.7555928817261276,0.7516980730574363,0.7478432111443212,0.7440276845568502,0.7402508942799118,0.7365122533997102,0.7328111867997117],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"title\":{\"text\":\"Risk Aversion\"},\"tickformat\":\".2\"},\"yaxis\":{\"title\":{\"text\":\"Weight in Risky Assets\"},\"tickformat\":\".1%\"},\"legend\":{\"yanchor\":\"top\",\"y\":0.99,\"xanchor\":\"left\",\"x\":0.74}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('168010ec-525c-48f5-8155-211a008da362');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nPreferences and Efficient Portfolios\n:::\n:::\n\n\n## Short-Sales Constraints\n\n### Short-Sales and Hedging {-}\n\nIn @sec-diversification, we assumed that short-selling is allowed.  Short-selling of some assets may sometimes improve mean-variance efficiency.  Recall that diversification benefits increase for lower levels of correlations.  All else equal, negative correlation between two assets provides more diversification benefits than positive portfolio correlation.  Short-selling a security that is positively correlated with other assets can be thought of as created a new security that has negative correlation with the other assets, and thus may provide a diversification benefit.  Shorting an asset to lower risk is a special form of diversification called **hedging**.  \n\n@fig-frontier-gmv-shorting shows how the GMV portfolio and frontier changes if short-sales are not allowed for any of the three equity portfolios.  Notice that the global minimum variance portfolio with short-selling involves shorting emerging market equity and invests the proceeds and initial capital in a combination of US and developed international equities.  Without this possibility, the GMV portfolio without short-sales has a higher standard deviation (and invests nothing in the emerging market portfolio). \n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport numpy as np\nimport plotly.graph_objects as go\n\n#Based on French return series\n# Asset 1: US Equity\n# Asset 2: Developed International\n# Asset 1: Emerging Market\nmn1= 6\nmn2= 6.5\nmn3= 8\nsd1= 15\nsd2= 16.5 \nsd3= 21\ncorr12 = 75 \ncorr13 = 75 \ncorr23 = 75 \n\ndef is_pos_def(x):\n    if np.all(np.linalg.eigvals(x) > 0):\n        return 'True'\n    else:\n        return 'False'\n    \ndef figtbl(mn1, mn2, mn3, sd1, sd2, sd3, c12, c13, c23, asset_names):\n    mns = np.array((mn1, mn2, mn3)) / 100\n    sds = np.array((sd1, sd2, sd3)) / 100\n    corr = np.identity(3)\n    corr[0,1] = corr[1,0] = c12 / 100\n    corr[0,2] = corr[2,0] = c13 / 100\n    corr[1,2] = corr[2,1] = c23 / 100\n    cov = np.diag(sds) @ corr @ np.diag(sds)\n    N = 3\n\n    def custom(string, ports):\n        cd = np.empty(shape=(len(ports), N, 1), dtype=float)\n        for i in range(N):\n            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)\n        string += \"<br>\"\n        for i in range(N):\n            string += asset_names[i]\n            string += \": %{customdata[\"\n            string += str(i)\n            string += \"]:.1%}<br>\"\n        string += \"<extra></extra>\"\n        return string, cd\n\n\n    # No short-sales\n    P = portfolio(mns, cov, False)\n\n    mingrid = np.min(mns)\n    maxgrid = np.max(mns)\n    mnsFrontier = np.linspace(mingrid, maxgrid, 50)\n    portsFrontier = [P.frontier(m) for m in mnsFrontier]\n    sdsFrontier = [np.sqrt(w @ cov @ w) for w in portsFrontier]\n\n    # string, cd = custom('frontier', portsFrontier)\n    string, cd = custom('frontier w/o short sales', portsFrontier)\n    trace1 = go.Scatter(\n        x=sdsFrontier,\n        y=mnsFrontier,\n        mode=\"lines\",\n        customdata=cd,\n        hovertemplate=string,\n        line=dict(color=\"green\"),\n        name=\"3-Fund Frontier w/o short sales\"\n    )\n\n    gmv = P.GMV\n\n    string = \"GMV portfolio w/o short sales <br>\"\n    for i in range(N):\n        string += asset_names[i]+\": \" + f'{gmv[i]:.1%}' + \"<br>\"\n    string += \"<extra></extra>\"        \n    trace1a = go.Scatter(\n        x=[np.sqrt(gmv @ cov @ gmv)],\n        y=[gmv @ mns],\n        mode=\"markers\",\n        # customdata=cd,\n        hovertemplate=string,        \n        marker=dict(size=15, color=\"green\"),\n        name=\"GMV Portfolio w/o Short Sales\"\n    )\n\n\n\n    # Allowing short-selling\n    P = portfolio(mns, cov, True)\n\n    mingrid = 0.9*np.min(mns)\n    maxgrid = 1.025*np.max(mns)\n    mnsFrontier = np.linspace(mingrid, maxgrid, 50)\n    portsFrontier = [P.frontier(m) for m in mnsFrontier]\n    sdsFrontier = [np.sqrt(w @ cov @ w) for w in portsFrontier]\n\n    string, cd = custom('frontier with short sales', portsFrontier)\n    trace2 = go.Scatter(\n        x=sdsFrontier,\n        y=mnsFrontier,\n        mode=\"lines\",\n        customdata=cd,\n        hovertemplate=string,\n        line=dict(color=\"blue\"),\n        name=\"3-Fund Frontier with short sales\"\n    )\n\n    gmv = P.GMV\n\n    string = \"GMV portfolio with short sales <br>\"\n    for i in range(N):\n        string += asset_names[i]+\": \" + f'{gmv[i]:.1%}' + \"<br>\"\n    string += \"<extra></extra>\"\n    trace2a = go.Scatter(\n        x=[np.sqrt(gmv @ cov @ gmv)],\n        y = [gmv @ mns],\n        mode = \"markers\",\n        hovertemplate = string,\n        marker = dict(size=15, color=\"blue\"),\n        name=\"GMV Portfolio with Short Sales\"\n    )\n\n    trace3 = go.Scatter(\n        x=sds,\n        y=mns,\n        # text=[1, 2, 3],\n        # hovertemplate=\"Asset %{text}<extra></extra>\",\n        text=asset_names,\n        hovertemplate=\"%{text}<extra></extra>\",\n        mode=\"markers\",\n        marker=dict(size=15, color=\"red\"),\n        name=\"Underlying Assets\"\n    )\n\n    fig = go.Figure()\n    \n    for trace in (trace1, trace1a, trace2, trace2a, trace3):\n        fig.add_trace(trace)\n    #trace1=frontier w/o short sales\n    #trace1a=GMV portfolio w/o short sales\n    #trace2=frontier with short sales\n    #trace2a=GMV portfolio with short sales\n    #trace3=Assets\n        \n        \n    fig.layout.xaxis[\"title\"] = \"Standard Deviation\"\n    fig.layout.yaxis[\"title\"] = \"Expected Return\"\n    # fig.update_xaxes(range=[0, 1.25 * np.max(sds)])\n    # fig.update_yaxes(range=[0, 1.25 * np.max(mns)])\n    fig.update_yaxes(tickformat=\".1%\")\n    fig.update_xaxes(tickformat=\".1%\")\n    fig.update_layout(legend=dict(yanchor=\"top\", y =0.99, xanchor=\"left\", x=0.01))\n    fig.show()\n    # return largefig(fig), is_pos_def(cov)\nfigtbl(mn1, mn2, mn3, sd1, sd2, sd3, corr12, corr13, corr23, [\"US Equity\", \"Developed Intl\", \"Emerging Mkt\"])\n```\n\n::: {#fig-frontier-gmv-shorting .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"b7ad7622-b158-4bb7-b775-29e6be7c4828\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"b7ad7622-b158-4bb7-b775-29e6be7c4828\")) {                    Plotly.newPlot(                        \"b7ad7622-b158-4bb7-b775-29e6be7c4828\",                        [{\"customdata\":[[[1.0000000012690173],[-1.6920228109848528e-09],[4.2300543680176337e-10]],[[0.9183679080744751],[0.08163190488029222],[1.870452327272962e-07]],[[0.8367351389358639],[0.1632647127113656],[1.4835277050636023e-07]],[[0.7551025257843621],[0.2448973125596259],[1.6165601207227792e-07]],[[0.6735656404569421],[0.32640227530911176],[3.208423394620761e-05]],[[0.6116290985241584],[0.3817734468657483],[0.006597454610093412]],[[0.5933178210905578],[0.3789775990901414],[0.027704579819300978]],[[0.5750093395964921],[0.37617802339515377],[0.04881263700835413]],[[0.5567012440593695],[0.3733779330909086],[0.06992082284972197]],[[0.5383883515938994],[0.3705842386911279],[0.09102740971497274]],[[0.5200813483380511],[0.36778269201185143],[0.11213595965009747]],[[0.5017740486398102],[0.36498154058909754],[0.13324441077109225]],[[0.4834665645684787],[0.3621806349971315],[0.1543528004343899]],[[0.46515891745862437],[0.35937994678986174],[0.17546113575151404]],[[0.4468512080253353],[0.35657934168050665],[0.19656945029415818]],[[0.42854345671563865],[0.35377879240635907],[0.2176777508780022]],[[0.4102356642623818],[0.35097829799029456],[0.23878603774732368]],[[0.39192783267313047],[0.3481778557555541],[0.25989431157131543]],[[0.3736199651067161],[0.3453774614903648],[0.28100257340291906]],[[0.3553120662027738],[0.34257710900854654],[0.3021108247886797]],[[0.337004170252154],[0.33977675258896517],[0.32321907715888093]],[[0.3186963125854699],[0.336976345124136],[0.3443273422903943]],[[0.3003885169596953],[0.3341758549380933],[0.36543562810221136]],[[0.28208080403953223],[0.33137525447790206],[0.3865439414825657]],[[0.26377320637090196],[0.32857450034900115],[0.40765229328009683]],[[0.2454657694096428],[0.325773531943606],[0.42876069864675126]],[[0.22715855697462706],[0.32297226416988545],[0.44986917885548755]],[[0.20885165955582885],[0.3201705763745402],[0.4709777640696309]],[[0.1905452075367951],[0.31736829471284467],[0.4920864977503603]],[[0.1722393941007398],[0.3145651616071768],[0.5131954442920834]],[[0.15393452101353383],[0.3117607747030432],[0.5343047042834229]],[[0.13563110883161672],[0.30895443992519217],[0.5554144512431912]],[[0.11733021251501777],[0.3061447506602484],[0.5765250368247339]],[[0.09899879841993768],[0.30337575176661424],[0.5976254498134481]],[[0.0806909416197223],[0.30057534314649287],[0.6187337152337847]],[[0.06238354736558214],[0.2977743177982713],[0.6398421348361465]],[[0.04407796332933376],[0.294970878826194],[0.6609511578444722]],[[0.025784032761666513],[0.2921519018960097],[0.6820640653423239]],[[0.007468548800616155],[0.2893616628236677],[0.7031697883757162]],[[0.00016182922347622716],[0.2718930712394471],[0.7279450995370766]],[[2.247863545223834e-06],[0.24489496203227987],[0.7551027901041749]],[[8.738327380249209e-06],[0.21767542372675774],[0.7823158379458619]],[[2.7279911682759296e-06],[0.19047255315463194],[0.8095247188541997]],[[7.560944858349319e-07],[0.16326429799646835],[0.8367349459090458]],[[2.4421106607479953e-05],[0.13602186029323046],[0.8639537186001621]],[[8.469531662672536e-06],[0.10883224470608245],[0.8911592857622549]],[[2.3343113262335867e-06],[0.081629540646122],[0.9183681250425517]],[[1.311365553681638e-05],[0.05440428383343375],[0.9455826025110294]],[[2.132012834102202e-07],[0.02721060008536446],[0.9727891867133521]],[[-2.0788556396575683e-10],[2.7718048120166155e-10],[0.9999999999307052]]],\"hovertemplate\":\"frontier w/o short sales<br>US Equity: %{customdata[0]:.1%}<br>Developed Intl: %{customdata[1]:.1%}<br>Emerging Mkt: %{customdata[2]:.1%}<br><extra></extra>\",\"line\":{\"color\":\"green\"},\"mode\":\"lines\",\"name\":\"3-Fund Frontier w/o short sales\",\"x\":[0.15000000004758812,0.14812532814403154,0.14679968883899117,0.14603806239042244,0.1458498222636197,0.1462101870802564,0.14674704076644476,0.14733607935237603,0.1479766796542143,0.14866817514794647,0.14940985917557165,0.150200988256801,0.1510407854360856,0.1519284436645731,0.15286312917402464,0.15384398481822922,0.15487013335685024,0.15594068065942293,0.15705471880977306,0.1582113290938606,0.15940958485677884,0.16064855421730917,0.16192730263099908,0.1632448952951733,0.164600399391558,0.1659928861642781,0.16742143283287295,0.16888512434164957,0.17038305494815964,0.17191432965485273,0.17347806548905081,0.1750733926374065,0.17669945544236323,0.17835541320332135,0.180040441101912,0.18175373058831687,0.1834944900287932,0.18526194509952693,0.18705533903265512,0.18888001627256087,0.19075924712648748,0.19269471374718447,0.19468448221920473,0.19672697269246955,0.19882079227670843,0.20096372662713133,0.20315465959056045,0.20539220791707272,0.20767429907665247,0.209999999996362],\"y\":[0.06,0.06040816326530612,0.060816326530612246,0.061224489795918366,0.061632653061224486,0.06204081632653061,0.062448979591836734,0.06285714285714286,0.06326530612244897,0.0636734693877551,0.06408163265306122,0.06448979591836734,0.06489795918367347,0.0653061224489796,0.06571428571428571,0.06612244897959184,0.06653061224489795,0.06693877551020408,0.0673469387755102,0.06775510204081632,0.06816326530612245,0.06857142857142857,0.06897959183673469,0.06938775510204082,0.06979591836734694,0.07020408163265306,0.07061224489795918,0.07102040816326531,0.07142857142857142,0.07183673469387755,0.07224489795918368,0.07265306122448979,0.07306122448979592,0.07346938775510203,0.07387755102040816,0.07428571428571429,0.07469387755102042,0.07510204081632653,0.07551020408163266,0.07591836734693877,0.0763265306122449,0.07673469387755102,0.07714285714285715,0.07755102040816327,0.07795918367346939,0.0783673469387755,0.07877551020408163,0.07918367346938776,0.07959183673469387,0.08],\"type\":\"scatter\"},{\"hovertemplate\":\"GMV portfolio w/o short sales <br>US Equity: 68.7%<br>Developed Intl: 31.2%<br>Emerging Mkt: 0.0%<br><extra></extra>\",\"marker\":{\"color\":\"green\",\"size\":15},\"mode\":\"markers\",\"name\":\"GMV Portfolio w/o Short Sales\",\"x\":[0.14584078022550442],\"y\":[0.061562505459663915],\"type\":\"scatter\"},{\"customdata\":[[[0.9722955145118729],[0.43693931398416885],[-0.40923482849604187]],[[0.946664153788164],[0.4330192235205428],[-0.3796833773087068]],[[0.9210327930644552],[0.42909913305691666],[-0.35013192612137184]],[[0.895401432340746],[0.4251790425932906],[-0.3205804749340364]],[[0.869770071617037],[0.4212589521296644],[-0.29102902374670137]],[[0.844138710893328],[0.4173388616660384],[-0.2614775725593664]],[[0.8185073501696191],[0.4134187712024123],[-0.2319261213720314]],[[0.7928759894459102],[0.4094986807387862],[-0.20237467018469638]],[[0.7672446287222012],[0.40557859027516013],[-0.1728232189973614]],[[0.741613267998492],[0.40165849981153395],[-0.14327176781002599]],[[0.7159819072747832],[0.39773840934790783],[-0.11372031662269098]],[[0.6903505465510742],[0.39381831888428176],[-0.08416886543535593]],[[0.6647191858273651],[0.3898982284206557],[-0.054617414248020926]],[[0.639087825103656],[0.3859781379570295],[-0.02506596306068555]],[[0.613456464379947],[0.38205804749340344],[0.0044854881266494645]],[[0.5878251036562381],[0.37813795702977737],[0.034036939313984466]],[[0.5621937429325292],[0.3742178665661513],[0.06358839050131951]],[[0.5365623822088204],[0.3702977761025252],[0.09313984168865452]],[[0.5109310214851114],[0.36637768563889905],[0.12269129287598952]],[[0.4852996607614024],[0.362457595175273],[0.15224274406332455]],[[0.45966830003769354],[0.3585375047116469],[0.18179419525065957]],[[0.43403693931398396],[0.35461741424802073],[0.2113456464379953]],[[0.4084055785902757],[0.3506973237843947],[0.24089709762532963]],[[0.38277421786656607],[0.3467772333207685],[0.27044854881266533]],[[0.3571428571428571],[0.3428571428571424],[0.3000000000000003]],[[0.3315114964191482],[0.3389370523935163],[0.32955145118733536]],[[0.3058801356954392],[0.3350169619298902],[0.35910290237467035]],[[0.2802487749717303],[0.3310968714662641],[0.38865435356200534]],[[0.2546174142480215],[0.32717678100263803],[0.41820580474934044]],[[0.22898605352431256],[0.323256690539012],[0.4477572559366755]],[[0.2033546928006036],[0.3193366000753859],[0.4773087071240104]],[[0.17772333207689472],[0.31541650961175977],[0.5068601583113455]],[[0.15209197135318508],[0.3114964191481336],[0.5364116094986813]],[[0.1264606106294769],[0.3075763286845077],[0.5659630606860155]],[[0.10082924990576736],[0.30365623822088145],[0.5955145118733512]],[[0.07519788918205839],[0.2997361477572553],[0.6250659630606863]],[[0.04956652845834941],[0.2958160572936292],[0.6546174142480212]],[[0.023935167734640217],[0.29189596683000296],[0.6841688654353563]],[[-0.0016961929890684235],[0.287975876366377],[0.7137203166226913]],[[-0.027327553712777508],[0.2840557859027508],[0.7432717678100262]],[[-0.05295891443648637],[0.28013569543912475],[0.7728232189973613]],[[-0.07859027516019523],[0.2762156049754987],[0.8023746701846963]],[[-0.10422163588390432],[0.2722955145118726],[0.8319261213720313]],[[-0.12985299660761385],[0.26837542404824644],[0.8614775725593671]],[[-0.15548435733132204],[0.2644553335846205],[0.8910290237467013]],[[-0.18111571805503157],[0.2605352431209943],[0.9205804749340372]],[[-0.20674707877874043],[0.25661515265736823],[0.9501319261213721]],[[-0.2323784395024493],[0.25269506219374205],[0.979683377308707]],[[-0.2580098002261584],[0.24877497173011598],[1.0092348284960422]],[[-0.28364116094986724],[0.24485488126649002],[1.0387862796833771]]],\"hovertemplate\":\"frontier with short sales<br>US Equity: %{customdata[0]:.1%}<br>Developed Intl: %{customdata[1]:.1%}<br>Emerging Mkt: %{customdata[2]:.1%}<br><extra></extra>\",\"line\":{\"color\":\"blue\"},\"mode\":\"lines\",\"name\":\"3-Fund Frontier with short sales\",\"x\":[0.14673600493784314,0.14600059702256735,0.1453690398466881,0.14484269187682333,0.14442270342115643,0.1441100043924805,0.1439052941962203,0.14380903399500047,0.14382144154688548,0.14394248875105545,0.14417190196513938,0.1445091650858807,0.14495352531265113,0.14550400144493275,0.14615939450334048,0.14691830041167012,0.14777912443677188,0.1487400970549589,0.14979929089856459,0.1509546384338073,0.1522039500302956,0.15354493210178735,0.15497520502530315,0.15649232057932283,0.15809377867943714,0.15977704322949116,0.16153955694612088,0.16337875505313992,0.1652920777782568,0.16727698161721835,0.16933094935910453,0.17145149889084835,0.17363619081906875,0.17588263496311404,0.17818849578509421,0.18055149683100266,0.1829694242622278,0.18544012955927622,0.18796153147983696,0.19053161735183172,0.1931484437792302,0.19581013683450252,0.19851489180696053,0.20126097257115313,0.20404671063415386,0.20687050391518938,0.20973081530572732,0.21262617105300174,0.2155551590050448,0.2185164267507009],\"y\":[0.054,0.05457142857142857,0.05514285714285714,0.055714285714285716,0.056285714285714286,0.056857142857142856,0.057428571428571426,0.057999999999999996,0.058571428571428566,0.05914285714285714,0.05971428571428571,0.06028571428571428,0.06085714285714285,0.06142857142857143,0.062,0.06257142857142857,0.06314285714285714,0.06371428571428571,0.06428571428571428,0.06485714285714285,0.06542857142857142,0.066,0.06657142857142856,0.06714285714285714,0.06771428571428571,0.06828571428571428,0.06885714285714285,0.06942857142857142,0.06999999999999999,0.07057142857142856,0.07114285714285713,0.0717142857142857,0.07228571428571429,0.07285714285714284,0.07342857142857143,0.074,0.07457142857142857,0.07514285714285714,0.0757142857142857,0.07628571428571428,0.07685714285714285,0.07742857142857142,0.07799999999999999,0.07857142857142857,0.07914285714285713,0.07971428571428571,0.08028571428571428,0.08085714285714285,0.08142857142857142,0.08199999999999999],\"type\":\"scatter\"},{\"hovertemplate\":\"GMV portfolio with short sales <br>US Equity: 78.3%<br>Developed Intl: 40.8%<br>Emerging Mkt: -19.1%<br><extra></extra>\",\"marker\":{\"color\":\"blue\",\"size\":15},\"mode\":\"markers\",\"name\":\"GMV Portfolio with Short Sales\",\"x\":[0.14380094206054422],\"y\":[0.0582204861111111],\"type\":\"scatter\"},{\"hovertemplate\":\"%{text}<extra></extra>\",\"marker\":{\"color\":\"red\",\"size\":15},\"mode\":\"markers\",\"name\":\"Underlying Assets\",\"text\":[\"US Equity\",\"Developed Intl\",\"Emerging Mkt\"],\"x\":[0.15,0.165,0.21],\"y\":[0.06,0.065,0.08],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"title\":{\"text\":\"Standard Deviation\"},\"tickformat\":\".1%\"},\"yaxis\":{\"title\":{\"text\":\"Expected Return\"},\"tickformat\":\".1%\"},\"legend\":{\"yanchor\":\"top\",\"y\":0.99,\"xanchor\":\"left\",\"x\":0.01}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('b7ad7622-b158-4bb7-b775-29e6be7c4828');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n\nShort-Selling and the Frontier\n:::\n:::\n\n\nThe frontier with short-selling coincides with the frontier without short-selling for many expected return values, but shorting allows an investor to reach expected returns values below the minimum expected returns of the assets (the US equity portfolio) and above the maximum expected return of the underlying assets (the emerging market portfolio).  These portfolios entail shorting the emerging market fund or the US equity fund, respectively.  \n\nWithin the set of expected returns possible without shorting, lower risk portfolios are possible with shorting for expected returns close to the US market fund's expected return and close to the emerging market fund's expected return.  Thus, short-selling may provide additional diversification benefits relative to those available to a short-sale-constrained investor.\n\n### GMV and Frontier Portfolios {-}\n\nShort-sale constraints are an set of additional constraints to the optimization problems for the GMV portfolio and frontier portfolios considered in @eq-frontier and @eq-cal.\n\nWith short-sale constraints, the GMV portfolio is the set of *non-negative* portfolio weights that minimizes portfolio variance:\n\n$$ \\underset{w_1,w_2,\\dots,w_N}{\\text{min}} \\text{var}[r_p]$$ \n\nsubject to the constraints $\\sum_i w_i=1$ and $w_i \\ge 0$ for all assets $i$.\n\n::: {.callout-tip collapse=\"true\"}\n\n## GMV with Short-Sale Constraints\nMinimizing variance is a quadratic programming problem that can be solved numerically using constrained optimization in Python using the CVXOPT package.  The CVXOPT user guide is available <a href=\"https://cvxopt.org/userguide/index.html\"> here </a>.\n\nThe function `cvxopt.solvers.qp` solves problems of the general form:\n\\begin{align}\n    \\underset{w}{\\text{min  }}& \\frac{1}{2} w' Q w + p'x \\\\\n     \\text{subject to  } & Gw \\le h \\\\\n                        & Aw = b \\\\\n\\end{align}\n\nThe optimizer is solving for a $N \\times 1$ vector of portfolio weights, $w$ that minimizes the objective function. To minimize variance, we set $Q$ equal to the $N \\times N$ covariance matrix of returns and $p$ equal to a $N \\times 1$ vector of zeros.  \n\nThe constraint $Gw \\le h$ is used to put position limits on the portfolio weights.  Short-selling constraints are the most common such constraint.  These are accomplished by setting $G$ equal to the negative of the $N \\times N$ identity matrix (that is, a matrix with -1s on the diagonal and zero elsewhere), and $h$ equal to a $N \\times 1$ vector of zeros.  Additional position limits could be enforced by adding rows to $G$ and $h$.  For instance, many funds have maximum position limits in addition to short-sale constraints.\n\nThe constraint $Aw=b$ usually includes the constraint that the portfolio is fulling invested; that is, the portfolio weights sum to 100%.  This is accomplished by setting $A$ equal to a $N \\times 1$ vector of ones and setting $b=1$.  $A$ and $b$ can include additional rows for other constraints.  For instance, setting a target expected return is accomplished by adding a row to $A$ with the asset mean vector and adding a row to $b$ with the target expected return.  This is done when solving for a particular point on the mean-variance frontier.\n\n``` p\nimport numpy as np\nfrom cvxopt import matrix\nfrom cvxopt.solvers import qp as Solver, options as SolverOptions\n\n##### Inputs\n# Risk-free rate\nr = 0.02\n# Expected returns\nmns = np.array([0.06, 0.065, 0.08])\n# Standard deviations\nsds = np.array([0.15, 0.165, 0.21])\n# Correlations\ncorr12 = 0.75\ncorr13 = 0.75\ncorr23 = 0.75\n# Covariance matrix\nC  = np.identity(3)\nC[0, 1] = C[1, 0] = corr12\nC[0, 2] = C[2, 0] = corr13\nC[1, 2] = C[2, 1] = corr23\ncov = np.diag(sds) @ C @ np.diag(sds)\n\n##### GMV problem with short-sale constraints\nn = len(mns)\nQ = matrix(cov, tc=\"d\")\np = matrix(np.zeros(n), (n, 1), tc=\"d\")\n# Constraint: short-sales not allowed\nG = matrix(-np.identity(n), tc=\"d\")\nh = matrix(np.zeros(n), (n, 1), tc=\"d\")\n# Constraint: fully-invested portfolio\nA = matrix(np.ones(n), (1, n), tc=\"d\")\nb = matrix([1], (1, 1), tc=\"d\")\nsol = Solver(Q, p, G, h, A, b)\nwgts_gmv = np.array(sol[\"x\"]).flatten() if sol[\"status\"] == \"optimal\" else np.array(n * [np.nan])\n\n```\nNote that the GMV without short-sale constraints can be found using numerical optimization by removing the short-sale constraint:\n``` p\nG = matrix(np.zeros((n,n)), tc=\"d\")\n```\n\n:::\n\n\nSimilarly, a frontier portfolio with expected return $\\mu_{\\text{target}}$ is defined by the *non-negative* portfolio weights that solve the following constrained optimization problem:\n\n$$ \\underset{w_1,w_2,\\dots,w_N}{\\text{min}} \\text{var}[r_p]$$ \n\nsubject to constraints: $\\sum_i w_i E[r_i]=E[r_{\\text{target}}]$, $\\sum_i w_i=1$ and $w_i \\ge 0$ for all assets $i$.\n\n\n::: {.callout-tip collapse=\"true\"}\n\n## Frontier with Short-Sale Constraints\nRelative to the GMV problem, the frontier problem contains an additional constraint of the form $Aw=b$ in addition to the usual constraint that the portfolio is fulling invested.  Setting a target expected return is accomplished by adding a row to $A$ with the asset mean vector and adding a row to $b$ with the target expected return.  \n\n``` p\nimport numpy as np\nfrom cvxopt import matrix\nfrom cvxopt.solvers import qp as Solver, options as SolverOptions\n\n##### Inputs\n# Risk-free rate\nr = 0.02\n# Expected returns\nmns = np.array([0.06, 0.065, 0.08])\n# Standard deviations\nsds = np.array([0.15, 0.165, 0.21])\n# Correlations\ncorr12 = 0.75\ncorr13 = 0.75\ncorr23 = 0.75\n# Covariance matrix\nC  = np.identity(3)\nC[0, 1] = C[1, 0] = corr12\nC[0, 2] = C[2, 0] = corr13\nC[1, 2] = C[2, 1] = corr23\ncov = np.diag(sds) @ C @ np.diag(sds)\n\n##### Frontier problem with short-sale constraints\ndef frontier(means, cov, target):\n    n = len(means)\n    Q = matrix(cov, tc=\"d\")\n    p = matrix(np.zeros(n), (n, 1), tc=\"d\")\n    # Constraint: short-sales not allowed\n    G = matrix(-np.identity(n), tc=\"d\")\n    h = matrix(np.zeros(n), (n, 1), tc=\"d\")\n    # Fully-invested constraint\n    A = matrix(np.vstack((np.ones(n), means)), (2, n), tc=\"d\")\n    b = matrix([1, target], (2, 1), tc=\"d\")\n    sol = Solver(Q, p, G, h, A, b)\n    wgts = np.array(sol[\"x\"]).flatten() if sol[\"status\"] == \"optimal\" else np.array(n * [np.nan])\n    return wgts\nwgts_frontier = [frontier(mns, cov, m) for m in np.linspace(mns.min(), mns.max(),5)]\n\n```\nNote that the frontier portfolios without short-sale constraints can be found using numerical optimization by removing the short-sale constraint:\n``` p\nG = matrix(np.zeros((n,n)), tc=\"d\")\n```\n\n:::\n\n\n\n\n### Tangency Portfolio {-}\n\nFor a single risk-free rate, the tangency portfolio with short-sale constraints is the set of *non-negative* portfolio weights that maximizes the Sharpe ratio:\n\n$$ \\underset{w_1,w_2,\\dots,w_N}{\\text{max}} \\frac{E[r_p] - r_f}{\\text{sd}[r_p]} $$ \n\nsubject to the constraints $\\sum_i w_i=1$ and $w_i \\ge 0$ for all assets $i$.\n\n\n::: {.callout-tip collapse=\"true\"}\n\n## Tangency Portfolio with Short-Sale Constraints\nThe optimizer is solving for a $N \\times 1$ vector of portfolio weights, $w$ that minimizes the objective function.  The `minimize` package in `scipy.optimize` solves multivariate constrained optimization problems.  Short-sale constraints are passed to the optimizer as a list of lower and/or upper limits on each portfolio weight. \n``` p\nimport numpy as np\nfrom scipy.optimize import minimize\n\n##### Inputs\n# Risk-free rate\nr = 0.02\n# Expected returns\nmns = np.array([0.10, 0.05, 0.07])\n# Standard deviations\nsds = np.array([0.20, 0.12, 0.15])\n# Correlations\ncorr12 = 0.3\ncorr13 = 0.3\ncorr23 = 0.3\n# Covariance matrix\nC  = np.identity(3)\nC[0, 1] = C[1, 0] = corr12\nC[0, 2] = C[2, 0] = corr13\nC[1, 2] = C[2, 1] = corr23\ncov = np.diag(sds) @ C @ np.diag(sds)\n\n##### Tangency Portfolio\nn = len(mns)\ndef f(w):\n    mn = w @ mns\n    sd = np.sqrt(w @ cov @ w)\n    return -(mn - r) / sd\n# Initial guess (equal-weighted)\nw0 = (1/n)*np.ones(n)\n# Constraint: fully-invested portfolio\nA = np.ones(n)\nb = 1\ncons = [{\"type\": \"eq\", \"fun\": lambda x: A @ x - b}]\n# Short-sale constraint\nbnds = [(0, None) for i in range(n)] \n# Optimization\nwgts_tangency = minimize(f, w0, bounds=bnds, constraints=cons).x\n\n```\nNote that the tangency portfolio without short-sale constraints can be found using numerical optimization by removing the short-sale constraint:\n``` p\nbnds = [(None, None) for i in range(n)] \n```\n:::\n\n",
    "supporting": [
      "portfolios_frictions_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.14.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        \n"
      ]
    }
  }
}