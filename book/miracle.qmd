

# Miracle of Compound Interest

If an investment account earns a steady rate of return and funds are not withdrawn from the account, then the account balance will grow exponentially.  This is sometimes called the "miracle of compound interest."  @fig-miracle-exponential shows the growth of an investment account earning 8% per year, which is what the U.S. stock market earned in real terms over the thirty year period 1992-2021.  Each dollar grows to $10 (actually $10.06) over a 30 year period at an 8% annual return.  The exponential nature of the growth can be seen from the figure.  Hover over the plot to see the exact values.

```{python}
#| label: fig-miracle-exponential
#| fig-cap: "Growth of an Investment Account"


import plotly.graph_objects as go
import numpy as np

trace1= go.Scatter(
    x=np.arange(31), 
    y=1.08**np.arange(31),
    mode="lines",
    name="8%"
)

trace2 = go.Scatter(
    x=np.arange(31), 
    y=1.04**np.arange(31),
    mode="lines",
    name="4%"
)

fig = go.Figure()
fig.layout.template = "none"
fig.add_trace(trace1)
fig.add_trace(trace2)
fig.update_traces(
    hovertemplate="""
    Year %{x}<br>
    $%{y:.2f}<extra></extra>
    """
)
fig.layout.xaxis["title"] = "Year"
fig.layout.yaxis["title"] = "Account Balance"
fig.update_layout(
    yaxis_tickprefix="$", 
    yaxis_tickformat=",.0f",
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="left", 
        x=0.01
        )
)
fig.show()
```

Investments grow exponentially because they earn returns each year not just on the starting balance but also on all prior returns.  Exponential growth is much better than linear growth.  By "linear growth," we mean that doubling the investment period would double the account growth.  Exponential is much better than that.  As can be seen from the figure, $1 would grow to slightly more than $3 in 15 years at 8% per year, so the growth in value is slightly more than $2.  Doubling the investment horizon to 30 years increases the growth to $9 (from $1 to $10), so the growth in value is more than four times larger when the horizon doubles, with an 8% return.   Because of exponential growth, it is incredibly important to invest early and to refrain from borrowing whenever possible (unless the borrowing finances the purchase of long-term assets).

Exponential growth also means that the rate of return one earns is extremely important.  For example, one might think that earning 8% is twice as good as earning 4%, but that is an understatement.  Over a 30 year period, earning 8% is more than four times as good as earning 4%---a dollar grows by $9 to $10 over 30 years at 8%, but it grows by less than $2.25 at 4%.

The values in @fig-miracle-exponential are calculated from the following logic.  $1 invested for 1 year at 8% grows to $1.08.  After another year at 8%, we have 
\begin{align*}
1.08 + (0.08 \times 1.08) &= (1.08 \times 1) + (1.08 \times 0.08)\\ &  = 1.08 \times 1.08 \\ &= 1.08^2
\end{align*}
Continuing with this logic, we can see that after $n$ years, we have $1.08^n$.  Thus, the number of years is the exponent of the factor 1.08, which is the definition of exponential growth.

As remarked above, the exponential growth is due to earning returns on top of returns or "interest on interest."  After two years at 8%, we have
$$1.08^2 = 1 + 0.08 + 0.08 + (0.08\times 0.08).$$  Linear growth would be just adding up the returns $0.08 + 0.08$.  Exponential growth is due to the "interest on interest" term $0.08 \times 0.08.$  This is a small number when there are only two years, but these terms add up to a very large number over many years.  They are responsible for the growth in the investment account quadrupling (from $2.17 to $9.06) when the investment horizon is doubled (from 15 to 30 years) with 8% returns.

## Future values and present values

We call $1.08^n$ the future value of $1 for an $n$-year horizon and 8\% returns.  We can write this more generally as $(1+r)^n$, where $r$ is the rate of return (0.08 in our example).  The future value $(1+r)^n$ is what \\$1 grows to in $n$ years when the rate of return is $r$.  

We also call $1 the present value of $(1+r)^n$.  It is how much you need to invest to reach $(1+r)^n$ in $n$ years when the rate of return is $r$.  More generally, we call [$x$ the present value of $y$]{style="color: Tomato;"}, and we call [$y$ the future value of $x$]{style="color: Tomato;"} when $x$ and $y$ are related as 
$$y=x(1+r)^n,$$ because $x$ will grow to $y$ in $n$ years when the rate of return is $r$.  We compute the future value $y$ from the present value $x$ by mutliplying $x$ by $(1+r)^n$, so we call $(1+r)^n$ the [future value factor]{style="color: Tomato;"}.  Because the relation $y=x(1+r)^n$ is equivalent to 
$$x = \frac{y}{(1+r)^n},$$
we can also compute the present value $x$ from the future value $y$ by dividing by $(1+r)^n$ or, equivalently, by multiplying by $1/(1+r)^n$.  Consequently, we call $1/(1+r)^n$ the [present value factor]{style="color: Tomato;"} (or discount factor).  The operation of multiplying by the present value factor is called discounting, and the operation of multiplying by the future value factor is called compounding.  We also call the rate of return $r$ the discount rate.

To see why we should multiply the present value $x$ by the future value factor to obtain the future value, consider a concrete example, say $x=10$.  We can think of an investment account starting with $x=10$ as the sum of 10 hypothetical separate accounts, each starting with $1.  We saw earlier that $1 will grow to $(1+r)^n$ dollars in $n$ years when the rate of return is $r$.  At the end of the $n$ years, we can hypothetically consolidate the separate accounts, having a total of 10 times $(1+r)^n$; in other words, $x(1+r)^n$.

The values in  @fig-miracle-exponential are future value factors at 4% and 8%, for various $n$.   @fig-miracle-pvfactors presents the analogous present value factors.  Present value factors are smaller the further out in the future we look, and they are smaller when the discount rate is larger.

```{python}
#| label: fig-miracle-pvfactors
#| fig-cap: "Present Value Factors"


import plotly.graph_objects as go
import numpy as np

trace1= go.Scatter(
    x=np.arange(31), 
    y=1.08**(-np.arange(31)),
    mode="lines",
    name="8%"
)

trace2 = go.Scatter(
    x=np.arange(31), 
    y=1.04**(-np.arange(31)),
    mode="lines",
    name="4%"
)

fig = go.Figure()
fig.layout.template = "none"
fig.add_trace(trace1)
fig.add_trace(trace2)
fig.update_traces(
    hovertemplate="""
    Year %{x}<br>
    $%{y:.2f}<extra></extra>
    """
)
fig.layout.xaxis["title"] = "Year"
fig.layout.yaxis["title"] = "Present Value Factor"
fig.update_layout(
    yaxis_tickformat=".0%",
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="right", 
        x=0.99
        )
)
fig.show()
```

::: callout-tip
## Python tip

The numpy arange function is very useful for creating sequences (arrays) of future value and present value factors.  
``` p
import numpy as np
n = 30
r = 0.08
fvFactors = (1+r)**np.arange(1, n+1)
pvFactors = (1+r)**np.arange(-1, -n-1, -1)
```
:::

## Multiple cash flows

Suppose we have some money $x_0$ to invest today, will have a possibly different amount $x_1$ to invest in one year, an amount $x_2$ to invest two years from now and so on for $m$ years, and we have an investment horizon of $n\ge m$ years.  How much will we have in $n$ years if we earn a return $r$ each year?  In other words, what is the total future value of the sequence of investments $x_0, \ldots, x_m$?

We can answer this question by treating our investment account as $m+1$ hypothetical separate accounts.  In the first account, we deposit $x_0$ today and it grows for $n$ years to $x_0(1+r)^n$.  In the second account, we deposit $x_1$ in one year and it grows for $n-1$ years to $x_1(1+r)^{n-1}$.  We can continue this through year $m$, and at the end of $n$ years, we can hypothetically consolidate the various accounts, producing a total future value of
$$x_0(1+r)^n + x_1(1+r)^{n-1} + x_2(1+r)^{n-2} + \cdots + 
x_m(1+r)^{n-m}.$$


::: callout-tip
## Python tip

We can calculate the total future value by summing the product of two arrays as in the following example.  
``` p
import numpy as np
n = 10
m = 4
r = 0.08
x0, x1, x2, x3, x4 = 100, 120, 130, 140, 150
x = np.array([x0, x1, x2, x3, x4])
fvFactors = (1+r)**np.arange(n, n-m-1, -1)
total = np.sum(x*fvFactors)
```
:::

Now, we ask the opposite question.  Suppose we want to spend some amount $y_1$ in one year, a possibly different amount $y_2$ in two years, and continuing for $m$ years.  If we want to finance all of these expenditures from a current investment account, how much do we need to have in the account now, assuming we always earn a return $r$ on the remaining balance?  The answer is that we need to have the total present value of the future values $y_1, y_2, \ldots, y_m$; that is, we need
$$\frac{y_1}{1+r} + \frac{y_2}{(1+r)^2} + \cdots + \frac{y_m}{(1+r)^m}.$$

::: callout-tip
## Python tip

Like a future value, we can compute the total present value by summing the product of two arrays, as in the following example.  
``` p
import numpy as np
m = 4
r = 0.08
y1, y2, y3, y4 = 100, 120, 130, 140, 150
y = np.array([y1, y2, y3, y4])
pvFactors = (1+r)**np.arange(-1, -m-1, -1)
total = np.sum(y*pvFactors)
```
:::

An important application of the present value calculation is the valuation of investment projects by companies.  A typical project involves cash outlays in early years, to purchase plant and equipment and to build up working capital, and then an inflow of cash in later years when revenues outstrip expenses.  The essential question is whether the positive later cash flows are large enough to offset the negative early cash flows.  To make cash flows at different dates comparable, we compute their present values.  We add up the present values of the various cash flows, with early ones being negative and later ones being positive and ask whether the sum is positive.  This sum of positive and negative present values is called the 
[net present value]{style="color: Tomato;"}.  Projects with positive net present values are good projects.

## Retirement planning


::: callout-note
## A title for a note
This is a highlighted block of text.
:::


::: callout-important
## A title for something important
Something important goes here
:::

::: callout-warning
## A title for a warning

Some warning goes here
:::

::: callout
## A simple title

Anything could go here
::: 

``` p
# this is a displayed code block

import numpy as np
x = np.arange(4)
```



