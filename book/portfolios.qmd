# Risk and Return of Portfolios
```{python}
#| echo: false
#| execute: true
import numpy as np
from cvxopt import matrix
from cvxopt.solvers import qp as Solver, options as SolverOptions
from scipy.optimize import minimize_scalar

SolverOptions["show_progress"] = False

class portfolio:
    def __init__(self, means, cov, Shorts):
        self.means = np.array(means)
        self.cov = np.array(cov)
        self.Shorts = Shorts
        self.n = len(means)
        if Shorts:
            w = np.linalg.solve(cov, np.ones(self.n))
            self.GMV = w / np.sum(w)
            w = np.linalg.solve(cov, means)
            self.piMu = w / np.sum(w)
        else:
            n = self.n
            Q = matrix(cov, tc="d")
            p = matrix(np.zeros(n), (n, 1), tc="d")
            G = matrix(-np.identity(n), tc="d")
            h = matrix(np.zeros(n), (n, 1), tc="d")
            A = matrix(np.ones(n), (1, n), tc="d")
            b = matrix([1], (1, 1), tc="d")
            sol = Solver(Q, p, G, h, A, b)
            self.GMV = np.array(sol["x"]).flatten() if sol["status"] == "optimal" else np.array(n * [np.nan])

    def frontier(self, m):
        if self.Shorts:
            gmv = self.GMV
            piMu = self.piMu
            m1 = gmv @ self.means
            m2 = piMu @ self.means
            a = (m - m2) / (m1 - m2)
            return a * gmv + (1 - a) * piMu
        else:
            n = self.n
            Q = matrix(self.cov, tc="d")
            p = matrix(np.zeros(n), (n, 1), tc="d")
            G = matrix(-np.identity(n), tc="d")
            h = matrix(np.zeros(n), (n, 1), tc="d")
            A = matrix(np.vstack((np.ones(n), self.means)), (2, n), tc="d")
            b = matrix([1, m], (2, 1), tc="d")
            sol = Solver(Q, p, G, h, A, b)
            return np.array(sol["x"]).flatten() if sol["status"] == "optimal" else np.array(n * [np.nan])

    def tangency(self, r):
        if self.Shorts:
            w = np.linalg.solve(self.cov, self.means - r)
            return w / np.sum(w)
        else:
            def f(m):
                w = self.frontier(m)
                mn = w @ self.means
                sd = np.sqrt(w.T @ self.cov @ w)
                return - (mn - r) / sd
            m = minimize_scalar(f, bounds=[max(r, np.min(self.means)), max(r, np.max(self.means))], method="bounded").x
            return self.frontier(m)

    def optimal(self, raver, rs=None, rb=None):
        n = self.n
        if self.Shorts:
            if (rs or rs==0) and (rb or rb==0):
                Q = np.zeros((n + 2, n + 2))
                Q[2:, 2:] = raver * self.cov
                Q = matrix(Q, tc="d")
                p = np.array([-rs, rb] + list(-self.means))
                p = matrix(p, (n + 2, 1), tc="d")
                G = np.zeros((2, n + 2))
                G[0, 0] = G[1, 1] = -1
                G = matrix(G, (2, n+2), tc="d")
                h = matrix([0, 0], (2, 1), tc="d")
                A = matrix([1, -1] + n*[1], (1, n+2), tc="d")
                b = matrix([1], (1, 1), tc="d")
                sol = Solver(Q, p, G, h, A, b)
                return np.array(sol["x"]).flatten()[2:] if sol["status"] == "optimal" else None
            else:
                w = np.linalg.solve(self.cov, self.means)
                a = np.sum(w)
                return (a/raver)*self.piMu + (1-a/raver)*self.GMV
        else:
           if (rs or rs==0) and (rb or rb==0):
                Q = np.zeros((n + 2, n + 2))
                Q[2:, 2:] = raver * self.cov
                Q = matrix(Q, tc="d")
                p = np.array([-rs, rb] + list(-self.means))
                p = matrix(p, (n+2, 1), tc="d")
                G = matrix(-np.identity(n + 2), tc="d")
                h = matrix(np.zeros(n+2), (n+2, 1), tc="d")
                A = matrix([1, -1] + n * [1], (1, n+2), tc="d")
                b = matrix([1], (1, 1), tc="d")
                sol = Solver(Q, p, G, h, A, b)
                return np.array(sol["x"]).flatten()[2:] if sol["status"] == "optimal" else None
           else:
                Q = matrix(raver * self.cov, tc="d")
                p = matrix(-self.means, (n, 1), tc="d")
                G = matrix(-np.identity(n), tc="d")
                h = matrix(np.zeros(n), (n, 1), tc="d")
                A = matrix(np.ones(n), (1, n), tc="d")
                b = matrix([1], (1, 1), tc="d")
                sol = Solver(Q, p, G, h, A, b)
                return np.array(sol["x"]).flatten() if sol["status"] == "optimal" else None
```

Porfolios are combinations of underlying assets.  In this chapter, we will explore the risk and return of portfolios and how we can form optimal portfolios.  Our discussion will focus on the expected return and standard deviation of portfolio.  

## Portfolio Statistics

We will calculate portfolio statistics as a function of the portfolio statistics of underlying assets (which themselves may be portfolios).  Assume that the distribution of each asset's return is known.  The return of asset $i$ has an expected value $E[r_i]$.  Assuming that the asset is risky, there is also some dispersion in potential realizations of the return above or below the mean.  The variance $\text{var}[r_i]$ is the expected squared deviations of the possible deviations from the asset's expected value: $E\big[(r_i-E[r_i])^2\big]$.  The standard deviation $\text{sd}[r_p]$ is simply the square root of the portfolio variance.  


When measuring comovement across assets, we will use either the covariance, an absolute measure of comovement, or correlation, which is scaled by the product of each asset's standard deviations.  Recall that the covariance of two assets measures the expected value of the product of each asset's return deviation from its expected value:
$$ \text{cov}[r_i,r_j] = E\big[(r_i-E[r_i])(r_j-E[r_j])\big]\\,. $$ {#eq-cov-defn}
If return $i$ and $j$ both tend to have return realizations either above or below their expected values in the same underlying states of the world, then their covariance will be positive and the returns are said to comove.  Alternatively, if one asset tends to have realizations above its expected value in states of the world when the other asset has return realizations below its expected value, their covariance will be negative.  Comovement is also commonly measured using correlation:
$$ \text{corr}[r_i,r_j] = \rho_{ij} = \frac{\text{cov}[r_i,r_j]}{\text{sd}[r_i]\cdot\text{sd}[r_j]}\,.$$ {#eq-corr-defn}
Correlations range between -1 (perfectly negatively correlated) and 1 (perfectly correlated).  Covariances, on the other hand, can take any values.

### Two-Asset Portfolios {-}

The return of a two-asset portfolio is the weighted sum of the returns of the underlying assets:
$$ r_p = w_1 r_1 + w_2 r_2\,, $$ {#eq-2asset-return}
where $w_1$ and $w_2$ are the portfolio weights.  Unless otherwise stated, we will assume that portfolios are fully invested; that is, that the sum of the weights equal 1.  What is the expected return and riskiness of the portfolio of the two assets?  The expected return is simply the weighted average of each assets expected return:
$$ E[r_p] = w_1 E[r_1] + w_2 E[r_2]\,. $$ {#eq-2asset-expret}
The riskiness of the portfolio return can be measured by its variance, which measures the expected (squared) magnitude of deviations in the portfolio return from its expected value.  Specifically, the portfolio variance is:
$$
\begin{align}
\text{var}[r_p] =& E\big[(r_p-E[r_p])^2\big] \\
=& E\big[( w_1 r_1 + w_2 r_2-w_1 E[r_1] - w_2 E[r_2])^2\big] \\
=& E\big[( w_1 (r_1 - E[r_1])+ w_2 (r_2-E[r_2]))^2\big] \\
=& E\big[(w_1^2(r_1 - E[r_1]))^2 + w_2^2(r_2-E[r_2])^2 + 2 w_1 w_2 (r_1 - E[r_1])(r_2-E[r_2])\big] \\
=& w_1^2 \text{var}[r_1] + w_2^2\text{var}[r_2]  + 2 w_1 w_2 \text{cov}[r_1,r_2]\,.
\end{align}
$$ {#eq-2asset-variance}

### Portfolios of N Assets

The return of a portfolio combining $N$ assets is simply the weighted average of the underlying asset returns:
$$ r_p = \sum_{i=1}^{N} w_i r_i\,, $$ {#eq-n-asset-return}
where the weights $\{w_i\}_{i=1}^N$ are the fractions of capital invested in each asset.  The expected return of the portfolio is  the weighted sum of the expected returns of each asset:
$$ E[r_p] = \sum_{i=1}^{N} w_i E[r_i]\,.$$ {#eq-n-asset-expret}

:::  {.callout-tip collapse="true"}
## Calculating Portfolio Returns in Python^[In Excel, given arrays of expected returns and portfolio weights, the portfolio expected return can be calculated using the SUMPRODUCT command.]

Given an array of returns (either expected or realized returns) and an array of weights, the portfolio return can be calculated using matrix multiplication in numpy.  Note the inputs below are decimal notation.  Multiply by 100 to get percents!  
``` p
import numpy as np

# Expected returns
mns = np.array([0.10, 0.05, 0.07])

# Portfolio weights
wgts = np.array([0.25, 0.5, 0.25])

#Portfolio expected return
port_expret = wgts.T @ mns
```
:::


The riskiness of the portfolio, as measured by the portfolio variance, is:
$$
\begin{align}
\text{var}[r_p] =& E\bigg[(r_p-E[r_p])^2\bigg] \\
=& E\bigg[\left( \sum_{i=1}^{N} w_i r_i - \sum_{i=1}^{N} w_i E[r_i]\right)^2\bigg] \\
=& E\bigg[\left( \sum_{i=1}^{N} w_i (r_i - E[r_i]) \right)^2\bigg] \\
=& E\bigg[\sum_{i=1}^{N} w_i^2 (r_i - E[r_i])^2 + 2 \sum_{i=1}^{N} \sum_{j>i} w_i w_j (r_i - E[r_i])(r_j-E[r_j])\bigg] \\
=& \sum_{i=1}^{N} w_i^2 \text{var}[r_i] + 2 \sum_{i=1}^{N} \sum_{j>i} w_i w_j \text{cov}[r_i,r_j]\,.
\end{align}
$$ {#eq-n-asset-variance}


Calculating each term in the last line of @eq-n-asset-variance and adding them up can quickly become tedious.  Given a covariance matrix $V$:
\begin{equation*}
    V = 
    \begin{bmatrix}
        \text{var}[r_1]     & \text{cov}[r_1,r_2] & \dots  & \text{cov}[r_1,r_N] \\
        \text{cov}[r_2,r_1] & \text{var}[r_2]     & \dots  & \text{cov}[r_2,r_N] \\
        \vdots              & \vdots              & \ddots &  \vdots \\
        \text{cov}[r_N,r_1] & \text{cov}[r_N,r_2] & \dots  & \text{var}[r_N] \\
    \end{bmatrix}
\end{equation*}
and a vector of portfolio weights 
$$w'=[w_1\, w_2\,...\,w_N]\,,$$
we can calculate the portfolio variance as the matrix product
$$ \text{var}[r_p] = w'Vw \,.$$ {#eq-mmult-portvar}

:::  {.callout-tip collapse="true"}
## Calculating Portfolio Risk in Python^[In Excel, portfolio variance can be calculated with the command MMULT(TRANSPOSE(w),MMULT(V,w)) where w is a column of portfolio weights and V is the covariance matrix.]

Given an array of weights, calculating the portfolio variance in python is easy using matrix multiplication in numpy.  Note the inputs below are decimal notation.  Multiply the standard deviations and correlations by 100 to get percents!  Two methods for creating a covariance matrix are demonstrated.  The first demonstrates entry element-by-element, and the second more elegantly (and concisely!) uses matrix multiplication using the array of standard deviations and the correlation matrix.
``` p
import numpy as np

##### Inputs
# Standard deviations
sds = np.array([0.20, 0.12, 0.15])

# Correlations
corr12 = 0.3
corr13 = 0.3
corr23 = 0.3

# Portfolio weights
wgts = np.array([0.25, 0.5, 0.25])

##### Method 1 to calculate covariance matrix
# Covariances
cov12 = corr12 * sds[0] * sds[1]
cov13 = corr13 * sds[0] * sds[2]
cov23 = corr23 * sds[1] * sds[2]
# Covariance matrix
cov = np.array([[sds[0]**2,  cov12,     cov13], \
                [cov12,      sds[1]**2, cov23], \
                [cov13,      cov23,     sds[2]**2]])

##### Method 2 to calculate covariance matrix
# Correlation matrix
C  = np.identity(3)
C[0, 1] = C[1, 0] = corr12
C[0, 2] = C[2, 0] = corr13
C[1, 2] = C[2, 1] = corr23
# Covariance matrix
cov = np.diag(sds) @ C @ np.diag(sds)

##### Portfolio risk measures
#Portfolio variance
port_var = wgts @ cov @ wgts

#Portfolio standard deviation
port_sd  = np.sqrt(port_var)
```
:::


## Diversification  {#sec-diversification}

Diversification is a foundational concept in forming portfolios.  We will discuss the benefits of diversification repeatedly throughout this chapter. In the sections below, we will discuss diversification in the context of portfolios of two, three, or many risky assets.  We discuss a special portfolio which offers the lowest risk possible by combining a set of risky assets.  Finally, short-selling securities may allow for even greater diversification benefits.

### Portfolios of Two Risky Assets {#sec-two-risky}

 Consider forming a portfolio of two risky assets.  To fix ideas, let's consider these to be a US stock market fund and an international stock market fund.  If we invest all of our capital in some combination of these two assets, what are the expected returns and standard deviations of all the potential portfolios? Assume for now that we cannot short sell either asset; that is, the fraction invested in each must be non-negative.

For some weight $w_{\text{US}}$ in the US stock fund, the expected return of the portfolio is:
$$ E[r_p] = w_{\text{US}} E[r_{\text{US}}] + (1-w_{\text{US}}) E[r_{\text{intl}}]\,,$$
and the portfolio's variance is:
$$  \text{var}[r_p] = w_{\text{US}}^2 \text{var}[r_{\text{US}}]+ (1-w_{\text{US}})^2 \text{var}[r_{\text{intl}}]+ 2 w_{\text{US}} (1-w_{\text{US}}) \rho_{\text{US},\text{intl}}\text{sd}[r_{\text{US}}]\text{sd}[r_{\text{intl}}]\,. $$ {#eq-2asset-variance-corr}
Note that we have substituted out the covariance using the definition of correlation in @eq-corr-defn.  The correlation between US stocks and stocks from developed international economies was about 75% over the last thirty years.  @fig-two-asset plots the possible portfolios of the US and international stock funds.  The US stock market fund is dominated by a combination of the two funds.  There is a portfolio of the two funds that generates a higher expected return for the same level of risk!  This is diversification in action.

Diversification benefits are greater when the assets are less correlated.  This can be seen from visual inspection of @eq-2asset-variance-corr.  The portfolio variance is lower for lower levels of the correlation between two assets.

```{python}
#| label: fig-two-asset
#| fig-cap: Portfolios of two risky assets
import numpy as np
import pandas as pd
import plotly.graph_objects as go

#Based on French data library return series
# Asset 1: US Equity
# Asset 2: Developed International
# Asset 1: Emerging Market
mn1= 6
mn2= 6.5
sd1= 15
sd2= 16.5 
corr12 = 75 


def data(mn1, mn2, sd1, sd2, c):
    c = c / 100
    mns = [mn1, mn2]
    sds = [sd1, sd2]
    grid = np.linspace(0, 1, 101)
    ports = [np.array([w, 1 - w]) for w in grid]
    means = [p.T @ np.array(mns) for p in ports]
    df = pd.DataFrame(means)
    df.columns = ["mean"]
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    df["stdev"] = [np.sqrt(p.T @ cov @ p) for p in ports]
    df["wt1"] = grid
    df["wt2"] = 1 - df.wt1
    for col in ["mean", "stdev"]:
        df[col] = df[col] / 100
    return df


def figtbl(mn1, mn2, sd1, sd2, c,asset1_name, asset2_name):

    df = data(mn1, mn2, sd1, sd2, c)
    string0 = "Correlation = " +str(np.round(c,1)) + "%"
    trace0 = go.Scatter(
        x=df["stdev"],
        y=df["mean"],
        mode="lines",
        text=100 * df["wt1"],
        customdata=100 * df["wt2"],
        hovertemplate=string0 + "<br>"+asset1_name + ": %{text:.0f}%<br>"+asset2_name + ": %{customdata:.0f}%<extra></extra>",
        name="Frontier: " + asset1_name + " + " + asset2_name, 
        line=dict(color="red"), 
    )

    # Plot the two assets
    df = df[df.wt1.isin([0, 1])]
    df["text"] = np.where(df.wt1 == 1, asset1_name, asset2_name)
    trace1 = go.Scatter(
        x=df[df.wt1==1]["stdev"],
        y=df[df.wt1==1]["mean"],
        mode="markers",
        text=df[df.wt1==1]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=15, color="black"),
        name=asset1_name
    )
    trace2 = go.Scatter(
        x=df[df.wt1==0]["stdev"],
        y=df[df.wt1==0]["mean"],
        mode="markers",
        text=df[df.wt1==0]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=15, color="blue"),
        name=asset2_name
    )


    fig = go.Figure()
    fig.add_trace(trace0)
    fig.add_trace(trace1)
    fig.add_trace(trace2)
    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"
    fig.update_xaxes(range=[0.85 * df["stdev"].min(), 1.15 * df["stdev"].max()])
    fig.update_yaxes(range=[0.85 * df["mean"].min(), 1.15 * df["mean"].max()])
    fig.update_yaxes(tickformat=".1%")
    fig.update_xaxes(tickformat=".1%")
    fig.update_layout(legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01))
    fig.show()
figtbl(mn1,mn2,sd1,sd2,corr12,"US Equity", "Developed Intl")
```


### Three Risky Assets {#sec-three-risky}

Could we do better?  Let's consider adding another risky asset into the mix.  In addition to US and developed international stocks, assume we also have access to an emerging market equity fund.  The emerging market fund has higher expected return, but also higher risk than the other two funds.  It also has a correlation of about 75% with each of the other two funds.  

@fig-three-asset shows the investment opportunity set of investing in portfolios of these three funds.  Each of the blue dots represent a different possible combination of the three portfolios.  The lines connecting pairs of the assets show all possible portfolios of investing just in those two assets.  The diversification benefits of adding a third asset to any of the pairs of assets can be seen by the fact that many of the blue three-asset portfolios lie to the left of the two-asset frontiers.  That is, adding a third asset can produce a portfolio with the same expected return but lower portfolio risk than can be achieved with just two assets.  

For example, Consider an investor targeting a 6.5% return, the assumed expected return of the domestic international portfolio.  If the investor is restricted to hold only a single asset, they must hold the domestic international fund with risk of over 16% per year.  If an investor can hold two assets, they could lower the amount of risk by holding a portfolio of the US stock fund and the emerging market fund and reduce the portfolio risk to below 16% per year.  An additional diversification benefit is possible if the investor holds all three assets; an even lower standard deviation can be achieved for the same expected return.

@fig-two-asset above showed that we could earn a higher expected return for the same level of risk as the US stock portfolio by investing in a mix of the US and developed international stocks.  @fig-three-asset shows that an even higher expected return is possible for that same level of risk if emerging market stocks are added to the portfolio.  A portfolio of approximately 50% US stocks, 35% developed international stocks, and 15% emerging market has about the same risk as being 100% in US stocks, but has a higher expected return.


```{python}
#| label: fig-three-asset
#| fig-cap: Portfolios of three risky assets
import pandas as pd
import numpy as np
from scipy.stats import uniform
import plotly.graph_objects as go

#Based on French return series
# Asset 1: US Equity
# Asset 2: Developed International
# Asset 1: Emerging Market
mn1= 6
mn2= 6.5
mn3= 8
sd1= 15
sd2= 16.5 
sd3= 21
corr12 = 75 
corr13 = 75 
corr23 = 75 

def random_wts(num):
    w = uniform.rvs(0, 1, num)
    return w / w.sum()

ports = [random_wts(3) for i in range(3000)]
ports1 = [(0, x, 1 - x) for x in np.linspace(0, 1, 21)]
ports2 = [(x, 0, 1 - x) for x in np.linspace(0, 1, 21)]
ports3 = [(x, 1 - x, 0) for x in np.linspace(0, 1, 21)]
ports = ports + ports1 + ports2 + ports3

ports23 = ports1
ports13 = ports2
ports12 = ports3

def is_pos_def(x):
    if np.all(np.linalg.eigvals(x) > 0):
        return 'True'
    else:
        return 'False'

def data(mn1, mn2, mn3, sd1, sd2, sd3, c12, c13, c23):
    mns = pd.Series(np.array([mn1, mn2, mn3]), index=["stock1", "stock2", "stock3"])
    sds = np.array([sd1, sd2, sd3])
    C = np.diag([1.0, 1.0, 1.0])
    C[0, 1] = c12 / 100
    C[0, 2] = c13 / 100
    C[1, 0] = c12 / 100
    C[1, 2] = c23 / 100
    C[2, 0] = c13 / 100
    C[2, 1] = c23 / 100
    D = np.diag(sds / 100)
    C = D @ C @ D
    
    # Random investment opportunity set (3-asset)
    df = pd.DataFrame(
        dtype=float,
        index=range(len(ports)),
        columns=["mean", "stdev", "wt1", "wt2", "wt3"],
    )
    df["mean"] = [p @ mns / 100 for p in ports]
    df["stdev"] = [np.sqrt(p @ C @ p) for p in ports]
    df["wt1"] = [100 * p[0] for p in ports]
    df["wt2"] = [100 * p[1] for p in ports]
    df["wt3"] = [100 * p[2] for p in ports]
    df = df.sort_values(by="mean")
    
    # Dataframes of 2-asset portfolios
    df12 = pd.DataFrame(dtype=float,index=range(len(ports12)),\
                    columns=['mean','stdev','wt1','wt2','wt3'])
    df12['mean'] = [p @ mns/100 for p in ports12]
    df12['stdev'] = [np.sqrt(p @ C @ p) for p in ports12]
    df12['wt1'] = [100*p[0] for p in ports12]
    df12['wt2'] = [100*p[1] for p in ports12]
    df12['wt3'] = [100*p[2] for p in ports12]
    df12 = df12.sort_values(by='mean')

    df13 = pd.DataFrame(dtype=float,index=range(len(ports13)),\
                    columns=['mean','stdev','wt1','wt2','wt3'])
    df13['mean'] = [p @ mns/100 for p in ports13]
    df13['stdev'] = [np.sqrt(p @ C @ p) for p in ports13]
    df13['wt1'] = [100*p[0] for p in ports13]
    df13['wt2'] = [100*p[1] for p in ports13]
    df13['wt3'] = [100*p[2] for p in ports13]
    df13 = df13.sort_values(by='mean')

    df23 = pd.DataFrame(dtype=float,index=range(len(ports23)),\
                    columns=['mean','stdev','wt1','wt2','wt3'])
    df23['mean'] = [p @ mns/100 for p in ports23]
    df23['stdev'] = [np.sqrt(p @ C @ p) for p in ports23]
    df23['wt1'] = [100*p[0] for p in ports23]
    df23['wt2'] = [100*p[1] for p in ports23]
    df23['wt3'] = [100*p[2] for p in ports23]
    df23 = df23.sort_values(by='mean')   
    return df, mns / 100, sds / 100, C, df12, df13, df23


def figtbl(mn1, mn2, mn3, sd1, sd2, sd3, c12, c13, c23, asset1_name, asset2_name, asset3_name):
    df, mns, sds, C, df12, df13, df23 = data(mn1, mn2, mn3, sd1, sd2, sd3, c12, c13, c23)
    cd = np.empty(shape=(df.shape[0], 3, 1), dtype=float)
    cd[:, 0] = np.array(df.wt1).reshape(-1, 1)
    cd[:, 1] = np.array(df.wt2).reshape(-1, 1)
    cd[:, 2] = np.array(df.wt3).reshape(-1, 1)
    string =  asset1_name +": %{customdata[0]:.0f}%<br>"
    string += asset2_name +": %{customdata[1]:.0f}%<br>"
    string += asset3_name +": %{customdata[2]:.0f}%<br>"
    string += "<extra></extra>"
    trace1 = go.Scatter(
        x=df["stdev"], y=df["mean"], mode="markers", customdata=cd, hovertemplate=string, name="Random Portfolios"
    )
    trace2 = go.Scatter(
        x=sds,
        y=mns,
        mode="markers",
        text=[asset1_name,asset2_name,asset3_name],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=15, color="red"),
        name="Underlying Assets"
    )
    
    #--------------
    # 2-asset frontiers
    #--------------
    #12
    cd12 = np.empty(shape=(df12.shape[0],3,1), dtype=float)
    cd12[:,0] = np.array(df12.wt1).reshape(-1,1)
    cd12[:,1] = np.array(df12.wt2).reshape(-1,1)
    cd12[:,2] = np.array(df12.wt3).reshape(-1,1)
    string12 = asset1_name +": %{customdata[0]:.0f}%<br>"
    string12+= asset2_name +": %{customdata[1]:.0f}%<br>"
    string12+= asset3_name +": %{customdata[2]:.0f}%<br>"
    string12+= '<extra></extra>'
    trace12 = go.Scatter(x=df12['stdev'],y=df12['mean'],mode='lines',customdata=cd12,hovertemplate=string12, line=dict(color="red"), 
        name = "Frontier: " + asset1_name + " + " + asset2_name)

    #23
    cd23 = np.empty(shape=(df23.shape[0],3,1), dtype=float)
    cd23[:,0] = np.array(df23.wt1).reshape(-1,1)
    cd23[:,1] = np.array(df23.wt2).reshape(-1,1)
    cd23[:,2] = np.array(df23.wt3).reshape(-1,1)
    string23 = asset1_name +": %{customdata[0]:.0f}%<br>"
    string23+= asset2_name +": %{customdata[1]:.0f}%<br>"
    string23+= asset3_name +": %{customdata[2]:.0f}%<br>"
    string23+= '<extra></extra>'
    trace23 = go.Scatter(x=df23['stdev'],y=df23['mean'],mode='lines',customdata=cd23,hovertemplate=string23, line=dict(color="black"), 
        name = "Frontier: " + asset2_name + " + "  + asset3_name)

    #13
    cd13 = np.empty(shape=(df13.shape[0],3,1), dtype=float)
    cd13[:,0] = np.array(df13.wt1).reshape(-1,1)
    cd13[:,1] = np.array(df13.wt2).reshape(-1,1)
    cd13[:,2] = np.array(df13.wt3).reshape(-1,1)
    string13 = asset1_name +": %{customdata[0]:.0f}%<br>"
    string13+= asset2_name +": %{customdata[1]:.0f}%<br>"
    string13+= asset3_name +": %{customdata[2]:.0f}%<br>"
    string13+= '<extra></extra>'
    trace13 = go.Scatter(x=df13['stdev'],y=df13['mean'],mode='lines',customdata=cd13,hovertemplate=string13, line=dict(color="orange"), 
        name = "Frontier: " + asset1_name + " + " + asset3_name)

    fig = go.Figure()
    fig.add_trace(trace1)
    fig.add_trace(trace2)
    fig.add_trace(trace12)
    fig.add_trace(trace23)
    fig.add_trace(trace13)
    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"
    fig.update_xaxes(range=[0.85 * df["stdev"].min(), 1.15 * df["stdev"].max()])
    fig.update_yaxes(range=[0.85 * df["mean"].min(),  1.15 * df["mean"].max()])    
    fig.update_yaxes(tickformat=".1%")
    fig.update_xaxes(tickformat=".1%")
    fig.update_layout(legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01))
    fig.show()
    # return largefig(fig), is_pos_def(C)
figtbl(mn1, mn2, mn3, sd1, sd2, sd3, corr12, corr13, corr23, "US Equity", "Developed Intl", "Emerging Mkt")
```

### The Efficient Frontier {#sec-frontier}

With more than two risky assets, multiple portfolios can achieve the same expected return, but with different amounts of portfolio risk.  This was seen above in @fig-three-asset.  All else equal, investors like expected return and dislike risk, so for a given expected return level, lower levels of portfolio standard deviation are preferred.  For each level of expected return, we can find the portfolio that provides the highest possible diversification, that is, the lowest standard deviation.  The set of these minimum-variance portfolios is called the **frontier**.  The portfolio with the lowest standard deviation across all feasible expected returns is called the **global minimum variance (GMV)** portfolio.  Portfolios that lie on the frontier with expected returns above those of the GMV portfolio are said to be efficient, and this portion of the frontier is called the **efficient frontier**.

Mathematically, a frontier portfolio with expected return $\mu_{\text{target}}$ is defined by the portfolio weights that solve the following constrained optimization problem:
$$ \underset{w_1,w_2,\dots,w_N}{\text{min}} \text{var}[r_p]$$ {#eq-frontier}
subject to constraints: $E[r_p]=\mu_{\text{target}}$ and $\sum_i w_i=1$.  If short-selling is not allowed, we add an additional set of constraints: $w_i \ge 0$ for all assets.  To trace out the frontier, we solve the problem for a range of target expected returns.

The GMV portfolio is the set of portfolio weights that minimizes portfolio variance without conditioning on the portfolio expected return:
$$ \underset{w_1,w_2,\dots,w_N}{\text{min}} \text{var}[r_p]$$ {#eq-gmv}
subject to the constraints $\sum_i w_i=1$.  Again, short-sales may or may not be allowed in solving this problem.

@fig-frontier-gmv shows the frontier (without short sales) formed using the three equity funds.  The GMV portfolio is the portfolio with the lowest standard deviation on the left-hand side of the frontier.

``` {python}
#| label: fig-frontier-gmv
#| fig-cap: The Efficient Frontier and the Global Minimum Variance Portfolio
import numpy as np
import plotly.graph_objects as go

#Based on French return series
# Asset 1: US Equity
# Asset 2: Developed International
# Asset 1: Emerging Market
mn1= 6
mn2= 6.5
mn3= 8
sd1= 15
sd2= 16.5 
sd3= 21
corr12 = 75 
corr13 = 75 
corr23 = 75 

def is_pos_def(x):
    if np.all(np.linalg.eigvals(x) > 0):
        return 'True'
    else:
        return 'False'
    
def figtbl(mn1, mn2, mn3, sd1, sd2, sd3, c12, c13, c23, asset_names):
    mns = np.array((mn1, mn2, mn3)) / 100
    sds = np.array((sd1, sd2, sd3)) / 100
    corr = np.identity(3)
    corr[0,1] = corr[1,0] = c12 / 100
    corr[0,2] = corr[2,0] = c13 / 100
    corr[1,2] = corr[2,1] = c23 / 100
    cov = np.diag(sds) @ corr @ np.diag(sds)
    N = 3

    def custom(string, ports):
        cd = np.empty(shape=(len(ports), N, 1), dtype=float)
        for i in range(N):
            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)
        string += "<br>"
        for i in range(N):
            string += asset_names[i]
            string += ": %{customdata["
            string += str(i)
            string += "]:.1%}<br>"
        string += "<extra></extra>"
        return string, cd

    P = portfolio(mns, cov, False)

    mingrid = np.min(mns)
    maxgrid = np.max(mns)
    mnsFrontier = np.linspace(mingrid, maxgrid, 50)
    portsFrontier = [P.frontier(m) for m in mnsFrontier]
    sdsFrontier = [np.sqrt(w @ cov @ w) for w in portsFrontier]

    string, cd = custom('frontier', portsFrontier)
    # string, cd = custom('frontier w/o short sales', portsFrontier)
    trace1 = go.Scatter(
        x=sdsFrontier,
        y=mnsFrontier,
        mode="lines",
        customdata=cd,
        hovertemplate=string,
        line=dict(color="green"),
        name="3-Fund Frontier"
    )

    gmv = P.GMV

    string = "GMV portfolio<br>"
    for i in range(N):
        string += asset_names[i]+": " + f'{gmv[i]:.1%}' + "<br>"
    trace1a = go.Scatter(
        x=[np.sqrt(gmv @ cov @ gmv)],
        y=[gmv @ mns],
        mode="markers",
        hovertemplate=string,        
        marker=dict(size=15, color="green"),
        name="Global Minimum Variance Portfolio"
    )

    trace3 = go.Scatter(
        x=sds,
        y=mns,
        # text=[1, 2, 3],
        # hovertemplate="Asset %{text}<extra></extra>",
        text=asset_names,
        hovertemplate="%{text}<extra></extra>",
        mode="markers",
        marker=dict(size=15, color="red"),
        name="Underlying Assets"
    )
 
    fig = go.Figure()  
    for trace in (trace1, trace1a, trace3):
        fig.add_trace(trace)
    #trace1=frontier w/o short sales
    #trace1a=GMV portfolio w/o short sales
    #trace3=Assets
        
        
    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"
    # fig.update_xaxes(range=[0, 1.25 * np.max(sds)])
    # fig.update_yaxes(range=[0, 1.25 * np.max(mns)])
    fig.update_yaxes(tickformat=".1%")
    fig.update_xaxes(tickformat=".1%")
    fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.01))
    fig.show()
    # return largefig(fig), is_pos_def(cov)
figtbl(mn1, mn2, mn3, sd1, sd2, sd3, corr12, corr13, corr23, ["US Equity", "Developed Intl", "Emerging Mkt"])
```


::: {.callout-tip collapse="true"}
## Calculating the Frontier and GMV in Python

The code below relies on a Portfolio python object, which needs to be executed or imported before using this code.  See @sec-portfolio-class for details.

``` p
import numpy as np

# Expected returns
mns = np.array([0.10, 0.05, 0.07])
# Standard deviations
sds = np.array([0.20, 0.12, 0.15])
# Correlations
corr12 = 0.3
corr13 = 0.3
corr23 = 0.3
# Covariance matrix
C  = np.identity(3)
C[0, 1] = C[1, 0] = corr12
C[0, 2] = C[2, 0] = corr13
C[1, 2] = C[2, 1] = corr23
cov = np.diag(sds) @ C @ np.diag(sds)

# Define portfolios class object
AllowShorting = False
P = portfolio(mns, cov, AllowShorting)

##### Frontier Portfolios
# Set grid of expected return targets
mingrid = np.min(mns)
maxgrid = np.max(mns)
mnsFrontier = np.linspace(mingrid, maxgrid, 50)
# Calculate portfolios weights for each target expected return
portsFrontier = [P.frontier(m) for m in mnsFrontier]
# Calculate frontier standard deviations for each portfolio
sdsFrontier = [np.sqrt(w @ cov @ w) for w in portsFrontier]

##### GMV Portfolio
gmv = P.GMV
mn_gmv = gmv @ mns
sd_gmv = np.sqrt(gmv @ cov @ gmv)
```
:::


### Short-Selling {#sec-short-frontier}

Short-selling involves borrowing a security from another owner and selling it.  The short-seller then has a liability to return the security to the security lender;  this liability is equal to the security's market value.  Short-sellers hope to purchase the security later for a lower price.  Thus, they reverse the order of the investing maxim: buy low-sell high.  Short-sellers hope to sell high-buy low.  In practice, there are limitations on short selling: it may not be possible to use the proceeds from a short sale to buy other risky assets, less than full interest may be earned on the proceeds, and a fee must be paid to borrow the asset being shorted. In this section, we ignore those issues. We assume that proceeds from short sales are invested in the other risky assets. 

It may sometimes be possible to improve mean-variance efficiency by selling some assets short.  Short positions in a portfolio have negative portfolio weights ($w_i<0$).  @fig-frontier-gmv-shorting shows how the GMV portfolio and frontier changes if we allow short-selling of the three equity portfolios.  With short-selling allowed, a lower global minimum variance is possible.  This portfolio shorts emerging market equity and invests the proceeds and initial capital in a combination of US and developed international equities.

``` {python}
#| label: fig-frontier-gmv-shorting
#| fig-cap: Short-Selling and the Frontier
import numpy as np
import plotly.graph_objects as go

#Based on French return series
# Asset 1: US Equity
# Asset 2: Developed International
# Asset 1: Emerging Market
mn1= 6
mn2= 6.5
mn3= 8
sd1= 15
sd2= 16.5 
sd3= 21
corr12 = 75 
corr13 = 75 
corr23 = 75 

def is_pos_def(x):
    if np.all(np.linalg.eigvals(x) > 0):
        return 'True'
    else:
        return 'False'
    
def figtbl(mn1, mn2, mn3, sd1, sd2, sd3, c12, c13, c23, asset_names):
    mns = np.array((mn1, mn2, mn3)) / 100
    sds = np.array((sd1, sd2, sd3)) / 100
    corr = np.identity(3)
    corr[0,1] = corr[1,0] = c12 / 100
    corr[0,2] = corr[2,0] = c13 / 100
    corr[1,2] = corr[2,1] = c23 / 100
    cov = np.diag(sds) @ corr @ np.diag(sds)
    N = 3

    def custom(string, ports):
        cd = np.empty(shape=(len(ports), N, 1), dtype=float)
        for i in range(N):
            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)
        string += "<br>"
        for i in range(N):
            string += asset_names[i]
            string += ": %{customdata["
            string += str(i)
            string += "]:.1%}<br>"
        string += "<extra></extra>"
        return string, cd


    # No short-sales
    P = portfolio(mns, cov, False)

    mingrid = np.min(mns)
    maxgrid = np.max(mns)
    mnsFrontier = np.linspace(mingrid, maxgrid, 50)
    portsFrontier = [P.frontier(m) for m in mnsFrontier]
    sdsFrontier = [np.sqrt(w @ cov @ w) for w in portsFrontier]

    # string, cd = custom('frontier', portsFrontier)
    string, cd = custom('frontier w/o short sales', portsFrontier)
    trace1 = go.Scatter(
        x=sdsFrontier,
        y=mnsFrontier,
        mode="lines",
        customdata=cd,
        hovertemplate=string,
        line=dict(color="green"),
        name="3-Fund Frontier w/o short sales"
    )

    gmv = P.GMV

    string = "GMV portfolio w/o short sales <br>"
    for i in range(N):
        string += asset_names[i]+": " + f'{gmv[i]:.1%}' + "<br>"
    string += "<extra></extra>"        
    trace1a = go.Scatter(
        x=[np.sqrt(gmv @ cov @ gmv)],
        y=[gmv @ mns],
        mode="markers",
        # customdata=cd,
        hovertemplate=string,        
        marker=dict(size=15, color="green"),
        name="GMV Portfolio w/o Short Sales"
    )



    # Allowing short-selling
    P = portfolio(mns, cov, True)

    mingrid = 0.9*np.min(mns)
    maxgrid = 1.025*np.max(mns)
    mnsFrontier = np.linspace(mingrid, maxgrid, 50)
    portsFrontier = [P.frontier(m) for m in mnsFrontier]
    sdsFrontier = [np.sqrt(w @ cov @ w) for w in portsFrontier]

    string, cd = custom('frontier with short sales', portsFrontier)
    trace2 = go.Scatter(
        x=sdsFrontier,
        y=mnsFrontier,
        mode="lines",
        customdata=cd,
        hovertemplate=string,
        line=dict(color="blue"),
        name="3-Fund Frontier with short sales"
    )

    gmv = P.GMV

    string = "GMV portfolio with short sales <br>"
    for i in range(N):
        string += asset_names[i]+": " + f'{gmv[i]:.1%}' + "<br>"
    string += "<extra></extra>"
    trace2a = go.Scatter(
        x=[np.sqrt(gmv @ cov @ gmv)],
        y = [gmv @ mns],
        mode = "markers",
        hovertemplate = string,
        marker = dict(size=15, color="blue"),
        name="GMV Portfolio with Short Sales"
    )

    trace3 = go.Scatter(
        x=sds,
        y=mns,
        # text=[1, 2, 3],
        # hovertemplate="Asset %{text}<extra></extra>",
        text=asset_names,
        hovertemplate="%{text}<extra></extra>",
        mode="markers",
        marker=dict(size=15, color="red"),
        name="Underlying Assets"
    )

    fig = go.Figure()
    
    for trace in (trace1, trace1a, trace2, trace2a, trace3):
        fig.add_trace(trace)
    #trace1=frontier w/o short sales
    #trace1a=GMV portfolio w/o short sales
    #trace2=frontier with short sales
    #trace2a=GMV portfolio with short sales
    #trace3=Assets
        
        
    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"
    # fig.update_xaxes(range=[0, 1.25 * np.max(sds)])
    # fig.update_yaxes(range=[0, 1.25 * np.max(mns)])
    fig.update_yaxes(tickformat=".1%")
    fig.update_xaxes(tickformat=".1%")
    fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.01))
    fig.show()
    # return largefig(fig), is_pos_def(cov)
figtbl(mn1, mn2, mn3, sd1, sd2, sd3, corr12, corr13, corr23, ["US Equity", "Developed Intl", "Emerging Mkt"])
```

The frontier with short-selling coincides with the frontier without short-selling for many expected return values, but shorting allows an investor to reach expected returns values below the minimum expected returns of the assets (the US equity portfolio) and above the maximum expected return of the underlying assets (the emerging market portfolio).  These portfolios entail shorting the emerging market fund or the US equity fund, respectively.  

Within the set of expected returns possible without shorting, lower risk portfolios are possible with shorting for expected returns close to the US market fund's expected return and close to the emerging market fund's expected return.  Thus, short-selling may provide additional diversification benefits relative to those available to a short-sale-constrained investor.

### N Risky Assets {#sec-n-risky}

Adding more securities to a portfolio results in additional diversification benefits, but the marginal benefit of an additional security decreases with the total number of securities in the portfolio.  We discussed above that the diversification benefit in a two-asset case depends on the correlation between the two security returns.  For portfolios of many assets, the portfolio variance depends more on the average correlation across securities than it does on the riskiness of the securities themselves.  One reason for the sheer number of terms in the portfolio variance calculation @eq-n-asset-variance involving correlations (through the covariance terms).  We can write all of the terms in the three-asset version of @eq-n-asset-variance in matrix form as follows:

<table style="border:1px solid black; margin-left:auto;margin-right:auto;">
  <!-- Row 1 -->
  <tr> 
    <td style="text-align:center; background-color:gray">$w_1^2 \text{var}[r_1]$</td>
    <td style="text-align:center; background-color:lightblue">$w_1 w_2 \text{cov}[r_1,r_2]$</td>
    <td style="text-align:center; background-color:lightcoral">$w_1 w_3 \text{cov}[r_1,r_3]$</td>
  </tr>
  <!-- Row 2 -->
  <tr>
    <td style="text-align:center; background-color:lightblue">$w_2 w_1 \text{cov}[r_2,r_1]$</td>
    <td style="text-align:center; background-color:gray">$w_2^2 \text{var}[r_2]$</td>
    <td style="text-align:center; background-color:#d9f2d9">$w_2 w_3 \text{cov}[r_2,r_3]$</td>
  </tr>
  <!-- Row 3 -->
  <tr>
    <td style="text-align:center; background-color:lightcoral">$w_3 w_1 \text{cov}[r_3,r_1]$</td>
    <td style="text-align:center; background-color:#d9f2d9">$w_3 w_2 \text{cov}[r_3,r_2]$</td>
    <td style="text-align:center; background-color:gray">$w_3^2 \text{var}[r_3]$</td>
  </tr>
</table>

For the three-asset portfolio, there are 3 variance terms and 3 distinct covariance terms.  For a five-asset portfolio, the tabular representation of @eq-n-asset-variance is:
<table style="border:1px solid black; margin-left:auto;margin-right:auto;">
  <!-- Row 1 -->
  <tr> 
    <td style="text-align:center; background-color:gray">$w_1^2 \text{var}[r_1]$</td>
    <td style="text-align:center; background-color:lightblue">$w_1 w_2 \text{cov}[r_1,r_2]$</td>
    <td style="text-align:center; background-color:lightcoral">$w_1 w_3 \text{cov}[r_1,r_3]$</td>
    <td style="text-align:center; background-color:lightgray">$w_1 w_4 \text{cov}[r_1,r_4]$</td>
    <td style="text-align:center; background-color:darkseagreen">$w_1 w_5 \text{cov}[r_1,r_5]$</td>
  </tr>
  <!-- Row 2 -->
  <tr>
    <td style="text-align:center; background-color:lightblue">$w_2 w_1 \text{cov}[r_2,r_1]$</td>
    <td style="text-align:center; background-color:gray">$w_2^2 \text{var}[r_2]$</td>
    <td style="text-align:center; background-color:#d9f2d9">$w_2 w_3 \text{cov}[r_2,r_3]$</td>
    <td style="text-align:center; background-color:khaki3">$w_2 w_4 \text{cov}[r_2,r_4]$</td>
    <td style="text-align:center; background-color:lavender">$w_2 w_5 \text{cov}[r_2,r_5]$</td>      
  </tr>
  <!-- Row 3 -->
  <tr>
    <td style="text-align:center; background-color:lightcoral">$w_3 w_1 \text{cov}[r_3,r_1]$</td>
    <td style="text-align:center; background-color:#d9f2d9">$w_3 w_2 \text{cov}[r_3,r_2]$</td>
    <td style="text-align:center; background-color:gray">$w_3^2 \text{var}[r_3]$</td>
    <td style="text-align:center; background-color:pink">$w_3 w_4 \text{cov}[r_3,r_4]$</td>
    <td style="text-align:center; background-color:wheat">$w_3 w_5 \text{cov}[r_3,r_5]$</td>  
  </tr>
  <!-- Row 4 -->
  <tr>
    <td style="text-align:center; background-color:lightgray">$w_4 w_1 \text{cov}[r_4,r_1]$</td>
    <td style="text-align:center; background-color:khaki3">$w_4 w_2 \text{cov}[r_4,r_2]$</td>
    <td style="text-align:center; background-color:pink">$w_4 w_3 \text{cov}[r_4,r_3]$</td>
    <td style="text-align:center; background-color:gray">$w_4^2 \text{var}[r_4]$</td>
    <td style="text-align:center; background-color:thistle">$w_4 w_5 \text{cov}[r_4,r_5]$</td>  
  </tr>
  <!-- Row 5 -->
  <tr>
    <td style="text-align:center; background-color:darkseagreen">$w_5 w_1 \text{cov}[r_5,r_1]$</td>
    <td style="text-align:center; background-color:lavender">$w_5 w_2 \text{cov}[r_5,r_2]$</td>
    <td style="text-align:center; background-color:wheat">$w_5 w_3 \text{cov}[r_5,r_3]$</td>
    <td style="text-align:center; background-color:thistle">$w_5 w_4 \text{cov}[r_5,r_4]$</td>
    <td style="text-align:center; background-color:gray">$w_5^2 \text{var}[r_5]$</td>  
  </tr>    
</table>
For the five-asset portfolio, there are 5 variance terms (along the diagonal) and 10 =((25-5)/2) distinct covariance terms.  For an $N$ asset portfolio, there will be $N$ variance terms and $\frac{N^2-N}{2}$ distinct covariance terms.  For portfolios with many assets, the number of covariance terms will quickly dwarf the number of variance terms.

To see how correlation across assets can dominate the riskiness of individual securities in portfolios with many assets, consider an equally-weighted ($w_i=1/N$ for all assets) portfolio where all all assets have the same variance $(\sigma^2_{\text{all}})$ and all pairs of assets have the same covariance $(\overline{\text{cov}})$.  The variance of this equal-weighted portfolio is:
$$
\begin{align*}
  \text{var}(r_p) =& N\cdot \left(\frac{1}{N}\right)^2 \sigma^2_{\text{all}} + (N^2-N)\cdot \left(\frac{1}{N}\right)^2 \overline{\text{cov}} \\
  =& \left(\frac{1}{N}\right) \sigma^2_{\text{all}} + \left(\frac{N-1}{N}\right) \overline{\text{cov}}\,.
\end{align*}
$$
As $N$ gets very large, the portfolio variance approaches the common covariance across assets:
$$ \text{var}(r_p) \underset{N\rightarrow \infty}{\longrightarrow} 0\cdot\sigma^2_{\text{all}}+(1-0)\overline{\text{cov}}=\overline{\text{cov}}\,.$$ {#eq-diversification-limit}

@fig-diversification plots the portfolio variance for this equally-weighted portfolio as a function of the number of assets for three correlation values.  The figure demonstrates three insights.  First, as discussed previously, the diversification benefit is greater for lower levels of correlation across assets (that is, lower $\overline{\text{cov}}$ here).  Second, the marginal benefit of adding additional securities to a portfolio decreases with the number of securities.  A large fraction of the overall risk reduction is due to the first 10 to 20 securities added to the portfolio.  Third, there is a limit to risk reduction, and this limit is governed by the amount of common comovement across assets in the portfolio.  $\sigma_{\text{all}}$ is assumed to be 40%, so @eq-diversification-limit tells us that the portfolio standard deviation approaches values of 12.6%, 20%, and 28.3%, respectively, for correlations of 10%, 25%, and 50% as the number of portfolio assets gets large.^[These limits are calculated using $\text{sd}[r_p]=\sqrt{\overline{\text{cov}}}=\sqrt{\overline{\text{corr}}\sigma^2_{\text{all}}}$.] @fig-diversification shows that for portfolios of 200 assets, the portfolio standard deviation is already quite close to these limiting standard deviations.

``` {python}
#| label: fig-diversification
#| fig-cap: Portfolios of three risky assets
import pandas as pd
import numpy as np
import plotly.graph_objects as go

std  = 40
corr0 = 10
corr1 = 25
corr2 = 50

# Range of x-axis
Num = 200

def data(std, cor):
    var = std ** 2
    cov = var * cor
    stdevs = [np.sqrt(var / n + (n - 1) * cov / n) for n in range(1, Num + 1)]
    df = pd.DataFrame(stdevs)
    df.columns = ["Standard Deviation"]
    df["Number of Assets"] = [i for i in range(1, Num + 1)]
    return df
def figtbl(std, cor0, cor1, cor2):
    # The inputs are in percents
    std /= 100
    cor0 /= 100
    cor1 /= 100
    cor2 /= 100

    # Correlation 0
    df = data(std, cor0)
    trace0 = go.Scatter(
        x=df["Number of Assets"],
        y=df["Standard Deviation"],
        mode="lines",
        hovertemplate="Correlation=" + f'{100*cor0:.0f}%' + "<br>Number of Assets = %{x}<br>Standard Deviation = %{y:0.2%} <extra></extra>",
        name = "Correlation=" + f'{100*cor0:.0f}%'
    )

    # Correlation 1
    df = data(std, cor1)
    trace1 = go.Scatter(
        x=df["Number of Assets"],
        y=df["Standard Deviation"],
        mode="lines",
        hovertemplate="Correlation=" + f'{100*cor1:.0f}%' + "<br>Number of Assets = %{x}<br>Standard Deviation = %{y:0.2%} <extra></extra>",
        name = "Correlation=" + f'{100*cor1:.0f}%'
    )   
    # Correlation 2
    df = data(std, cor2)
    trace2 = go.Scatter(
        x=df["Number of Assets"],
        y=df["Standard Deviation"],
        mode="lines",
        hovertemplate="Correlation=" + f'{100*cor2:.0f}%' + "<br>Number of Assets = %{x}<br>Standard Deviation = %{y:0.2%} <extra></extra>",
        name = "Correlation=" + f'{100*cor2:.0f}%'
    )      

    fig = go.Figure()
    fig.add_trace(trace0)
    fig.add_trace(trace1)
    fig.add_trace(trace2)
    fig.update_yaxes(tickformat=",.0%", rangemode="tozero")
    fig.layout.xaxis["title"] = "Number of Assets"
    fig.layout.yaxis["title"] = "Standard Deviation"
    fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.74))
    fig.show()
    
figtbl(std, corr0, corr1, corr2)
```

## Capital Allocation to Risky Assets 

In this section, we introduce risk-free assets for saving and borrowing into the investment opportunity set.  We generally consider assets like Treasury bills or money-market mutual funds as the risk-free asset for saving in practice.  Borrowing rates will depend on the investor's access to debt markets.

### A Single Risky Asset {#sec-cal-1risky}

What does the set of possible portfolios look like if we consider the US stock market index fund as the risky asset and Treasury bills as the risk-free asset.  For a given portfolio weight in the risky asset $w_{\text{risky}}$, we first need to determine the portfolio's expected return and standard deviation.  Considering all possible risky portfolio weights traces out the set of possible investments, which is called the **capital allocation line** in expected return/standard deviation space.  

From @eq-2asset-variance, the variance of portfolio $r_p$ with non-negative $w_{\text{risky}}$ invested in the risky asset and $1-w_{\text{risky}}$ invested in the risk-free rate is:
\begin{align}
    \text{var}[r_p] =& w_{\text{risky}}^2 \text{var}[r_{\text{risky}}]+ (1-w_{\text{risky}})^2 \text{var}[r_f]+ 2 w_{\text{risky}}(1-w_{\text{risky}}) \text{cov}[r_{\text{risky}},r_f] \\ 
                    =& w_{\text{risky}}^2 \text{var}[r_{\text{risky}}]+ (1-w_{\text{risky}})^2 \cdot 0 + 2 w_{\text{risky}}(1-w_{\text{risky}}) \cdot 0 \\
                     =&w_{\text{risky}}^2 \text{var}[r_{\text{risky}}]\,, 
\end{align} 
where we have used the facts that the risk-free asset's return is risk-free ($\text{var}[r_f]=0$) and does not covary with the risky asset return.  Thus, the portfolio's standard deviation is:
$$ \text{sd}[r_p] = w_{\text{risky}}\cdot \text{sd}[r_{\text{risky}}]\,.$$ {#eq-sd-rf-risky}

The expected return of the portfolio is:
$$ E[r_p] = w_{\text{risky}} E[r_{\text{risky}}]+ (1-w_{\text{risky}}) r_f \,.$$ {#eq-expret-rf-risky}
Solving @eq-sd-rf-risky for $w_{\text{risky}}$, substituting into @eq-expret-rf-risky, and rearranging yields the relationship between expected return and standard deviation along the capital allocation line:
$$ E[r_p] = r_f + \bigg[ \frac{E[r_{\text{risky}}]-r_f}{\text{sd}[r_{\text{risky}}] }\bigg] \cdot \text{sd}[r_p] \,.$$ {#eq-cal}
The capital allocation line for a risky asset is a set of portfolios combining the risky asset with the risk-free asset.  In expected return/standard deviation space, the $y$-intercept is the risk-free rate of return and the slope of the line is the ratio of the expected excess return of the risky asset to its standard deviation.  This ratio is called the Sharpe ratio, after Nobel laureate <a href="https://en.wikipedia.org/wiki/William_F._Sharpe"> William Sharpe </a>.  We discuss it in more detail below in @sec-multiple-cals.  

When $w_{\text{risky}}>100\%$, the portfolio is borrowing at the risk-free rate (that is, issuing bonds at the same rate as, say, US Treasuries).  This is probably not a reasonable assumption.  For most investors, $r^{\text{borrow}}>r^{\text{saving}}$.  In this case, the capital allocation line is kinked at the risky-asset:
$$
\begin{equation}
\text{E}[r_p] = \begin{cases}
 r_f^{\text{saving}} + \bigg[ \frac{E[r_{\text{risky}}]-r_f^{\text{saving}}}{\text{sd}[r_{\text{risky}}] }\bigg]\cdot \text{sd}[r_p] & \text{if } \text{sd}[r_p] \le \text{sd}[r_{\text{risky}}] \\
  r_f^{\text{borrow}} + \bigg[ \frac{E[r_{\text{risky}}]-r_f^{\text{borrow}}}{\text{sd}[r_{\text{risky}}] }\bigg]\cdot \text{sd}[r_p] & \text{if } \text{sd}[r_p] > \text{sd}[r_{\text{risky}}] \\
\end{cases}
\end{equation}
$$
@fig-cal shows the set of possible portfolios along the capital allocation line.  

```{python}
#| label: fig-cal
#| fig-cap: Capital Allocation Line
import numpy as np
import pandas as pd
import plotly.graph_objects as go

# Parameter values (in percent)
mn = 6
sd = 15
s = 2
extra = 2    #incremental borrowing rate

def data(mn, sd, s, b):
    grid = np.linspace(0, 2, 201)
    mns = [(s + w * (mn - s) if w <= 1 else b + w * (mn - b)) for w in grid]
    sds = [w * sd for w in grid]
    return grid, mns, sds

def figtbl(mn, sd, s, extra):
    mn /= 100
    sd /= 100
    b = s+extra
    s /= 100
    b /= 100
    grid, mns, sds = data(mn, sd, s, b)
    string = "wealth in market = %{text:.0f}%<extra></extra>"
    trace1 = go.Scatter(
        x=sds, y=mns, mode="lines", text=100 * grid, hovertemplate=string, name='CAL'
    )
    string = "wealth in market = 100%<extra></extra>"
    trace2 = go.Scatter(
        x=[sd], y=[mn], mode="markers", hovertemplate=string, marker=dict(size=15), name='Market'
    )
    string = "wealth in market = 0%<extra></extra>"
    trace3 = go.Scatter(
        x=[0], y=[s], mode="markers", hovertemplate=string, marker=dict(size=15), name='Risk-free (Saving)'
    )  
    string = "Borrowing rate<extra></extra>"
    trace4 = go.Scatter(
        x=[0], y=[b], mode="markers", hovertemplate=string, marker=dict(size=15), name='Risk-free (Borrowing)'
    )       
    fig = go.Figure()
    fig.add_trace(trace1)
    fig.add_trace(trace2)
    fig.add_trace(trace3)
    fig.add_trace(trace4)
    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"
    fig.update_yaxes(tickformat=".0%")
    fig.update_xaxes(tickformat=".0%")
    fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.01))
    fig.show()
figtbl(mn, sd, s, extra)
```



### Multiple Risky Assets {#sec-multiple-cals}

We've seen how to combine two risky assets (@sec-two-risky) as well as a risky asset with a risk-free asset (@sec-cal-1risky).  What if we can invest in two risky assets *and* the risk-free asset?  What is the best way to form a portfolio in this case?  Let's assume that in addition to the US stock market fund, we are also considering investing in a long-term bond fund.   Empirically, over the last 30 or 40 years, equities and long-term government bonds have been almost uncorrelated; we will use a correlation of -5% below.

First, consider the investment opportunity sets that would obtain if we restricted attention to investing in only a single risky fund (either the stock or bond fund) in conjunction with the risk-free asset.  We assume for the moment that we can both borrow and save at a single risk-free rate.  The possible portfolios are the capital allocation lines for the stock fund and the bond fund, respectively.  These are plotted as the orange and red lines in @fig-two-asset-plus_rf.  We can see immediately that all portfolios on the CAL for the stock fund are dominated by both the stock-bond frontier (the black line) and by the bond CAL.  The same expected return can be achieved for smaller standard deviation.

```{python}
#| label: fig-two-asset-plus_rf
#| fig-cap: Tangency portfolio of two risky assets
import numpy as np
import pandas as pd
import plotly.graph_objects as go

mn_stock = 6 
mn_bond  = 3.5
sd_stock = 15
sd_bond  = 3.5
corr = -5

rs = 2
extra = 0

def data(mn1, mn2, sd1, sd2, c, rs, extra):
    c = c / 100
    rb = rs + extra   
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    sds = [sd1, sd2]
    grid = np.linspace(0, 1, 101)
    ports = [np.array([w, 1 - w]) for w in grid]
    means = [p.T @ np.array(mns) for p in ports]
    df = pd.DataFrame(means)
    df.columns = ["mean"]
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    df["stdev"] = [np.sqrt(p.T @ cov @ p) for p in ports]
    df["wt1"] = grid
    df["wt2"] = 1 - df.wt1
    for col in ["mean", "stdev"]:
        df[col] = df[col] / 100
    df["sr_s"]= (df["mean"] - rs)/df["stdev"]
    df["sr_b"]= (df["mean"] - rb)/df["stdev"]
   
    return df

def rf_plus_risky(mn, sd, rs, rb, w_min, w_max):
    mn /= 100
    sd /= 100
    rs /= 100
    rb /= 100
    grid = np.linspace(w_min, w_max, 201)
    mns = [(rs + w * (mn - rs) if w <= 1 else rb + w * (mn - rb)) for w in grid]
    sds = [w * sd for w in grid]
    srs = (mn - rs)/sd
    srb = (mn - rb)/sd
    return grid, mns, sds, srs, srb

def rf_plus_risky_nokink(mn, sd, rf, w_min, w_max):
    mn /= 100
    sd /= 100
    rf /= 100
    grid = np.linspace(w_min, w_max, 201)
    mns = [(rf + w * (mn - rf)) for w in grid]
    sds = [w * sd for w in grid]
    return grid, mns, sds


def figtbl(mn1, mn2, sd1, sd2, c, rs, extra, asset1_name, asset2_name):
    df = data(mn1, mn2, sd1, sd2, c, rs, extra)
    
    #Plot the portfolios of the two assets
    trace1 = go.Scatter(
        x=df["stdev"],
        y=df["mean"],
        mode="lines",
        # line={'color': green},
        text=100 * df["wt1"],
        customdata=100 * df["wt2"],
        hovertemplate=asset1_name+": %{text:.0f}%<br>"+asset2_name+": %{customdata:.0f}%<extra></extra>",
        line=dict(color="black"),
        name="Stock & Bond Frontier"
    )
    
    # Plot the two assets
    df = df[df.wt1.isin([0, 1])]
    df["text"] = np.where(df.wt1 == 1, asset1_name, asset2_name)
    trace2a = go.Scatter(
        x=df[df.wt1==1]["stdev"],
        y=df[df.wt1==1]["mean"],
        mode="markers",
        text=df[df.wt1==1]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="orange"),
        name=asset1_name
    )
    trace2b = go.Scatter(
        x=df[df.wt1==0]["stdev"],
        y=df[df.wt1==0]["mean"],
        mode="markers",
        text=df[df.wt1==0]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="red"),
        name=asset2_name
    )

    fig = go.Figure()
    fig.add_trace(trace2a)
    fig.add_trace(trace2b)
    fig.add_trace(trace1)

    # Plot the combination of the risk-free and each asset (CAL for each asset)
    grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mn1, sd1, rs, rs + extra, 0, 1.0)
    string = "wealth in "+asset1_name+"= %{text:.0f}%<br>" + "Sharpe ratio: " + "{:.4f}".format(srs_cal) +"<extra></extra>"
    trace3 = go.Scatter(
        x=sds_cal, 
        y=mns_cal, 
        mode="lines", 
        text=100 * grid, 
        hovertemplate=string, 
        line=dict(color="orange"),
        name="CAL: "+asset1_name
    )
    grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mn2, sd2, rs, rs + extra, 0, 2.7)
    string = "wealth in "+asset2_name+"= %{text:.0f}%<br>" + "Sharpe ratio : " + "{:.4f}".format(srs_cal) +"<extra></extra>"
    trace4 = go.Scatter(
        x=sds_cal, 
        y=mns_cal, 
        mode="lines", 
        text=100 * grid, 
        hovertemplate=string, 
        line=dict(color="red"),
        name="CAL: "+asset2_name
    )
    fig.add_trace(trace3)
    fig.add_trace(trace4)  


    def custom(string, ports,srTang,borrow_flag):
        # borrow_flag=1 adds statement about "relative to borrowing rate"
        cd = np.empty(shape=(len(ports), N+1, 1), dtype=float)
        for i in range(N):
            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)
        cd[:,N] = np.round(srTang,4)
        # print(cd)
        string += "<br>"
        for i in range(N):
            string += "asset " + str(i + 1)
            string += ": %{customdata["
            string += str(i)
            string += "]:.1%}<br>"
        if borrow_flag==1:
            string += "Sharpe ratio (relative to borrowing rate): %{customdata[" +  str(N) + "]:.4f}<br>"    
        else:
            string += "Sharpe ratio: %{customdata[" +  str(N) + "]:.4f}<br>"
        string += "<extra></extra>"
        return string, cd  

    # Plot the tangency portfolios
    c = c / 100
    rb = rs + extra     
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    mns = np.array(mns) / 100
    sds = [sd1, sd2]
    sds = np.array(sds) / 100
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    
    Shorts = 0.0     
    N = len(mns)
    P = portfolio(mns, cov, Shorts)    
    gmv = P.GMV @ mns
    # print('GMV return is: ',gmv)
    if (rs < gmv) or (not Shorts):
        portTang = P.tangency(rs)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rs)/sdTang
            string0 = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'
            string, cd = custom(string0, [portTang], srTang,0)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name=string0
            )
            fig.add_trace(trace)
            
            #Plot CAL (no leverage)
            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rs*100,0, 2.2)
            portlabel = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'
            string = "wealth in "+portlabel + " = %{text:.0f}%<br>" + "Sharpe ratio: " +  "{:.4f}".format(srTang) +"<extra></extra>"
            trace5 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string, 
                line=dict(color="blue"),
                name="CAL: " + portlabel
            )           
            fig.add_trace(trace5)
            
            #Plot CAL (with leverage)
            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rs*100,1.0, 2.5)
            trace5a = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string, 
                line=dict(color="blue",dash='dot'),
                name="CAL: "  + portlabel + " (levered)"
                # showlegend=False
            )           
            # fig.add_trace(trace5a)           

    if (rb != rs) and ((gmv > rb) or (not Shorts)):
        portTang = P.tangency(rb)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rb)/sdTang
            string = 'efficient high mean portfolio'
            string, cd = custom(string, [portTang], srTang,1)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name="efficient high mean portfolio"
            )
            fig.add_trace(trace)
            
            #Plot CAL (with leverage)            
            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rb*100, 1.0, 1.5)
            string = "wealth in efficient high mean portfolio = %{text:.0f}%<br>" + "Sharpe ratio (relative to borrowing rate): " + "{:.4f}".format(srTang) +"<extra></extra>"
            trace6 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string,
                line=dict(color="blue"),
                name = "CAL: efficient high mean"
            )           
            fig.add_trace(trace6)   
            
            #Plot CAL (without leverage) 
            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rb*100, 0, 1)
            trace6a = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string, 
                line=dict(color="blue", dash='dot'),
                name = "CAL: efficient high mean (unlevered)"
            )           
            fig.add_trace(trace6a)      


 
    
    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"
    fig.update_xaxes(range=[0, 1.05 * df["stdev"].max()])
    fig.update_yaxes(range=[0, 1.05 * df["mean"].max()])
    fig.update_yaxes(tickformat=".0%")
    fig.update_xaxes(tickformat=".0%")
    fig.update_layout(legend=dict(yanchor="top", y =0.5, xanchor="left", x=0.65))
    fig.show()
figtbl(mn_stock,mn_bond,sd_stock,sd_bond,corr,rs,extra,"Stock","Bond")
```

Recall from @eq-cal that the slope of the CAL for a risky asset is the Sharpe ratio.  The **Sharpe ratio** is a measure of the excess return of an investment per unit of risk.  Since investors like expected returns and dislike risk, they want high Sharpe ratios.  Note in @fig-two-asset-plus_rf that the Sharpe ratio of the bond is higher than that of the stock portfolio.  In fact, the Sharpe ratio for all portfolios on the frontier have higher Sharpe ratios than that of the stock portfolio.  The highest Sharpe ratio is obtained by combining the risk-free asset with a risky portfolio so that the CAL slope is as high as possible. This occurs when the CAL is tangent to the curve of risky-only portfolios.  This portfolio of risky assets is thus called the **tangency portfolio**.  Investing along the CAL of the tangency portfolio offers the highest possible Sharpe ratio, regardless of any desired level of expected return or risk.  

::: {.callout-tip collapse="true"}
## Calculating the Tangency Portfolio in Python
The code below relies on a Portfolio python object, which needs to be executed or imported before using this code.  See @sec-portfolio-class for details.
``` p
import numpy as np

# Risk-free rate
rs = 0.02
# Expected returns
mns = np.array([0.10, 0.05, 0.07])
# Standard deviations
sds = np.array([0.20, 0.12, 0.15])
# Correlations
corr12 = 0.3
corr13 = 0.3
corr23 = 0.3
# Covariance matrix
C  = np.identity(3)
C[0, 1] = C[1, 0] = corr12
C[0, 2] = C[2, 0] = corr13
C[1, 2] = C[2, 1] = corr23
cov = np.diag(sds) @ C @ np.diag(sds)

# Define portfolios class object
AllowShorting = False
P = portfolio(mns, cov, AllowShorting)

##### Tangency Portfolio
# Weights
portTang = P.tangency(rs)
# Expected return
mnTang = portTang @ mns
# Standard deviation
sdTang = np.sqrt(portTang @ cov @ portTang)
# Sharpe ratio
srTang = (mnTang - rs)/sdTang
```
:::

The tangency portfolio is thus the optimal combination of risky assets, and all investors should invest somewhere along the tangency portfolio CAL.  This is an example of the **two-fund separation** property of asset allocation.  All investors will choose to allocate capital to the risk-free asset and an optimal risky asset portfolio.  The problem of determining an optimal all-risky asset portfolio is separate from the choice of where to invest on the resulting capital allocation line.  We discuss the latter decision of how much capital to allocate to risky assets relative to the risk-free asset in @sec-preferences.

So far we have assumed that we can borrow and save at the same risk-free rate.  Now relax this in favor of the more realistic assumption that $r_f^{\text{borrow}}>r_f^{\text{saving}}$.  In this case, efficient portfolios fall into three regions, separated by blue dots in  @fig-two-asset-plus_rf_saveborrow.^[This is true if the interest rates are lower than expected returns. If interest rates are set higher than expected returns, then the efficient portfolios may not exist.]  These blue dots indicate an efficient low risk portfolio and an efficient high mean portfolio, both comprised solely of risky assets. To the left of the efficient low risk portfolio, the efficient portfolios are scaled-down versions of the efficient low risk portfolio with some savings. To the right of the efficient high mean portfolio, the efficient portfolios are scaled-up versions of the efficient high mean portfolio with some borrowing. Both cases are shown as blue lines in the figure.^[The blue dotted lines extend the blue solid lines, but the points on the blue dotted lines are infeasible, because they involve saving at the borrowing rate or borrowing at the savings rate.] The third region is the portion of the efficient frontier between the efficient low risk and efficient high mean portfolios. These portfolios do not involve saving or borrowing.  Investors with different preferences will choose to invest in different locations across these three regions, as discussed in the next section.

```{python}
#| label: fig-two-asset-plus_rf_saveborrow
#| fig-cap: Portfolios of two risky assets and risk-free saving and borrowing
import numpy as np
import pandas as pd
import plotly.graph_objects as go

mn_stock = 6
mn_bond  = 3.5
sd_stock = 15
sd_bond  = 3.5
corr = -5

rs = 2
extra = 2


def data(mn1, mn2, sd1, sd2, c, rs, extra):
    c = c / 100
    rb = rs + extra   
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    sds = [sd1, sd2]
    grid = np.linspace(0, 1, 101)
    ports = [np.array([w, 1 - w]) for w in grid]
    means = [p.T @ np.array(mns) for p in ports]
    df = pd.DataFrame(means)
    df.columns = ["mean"]
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    df["stdev"] = [np.sqrt(p.T @ cov @ p) for p in ports]
    df["wt1"] = grid
    df["wt2"] = 1 - df.wt1
    for col in ["mean", "stdev"]:
        df[col] = df[col] / 100
    df["sr_s"]= (df["mean"] - rs)/df["stdev"]
    df["sr_b"]= (df["mean"] - rb)/df["stdev"]
   
    return df

def rf_plus_risky(mn, sd, rs, rb, w_min, w_max):
    mn /= 100
    sd /= 100
    rs /= 100
    rb /= 100
    grid = np.linspace(w_min, w_max, 201)
    mns = [(rs + w * (mn - rs) if w <= 1 else rb + w * (mn - rb)) for w in grid]
    sds = [w * sd for w in grid]
    srs = (mn - rs)/sd
    srb = (mn - rb)/sd
    return grid, mns, sds, srs, srb

def rf_plus_risky_nokink(mn, sd, rf, w_min, w_max):
    mn /= 100
    sd /= 100
    rf /= 100
    grid = np.linspace(w_min, w_max, 201)
    mns = [(rf + w * (mn - rf)) for w in grid]
    sds = [w * sd for w in grid]
    return grid, mns, sds


def figtbl(mn1, mn2, sd1, sd2, c, rs, extra, asset1_name, asset2_name):
    df = data(mn1, mn2, sd1, sd2, c, rs, extra)
    
    #Plot the portfolios of the two assets
    trace1 = go.Scatter(
        x=df["stdev"],
        y=df["mean"],
        mode="lines",
        # line={'color': green},
        text=100 * df["wt1"],
        customdata=100 * df["wt2"],
        hovertemplate=asset1_name+": %{text:.0f}%<br>"+asset2_name+": %{customdata:.0f}%<extra></extra>",
        line=dict(color="black"),
        name="Stock & Bond Frontier"
    )
    
    # Plot the two assets
    df = df[df.wt1.isin([0, 1])]
    df["text"] = np.where(df.wt1 == 1, asset1_name, asset2_name)
    trace2a = go.Scatter(
        x=df[df.wt1==1]["stdev"],
        y=df[df.wt1==1]["mean"],
        mode="markers",
        text=df[df.wt1==1]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="orange"),
        name=asset1_name
    )
    trace2b = go.Scatter(
        x=df[df.wt1==0]["stdev"],
        y=df[df.wt1==0]["mean"],
        mode="markers",
        text=df[df.wt1==0]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="red"),
        name=asset2_name
    )

    fig = go.Figure()
    fig.add_trace(trace2a)
    fig.add_trace(trace2b)
    fig.add_trace(trace1)

    # Plot the combination of the risk-free and each asset (CAL for each asset)
    grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mn1, sd1, rs, rs + extra, 0, 1.0)
    string = "wealth in "+asset1_name+"= %{text:.0f}%<br>" + "Sharpe ratio: " + "{:.4f}".format(srs_cal) +"<extra></extra>"
    trace3 = go.Scatter(
        x=sds_cal, 
        y=mns_cal, 
        mode="lines", 
        text=100 * grid, 
        hovertemplate=string, 
        line=dict(color="orange"),
        name="CAL: "+asset1_name
    )
    grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mn2, sd2, rs, rs + extra, 0, 1.0)
    string = "wealth in "+asset2_name+"= %{text:.0f}%<br>" + "Sharpe ratio : " + "{:.4f}".format(srs_cal) +"<extra></extra>"
    trace4 = go.Scatter(
        x=sds_cal, 
        y=mns_cal, 
        mode="lines", 
        text=100 * grid, 
        hovertemplate=string, 
        line=dict(color="red"),
        name="CAL: "+asset2_name
    )
    fig.add_trace(trace3)
    fig.add_trace(trace4)  


    def custom(string, ports,srTang,borrow_flag):
        # borrow_flag=1 adds statement about "relative to borrowing rate"
        cd = np.empty(shape=(len(ports), N+1, 1), dtype=float)
        for i in range(N):
            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)
        cd[:,N] = np.round(srTang,4)
        # print(cd)
        string += "<br>"
        for i in range(N):
            string += "asset " + str(i + 1)
            string += ": %{customdata["
            string += str(i)
            string += "]:.1%}<br>"
        if borrow_flag==1:
            string += "Sharpe ratio (relative to borrowing rate): %{customdata[" +  str(N) + "]:.4f}<br>"    
        else:
            string += "Sharpe ratio: %{customdata[" +  str(N) + "]:.4f}<br>"
        string += "<extra></extra>"
        return string, cd  

    # Plot the tangency portfolios
    c = c / 100
    rb = rs + extra     
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    mns = np.array(mns) / 100
    sds = [sd1, sd2]
    sds = np.array(sds) / 100
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    
    Shorts = 0.0     
    N = len(mns)
    P = portfolio(mns, cov, Shorts)    
    gmv = P.GMV @ mns
    # print('GMV return is: ',gmv)
    if (rs < gmv) or (not Shorts):
        portTang = P.tangency(rs)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rs)/sdTang
            string0 = 'tangency portfolio' if rb == rs else 'efficient low risk' if rb != rs else 'tangency portfolio'
            string, cd = custom(string0, [portTang], srTang,0)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name=string0
            )
            fig.add_trace(trace)
            
            #Plot CAL (no leverage)
            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rs*100,0, 1.0)
            portlabel = 'tangency portfolio' if rb == rs else 'efficient low risk' if rb != rs else 'tangency portfolio'
            string = "wealth in "+portlabel + " = %{text:.0f}%<br>" + "Sharpe ratio: " +  "{:.4f}".format(srTang) +"<extra></extra>"
            trace5 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string, 
                line=dict(color="blue"),
                name="CAL: " + portlabel
            )           
            fig.add_trace(trace5)
            
            #Plot CAL (with leverage)
            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rs*100,1.0, 1.5)
            trace5a = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string, 
                line=dict(color="blue",dash='dot'),
                name="CAL: "  + portlabel + " (levered)"
                # showlegend=False
            )           
            fig.add_trace(trace5a)         
            
            
            
            

    if (rb != rs) and ((gmv > rb) or (not Shorts)):
        portTang = P.tangency(rb)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rb)/sdTang
            string = 'efficient high mean portfolio'
            string, cd = custom(string, [portTang], srTang,1)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name="efficient high mean portfolio"
            )
            fig.add_trace(trace)
            
            #Plot CAL (with leverage)            
            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rb*100, 1.0, 1.5)
            string = "wealth in efficient high mean = %{text:.0f}%<br>" + "Sharpe ratio (relative to borrowing rate): " + "{:.4f}".format(srTang) +"<extra></extra>"
            trace6 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string,
                line=dict(color="blue"),
                name = "CAL: efficient high mean"
            )           
            fig.add_trace(trace6)   
            
            #Plot CAL (without leverage) 
            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rb*100, 0, 1)
            trace6a = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string, 
                line=dict(color="blue", dash='dot'),
                name = "CAL: efficient high mean (unlevered)"
            )           
            fig.add_trace(trace6a)      

    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"
    fig.update_xaxes(range=[0, 1.25 * df["stdev"].max()])
    fig.update_yaxes(range=[0, 1.15 * df["mean"].max()])
    fig.update_yaxes(tickformat=".0%")
    fig.update_xaxes(tickformat=".0%")
    fig.update_layout(legend=dict(yanchor="top", y =0.65, xanchor="left", x=0.535))
    fig.show()
figtbl(mn_stock,mn_bond,sd_stock,sd_bond,corr,rs,extra,"Stock","Bond")
```


## Preferences and Optimal Portfolios {#sec-preferences}

In order to make statements about "optimal" portfolios, we need to describe the preferences of investors in some way.  A standard way to do so is to use mean-variance utility.  Simply put, we will assume that investors like higher expected returns and dislike portfolios with riskier returns.  The amount of extra expected return needed for an investor to take on additional risk is governed by the investor's risk aversion, which we will denote by $A$.

Mathematically, mean-variance utility for a given portfolio return $r_p$ is:
$$ U(r_p)=E[r_p] - 0.5\cdot A \cdot \text{var}[r_p]\,.$$
The utility of a risky investment is its expected return minus a penalty for variance.  More risk averse investors have higher values for $A$, meaning that they put greater penalties on variance.  @fig-indifference0 shows indifference curves for three different levels of risk aversion, but the same level of utility.  When risk aversion is higher, a higher expected return is required to reach the utility for a given level of risk, and the extra expected return increases when risk increases.
```{python}
#| label: fig-indifference0
#| fig-cap: Indifference curves with different levels of risk aversion
import numpy as np
import pandas as pd
from scipy.stats import norm
import plotly.express as px

# Parameters
raver1 = 2
raver2 = 5
raver3 = 10
u1 = 0.10
u2 = 0.10
u3 = 0.10
string1='Risk Aversion='+str(raver1)
string2='Risk Aversion='+str(raver2)
string3='Risk Aversion='+str(raver3)

# Generate data
sd = np.arange(0,0.405,0.005)
U1 = u1 + 0.5*raver1* (sd**2)
U2 = u2 + 0.5*raver2* (sd**2) 
U3 = u3 + 0.5*raver3* (sd**2)
df = pd.DataFrame(data={'Standard Deviation': sd, string1: U1, string2: U2,string3: U3})
df = df*100

# Plot data
fig = px.line(df,x='Standard Deviation', y=[string1, string2, string3])
fig.update_layout(title='',
                   xaxis_title='Standard Deviation',
                   yaxis_title='Expected Return',
    legend_title_text='',)
fig.update_yaxes(tickformat=".0f", ticksuffix="%")
fig.update_xaxes(tickformat=".0f", ticksuffix="%")
fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.01))
fig.show()
```

Investors are indifferent between portfolios that generate the same utility.  @fig-indifference1 shows three different levels of utility, holding risk aversion fixed.  A utility of, for example, 10% means that the investor would be indifferent between the risky investment and a risk-free investment with a return of 10%.  That is, any portfolio located on the green **indifference curve** in @fig-indifference1 provides the same level of utility to this investor.  Higher utility is achieved with either a higher expected return or lower risk or both.
```{python}
#| label: fig-indifference1
#| fig-cap: Indifference curves with same level of risk aversion
import numpy as np
import pandas as pd
from scipy.stats import norm
import plotly.express as px
# import plotly.io as pio
# pio.renderers.default='notebook'

# Parameters
raver = 10
u1 = 0.05
u2 = 0.075
u3 = 0.10
string1='Utility='+str(np.round(u1*100,1))+'%'
string2='Utility='+str(np.round(u2*100,1))+'%'
string3='Utility='+str(np.round(u3*100,1))+'%'

# Generate data
sd = np.arange(0,0.405,0.005)
U1 = u1 + 0.5*raver* (sd**2)
U2 = u2 + 0.5*raver* (sd**2) 
U3 = u3 + 0.5*raver* (sd**2)
df = pd.DataFrame(data={'Standard Deviation': sd, string1: U1, string2: U2,string3: U3})
df = df*100

# Plot data
fig = px.line(df,x='Standard Deviation', y=[string1, string2, string3])
fig.update_layout(title='',
                   xaxis_title='Standard Deviation',
                   yaxis_title='Expected Return',
    legend_title_text='',)
fig.update_yaxes(tickformat=".0f", ticksuffix="%")
fig.update_xaxes(tickformat=".0f", ticksuffix="%")
fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.01))
fig.show()
```

### A Single Risky Asset CAL

The choice of where to locate along the CAL is the choice of how much to invest in a risky portfolio $w_{\text{risky}}$ (the other $1-w_{\text{risky}}$ being invested in a risk-free asset).  A mean-variance investor chooses $w_{\text{risky}}$ to solve:
$$ \underset{w_{\text{risky}}}\max E[r_p] - 0.5\cdot A \cdot \text{var}[r_p]\,. $$  {#eq-cal-optimization}
with $r_p = w_{\text{risky}} r_{\text{risky} + (1-w_{\text{risky}}) r_{\text{risky} r_f}
Plugging in the expected return (@eq-expret-rf-risky) and standard deviation ( @eq-sd-rf-risky) into @eq-cal-optimization and considering the first-order condition with respect to $w_{\text{risky}}$ provides the optimal weight to invest in the risky asset:
<!-- $$ w^*_{\text{risky}} = \frac{E[r_{\text{risky}}-r_f]}{A \cdot \text{var}_{\text{risky}}}\,.$$ {#eq-cal-opt-wgt} -->
<!-- ```{tex} -->
\begin{equation}
w^*_{\text{risky}} = \begin{cases}
    \frac{E[r_{\text{risky}}-r_f^{\text{saving}}]}{A \cdot \text{var}_{\text{risky}}} & \text{if } A > \frac{E[r_{\text{risky}}-r_f^{\text{saving}}]}{\text{var}_{\text{risky}}} \\
    100\% & \text{if } \frac{E[r_{\text{risky}}-r_f^{\text{borrow}}]}{ \text{var}_{\text{risky}}} \le A \le \frac{E[r_{\text{risky}}-r_f^{\text{saving}}]}{\text{var}_{\text{risky}}} \\
    \frac{E[r_{\text{risky}}-r_f^{\text{borrow}}]}{A \cdot \text{var}_{\text{risky}}} & \text{if } A < \frac{E[r_{\text{risky}}-r_f^{\text{borrow}}]}{ \text{var}_{\text{risky}}} \,. \\
\end{cases}
\end{equation}
<!-- ``` -->

Thus, an investor's location on the CAL depends on risk aversion.  Investors with different risk aversion will choose different combinations of the risky asset and the risk-free asset.  This is demonstrated in @fig-cal-preferences.

```{python}
#| label: fig-cal-preferences
#| fig-cap: Preferences and the Capital Allocation Line
import numpy as np
import pandas as pd
import plotly.graph_objects as go

# Parameter values (in percent)
mn = 6
sd = 15
s = 2
extra = 2    #incremental borrowing rate
raver1 = 3
raver2 = 0.5

def cal(mn, sd, s, b):
    grid = np.linspace(0, 2, 201)
    mns = [(s + w * (mn - s) if w <= 1 else b + w * (mn - b)) for w in grid]
    sds = [w * sd for w in grid]
    return grid, mns, sds

def opt_utility(mn, sd, s, b, A):
    # return/sd inputs must be in decimal
    wgt = (mn - s) / (A * (sd**2))
    expret= wgt*mn + (1-wgt)*s
    sdret = wgt*sd 
    if wgt > 1:
        wgt = (mn - b) / (A * (sd**2))
        wgt = max(wgt,1)
        expret= wgt*mn + (1-wgt)*b 
        sdret = wgt*sd   
    u = expret - 0.5*A*sdret**2
    return u, wgt

def figtbl(mn, sd, s, extra, raver1, raver2):
    mn /= 100
    sd /= 100
    b = s+extra
    s /= 100
    b /= 100

    # CAL Plot Info
    grid, mns, sds = cal(mn, sd, s, b)
    string = "wealth in market = %{text:.0f}%<extra></extra>"
    trace1 = go.Scatter(
        x=sds, y=mns, mode="lines", text=100 * grid, hovertemplate=string, name='CAL'
    )
    string = "wealth in market = 100%<extra></extra>"
    trace2 = go.Scatter(
        x=[sd], y=[mn], mode="markers", hovertemplate=string, marker=dict(size=15), name='Market'
    )
    string = "wealth in market = 0%<extra></extra>"
    trace3 = go.Scatter(
        x=[0], y=[s], mode="markers", hovertemplate=string, marker=dict(size=15), name='Risk-free (Saving)'
    )  
    string = "Borrowing rate<extra></extra>"
    trace4 = go.Scatter(
        x=[0], y=[b], mode="markers", hovertemplate=string, marker=dict(size=15), name='Risk-free (Borrowing)'
    )       

    # Utility plot info
    u1, wgt1 = opt_utility(mn,sd,s,b, raver1)
    u2, wgt2 = opt_utility(mn,sd,s,b, raver2)
    string1='Risk Aversion='+str(raver1)
    string2='Risk Aversion='+str(raver2)
    eret1 = [u1 + 0.5*raver1* (sd**2) for sd in sds]
    eret2 = [u2 + 0.5*raver2* (sd**2) for sd in sds] 
    # df = pd.DataFrame(data={'Standard Deviation': sds, string1: U1, string2: U2})
    string = "indifference curve for <br>utility obtained from <br>optimal wealth in market = "+str(np.round(100*wgt1,0))+"%<extra></extra>"
    trace5 = go.Scatter(
        x=sds, y=eret1, mode="lines", hovertemplate=string, name=string1
    )  
    string = "indifference curve for <br>utility obtained from <br>optimal wealth in market = "+str(np.round(100*wgt2,0))+"%<extra></extra>"
    trace6 = go.Scatter(
        x=sds, y=eret2, mode="lines", hovertemplate=string, name=string2
    )  


    fig = go.Figure()
    fig.add_trace(trace1)
    fig.add_trace(trace2)
    fig.add_trace(trace3)
    fig.add_trace(trace4)
    fig.add_trace(trace5)
    fig.add_trace(trace6)
    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"    
    fig.update_yaxes(tickformat=".0%")
    fig.update_xaxes(tickformat=".0%")
    fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.01))
    fig.show()
figtbl(mn, sd, s, extra, raver1, raver2)
```

Another way to see how risk aversion affects capital allocation is to plot the risky asset weight as a function of risk aversion, as in @fig-cal-wgt-by-riskaver.  Higher risk aversion translates into lower holdings of the risky asset.  This effect is monotonic except for a region of risk aversion where the optimal weight is 100% in the market portfolio.  This is due to the kink in the capital allocation line resulting from the difference in risk-free borrowing and savings rates.

```{python}
#| label: fig-cal-wgt-by-riskaver
#| fig-cap: Risky asset weight as function of risk aversion
import numpy as np
import pandas as pd
import plotly.graph_objects as go

# Parameter values (in percent)
mn = 6
sd = 15
s = 2
extra = 2    #incremental borrowing rate

def opt_wgt(mn, sd, s, b, A):
    # return/sd inputs must be in decimal
    wgt = (mn - s) / (A * (sd**2))
    expret= wgt*mn + (1-wgt)*s
    sdret = wgt*sd 
    if wgt > 1:
        wgt = (mn - b) / (A * (sd**2))
        wgt = max(wgt,1)
        expret= wgt*mn + (1-wgt)*b 
        sdret = wgt*sd   
    u = expret - 0.5*A*sdret**2
    return wgt

def figtbl(mn, sd, s, extra):
    mn /= 100
    sd /= 100
    b = s+extra
    s /= 100
    b /= 100

    ravers = np.arange(0.2,5.1,0.1)
    wgts = [opt_wgt(mn,sd,s,b,A) for A in ravers]
    
    string = "Risk Aversion: %{x:.2f} <br>Risky Asset Weight: %{y:.1%}<extra></extra>"
    trace1 = go.Scatter(
        x=ravers, y=wgts, mode="lines", hovertemplate=string, marker=dict(size=15), name='Optimal Weight'
    )       
    fig = go.Figure()
    fig.add_trace(trace1)
    fig.layout.xaxis["title"] = "Risk Aversion"
    fig.layout.yaxis["title"] = "Weight in Risky Asset"
    fig.update_yaxes(tickformat=".1%")
    fig.update_xaxes(tickformat=".2")
    fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.74))
    fig.show()
figtbl(mn, sd, s, extra)
```


### The Tangency CAL

In this section, we assume that risky saving and borrowing occur at the same rate.  With multiple risky assets, asset allocation decisions are made in two steps.  First, the optimal combination of risky assets, the tangency portfolio, is found.  With the same set of inputs for expected returns, standard deviations, and correlations, all investors find the tangency portfolio to be the optimal risky portfolio.  Investors will differ in the fraction of their wealth to invest in the tangency portfolio relative to the risk-free asset because investors with different risk aversions will find different portfolios on the tangency portfolio capital allocation line to be better than others. The optimal weight in the tangency portfolio is:
$$ w^*_{\text{tangency}} = \frac{E[r_{\text{tangency}}-r_f]}{A \cdot \text{var}_{\text{tangency}}}\,.$$ {#eq-opt-wgt-tangency}

@fig-tangency-and-preferences shows the indifference curves at the highest possible utility level for investors with the indicated risk aversions.  Investors with lower risk aversion will further up the capital allocation line, accepting greater risk for higher expected returns.

```{python}
#| label: fig-tangency-and-preferences
#| fig-cap: Preferences and Efficient Portfolios 
import numpy as np
import pandas as pd
import plotly.graph_objects as go

mn_stock = 6
mn_bond  = 3.5
sd_stock = 15
sd_bond  = 3.5
corr = -5

rs = 2
extra = 0

raver1 = 6
raver2 = 10

def data(mn1, mn2, sd1, sd2, c, rs, extra):
    c = c / 100
    rb = rs + extra   
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    sds = [sd1, sd2]
    grid = np.linspace(0, 1, 101)
    ports = [np.array([w, 1 - w]) for w in grid]
    means = [p.T @ np.array(mns) for p in ports]
    df = pd.DataFrame(means)
    df.columns = ["mean"]
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    df["stdev"] = [np.sqrt(p.T @ cov @ p) for p in ports]
    df["wt1"] = grid
    df["wt2"] = 1 - df.wt1
    for col in ["mean", "stdev"]:
        df[col] = df[col] / 100
    df["sr_s"]= (df["mean"] - rs)/df["stdev"]
    df["sr_b"]= (df["mean"] - rb)/df["stdev"]
   
    return df

def rf_plus_risky(mn, sd, rs, rb, w_min, w_max):
    mn /= 100
    sd /= 100
    rs /= 100
    rb /= 100
    grid = np.linspace(w_min, w_max, 201)
    mns = [(rs + w * (mn - rs) if w <= 1 else rb + w * (mn - rb)) for w in grid]
    sds = [w * sd for w in grid]
    srs = (mn - rs)/sd
    srb = (mn - rb)/sd
    return grid, mns, sds, srs, srb

def opt_utility(mns, cov, Shorts, s, b, A):
    # P is a portfolio object based on expected returns, covariance matrix, and shorts
    P = portfolio(mns, cov, Shorts) 
    gmv = P.GMV @ mns
    if s==b:
        #tangency exp ret and sd
        if (s < gmv) or (not Shorts):
            portTang = P.tangency(s)
            mnTang = portTang @ mns
            if mnTang < np.max(mns):
                sdTang = np.sqrt(portTang @ cov @ portTang)

                #optimal weight in tangency based on risk-aversion
                wgt = (mnTang - s) / (A * (sdTang**2))
                expret= wgt*mnTang + (1-wgt)*s
                sdret = wgt*sdTang 
                wgt_rf = 1-wgt
                wgt_lo = wgt
                wgt_hi = 0.0
    else:
        #efficient low-risk portfolio
        if (s < gmv) or (not Shorts):
            portTangLowRisk = P.tangency(s)
            mnTangLowRisk = portTangLowRisk @ mns
            if mnTangLowRisk < np.max(mns):
                sdTangLowRisk = np.sqrt(portTangLowRisk @ cov @ portTangLowRisk)

        #efficient high-risk portfolio
        if ((b<gmv) or (not Shorts)):
            portTangHighRisk = P.tangency(b)
            mnTangHighRisk = portTangHighRisk @ mns
            if mnTangHighRisk < np.max(mns):
                sdTangHighRisk = np.sqrt(portTangHighRisk @ cov @ portTangHighRisk)

        #1st: efficient low risk CAL
        wgt = (mnTangLowRisk - s) / (A * (sdTangLowRisk**2))
        expret= wgt*mnTangLowRisk + (1-wgt)*s
        sdret = wgt*sdTangLowRisk 
        wgt_rf = 1-wgt
        wgt_lo = wgt
        wgt_hi = 0.0
        # print('Weight low risk CAL: ', wgt)
        if wgt > 1.0:
            #2nd: efficient high risk CAL
            wgt = (mnTangHighRisk - b) / (A * (sdTangHighRisk**2))
            expret= wgt*mnTangHighRisk + (1-wgt)*b
            sdret = wgt*sdTangHighRisk 
            wgt_rf = 1-wgt
            wgt_lo = 0.0
            wgt_hi = wgt
            # print('Weight high risk CAL: ', wgt)
            if wgt < 1.0:
                #3rd: risky asset frontier
                wgt = 1 #This is should be interpreted as total weight in risky assets.
                # Method 1: solve analytically for utility-maximizing mix of efficient low and high risk portfolios
                cov_hilo = portTangLowRisk.T @cov @ portTangHighRisk
                wgt_lo = (mnTangLowRisk - mnTangHighRisk - A *(cov_hilo  - sdTangHighRisk**2))/(A*(sdTangLowRisk**2 + sdTangHighRisk**2 - 2*cov_hilo))
                expret = wgt_lo*mnTangLowRisk + (1-wgt_lo)* mnTangHighRisk
                sdret = np.sqrt((wgt_lo**2) *sdTangLowRisk**2 + ((1-wgt_lo)**2) * sdTangHighRisk**2 + 2*wgt_lo*(1-wgt_lo)*portTangLowRisk.T @cov @ portTangHighRisk)
                wgt_hi = 1-wgt_lo
                wgt_rf = 0.0

                # #Method 2: calculate frontier manually and choose max utility
                # eret_grid = np.linspace(mnTangLowRisk, mnTangHighRisk, 100)
                # df = pd.DataFrame(dtype='float', columns=['mn','sd','u'],index=np.arange(0,100))
                # for i,m in enumerate(eret_grid):
                #     portFrontier = P.frontier(m)
                #     df.loc[i,'mn'] = portFrontier @ mns
                #     df.loc[i,'sd'] = np.sqrt(portFrontier @ cov @ portFrontier)
                # df['u']  = df['mn'] - 0.5*A* df['sd']**2
                # opt_mn = df.loc[df['u'].idxmax(),'mn']
                # portFrontier = P.frontier(opt_mn)
                # expret = portFrontier @ mns
                # sdret  = np.sqrt(portFrontier @ cov @ portFrontier)
                # print('Weight frontier: ', wgt)

    u = expret - 0.5*A*sdret**2
    return u, wgt, wgt_rf, wgt_lo, wgt_hi



def figtbl(mn1, mn2, sd1, sd2, c, rs, extra, raver1, raver2, asset1_name, asset2_name):
    df = data(mn1, mn2, sd1, sd2, c, rs, extra)
    
    #Plot the portfolios of the two assets
    trace1 = go.Scatter(
        x=df["stdev"],
        y=df["mean"],
        mode="lines",
        # line={'color': green},
        text=100 * df["wt1"],
        customdata=100 * df["wt2"],
        hovertemplate=asset1_name+": %{text:.0f}%<br>"+asset2_name+": %{customdata:.0f}%<extra></extra>",
        line=dict(color="black"),
        name="Stock & Bond Frontier"
    )
    
    # Plot the two assets
    df = df[df.wt1.isin([0, 1])]
    df["text"] = np.where(df.wt1 == 1, asset1_name, asset2_name)
    trace2a = go.Scatter(
        x=df[df.wt1==1]["stdev"],
        y=df[df.wt1==1]["mean"],
        mode="markers",
        text=df[df.wt1==1]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="orange"),
        name=asset1_name
    )
    trace2b = go.Scatter(
        x=df[df.wt1==0]["stdev"],
        y=df[df.wt1==0]["mean"],
        mode="markers",
        text=df[df.wt1==0]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="red"),
        name=asset2_name
    )

    fig = go.Figure()
    fig.add_trace(trace2a)
    fig.add_trace(trace2b)
    fig.add_trace(trace1)



    def custom(string, ports,srTang,borrow_flag):
        # borrow_flag=1 adds statement about "relative to borrowing rate"
        cd = np.empty(shape=(len(ports), N+1, 1), dtype=float)
        for i in range(N):
            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)
        cd[:,N] = np.round(srTang,4)
        # print(cd)
        string += "<br>"
        for i in range(N):
            string += "asset " + str(i + 1)
            string += ": %{customdata["
            string += str(i)
            string += "]:.1%}<br>"
        if borrow_flag==1:
            string += "Sharpe ratio (relative to borrowing rate): %{customdata[" +  str(N) + "]:.4f}<br>"    
        else:
            string += "Sharpe ratio: %{customdata[" +  str(N) + "]:.4f}<br>"
        string += "<extra></extra>"
        return string, cd  

    # Plot the tangency portfolios
    c = c / 100
    rb = rs + extra     
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    mns = np.array(mns) / 100
    sds = [sd1, sd2]
    sds = np.array(sds) / 100
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    
    Shorts = 0.0     
    N = len(mns)
    P = portfolio(mns, cov, Shorts)    
    gmv = P.GMV @ mns
    # print('GMV return is: ',gmv)
    if (rs < gmv) or (not Shorts):
        portTang = P.tangency(rs)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rs)/sdTang
            string0 = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'
            string, cd = custom(string0, [portTang], srTang,0)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name=string0
            )
            fig.add_trace(trace)
            
            #Plot CAL (no leverage)
            if rb==rs:
                max_wgt = 4.0
            else:
                max_wgt = 1.0
            grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mnTang*100, sdTang*100, rs*100,rb*100,0, max_wgt)
            portlabel = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'
            string = "wealth in "+portlabel + " = %{text:.0f}%<br>" + "Sharpe ratio: " +  "{:.4f}".format(srTang) +"<extra></extra>"
            trace5 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string, 
                line=dict(color="blue"),
                name="CAL: " + portlabel
            )           
            fig.add_trace(trace5)
              
            
            

    if (rb != rs) and ((gmv > rb) or (not Shorts)):
        portTang = P.tangency(rb)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rb)/sdTang
            string = 'efficient high mean portfolio'
            string, cd = custom(string, [portTang], srTang,1)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name="efficient high mean portfolio"
            )
            fig.add_trace(trace)
            
            #Plot CAL (with leverage)            
            grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mnTang*100, sdTang*100, rs*100,rb*100, 1.0, 1.5)
            string = "wealth in efficient high mean portfolio = %{text:.0f}%<br>" + "Sharpe ratio (relative to borrowing rate): " + "{:.4f}".format(srTang) +"<extra></extra>"
            trace6 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string,
                line=dict(color="blue"),
                name = "CAL: efficient high mean"
            )           
            fig.add_trace(trace6)   
 


    # Utility plot info
    u1, wgt1, wgt_rf1, wgt_lo1, wgt_hi1 = opt_utility(mns, cov, Shorts, rs, rb, raver1)
    u2, wgt2, wgt_rf2, wgt_lo2, wgt_hi2 = opt_utility(mns, cov, Shorts, rs, rb, raver2)
    string1='Risk Aversion='+str(raver1)
    string2='Risk Aversion='+str(raver2)
    grid = np.linspace(0,1.4,100)
    sds = [w*np.max(sds) for w in grid]
    eret1 = [u1 + 0.5*raver1* (sd**2) for sd in sds]
    eret2 = [u2 + 0.5*raver2* (sd**2) for sd in sds] 
    # df = pd.DataFrame(data={'Standard Deviation': sds, string1: U1, string2: U2})
    string = "indifference curve for <br> optimal utility for risk aversion of "+str(np.round(raver1,1))+"<extra></extra>"
    trace7 = go.Scatter(
        x=sds, y=eret1, mode="lines", hovertemplate=string, name=string1, line=dict(color="purple",dash='dot'),
    )  
    string = "indifference curve for <br> optimal utility for risk aversion of "+str(np.round(raver2,1))+"<extra></extra>"
    trace8 = go.Scatter(
        x=sds, y=eret2, mode="lines", hovertemplate=string, name=string2, line=dict(color="purple"),
    )  
    fig.add_trace(trace7) 
    fig.add_trace(trace8) 
 
    
    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"
    fig.update_xaxes(range=[0, 1.25 * df["stdev"].max()])
    fig.update_yaxes(range=[0, 1.25 * df["mean"].max()])
    fig.update_yaxes(tickformat=".0%")
    fig.update_xaxes(tickformat=".0%")
    fig.update_layout(legend=dict(yanchor="top", y =0.5, xanchor="left", x=0.6))
    fig.show()

figtbl(mn_stock,mn_bond,sd_stock,sd_bond,corr,rs,extra,raver1, raver2, "Stock","Bond")
```

@fig-tangency-cal-allocation-by-riskaversion plots the tangency portfolio weight (@eq-opt-wgt-tangency) as a function of risk aversion.  For the assumed inputs, investors with risk aversions below about 15 would choose a levered position in the tangency portfolio.  That is, they would find it optimal to borrow money and invest it and their initial investment wealth in the tangency portfolio.

```{python}
#| label: fig-tangency-cal-allocation-by-riskaversion
#| fig-cap: Preferences and Efficient Portfolios 
import numpy as np
import pandas as pd
import plotly.graph_objects as go

mn_stock = 6
mn_bond  = 3.5
sd_stock = 15
sd_bond  = 3.5
corr = -5

rs = 2
extra = 0

raver1 = 2
raver2 = 5

def data(mn1, mn2, sd1, sd2, c, rs, extra):
    c = c / 100
    rb = rs + extra   
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    sds = [sd1, sd2]
    grid = np.linspace(0, 1, 101)
    ports = [np.array([w, 1 - w]) for w in grid]
    means = [p.T @ np.array(mns) for p in ports]
    df = pd.DataFrame(means)
    df.columns = ["mean"]
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    df["stdev"] = [np.sqrt(p.T @ cov @ p) for p in ports]
    df["wt1"] = grid
    df["wt2"] = 1 - df.wt1
    for col in ["mean", "stdev"]:
        df[col] = df[col] / 100
    df["sr_s"]= (df["mean"] - rs)/df["stdev"]
    df["sr_b"]= (df["mean"] - rb)/df["stdev"]
   
    return df

def rf_plus_risky(mn, sd, rs, rb, w_min, w_max):
    mn /= 100
    sd /= 100
    rs /= 100
    rb /= 100
    grid = np.linspace(w_min, w_max, 201)
    mns = [(rs + w * (mn - rs) if w <= 1 else rb + w * (mn - rb)) for w in grid]
    sds = [w * sd for w in grid]
    srs = (mn - rs)/sd
    srb = (mn - rb)/sd
    return grid, mns, sds, srs, srb

def opt_utility(mns, cov, Shorts, s, b, A):
    # P is a portfolio object based on expected returns, covariance matrix, and shorts
    P = portfolio(mns, cov, Shorts) 
    gmv = P.GMV @ mns
    if s==b:
        #tangency exp ret and sd
        if (s < gmv) or (not Shorts):
            portTang = P.tangency(s)
            mnTang = portTang @ mns
            if mnTang < np.max(mns):
                sdTang = np.sqrt(portTang @ cov @ portTang)

                #optimal weight in tangency based on risk-aversion
                wgt = (mnTang - s) / (A * (sdTang**2))
                expret= wgt*mnTang + (1-wgt)*s
                sdret = wgt*sdTang 
                wgt_rf = 1-wgt
                wgt_lo = wgt
                wgt_hi = 0.0
    else:
        #efficient low-risk portfolio
        if (s < gmv) or (not Shorts):
            portTangLowRisk = P.tangency(s)
            mnTangLowRisk = portTangLowRisk @ mns
            if mnTangLowRisk < np.max(mns):
                sdTangLowRisk = np.sqrt(portTangLowRisk @ cov @ portTangLowRisk)

        #efficient high-risk portfolio
        if ((b<gmv) or (not Shorts)):
            portTangHighRisk = P.tangency(b)
            mnTangHighRisk = portTangHighRisk @ mns
            if mnTangHighRisk < np.max(mns):
                sdTangHighRisk = np.sqrt(portTangHighRisk @ cov @ portTangHighRisk)

        #1st: efficient low risk CAL
        wgt = (mnTangLowRisk - s) / (A * (sdTangLowRisk**2))
        expret= wgt*mnTangLowRisk + (1-wgt)*s
        sdret = wgt*sdTangLowRisk 
        wgt_rf = 1-wgt
        wgt_lo = wgt
        wgt_hi = 0.0
        # print('Weight low risk CAL: ', wgt)
        if wgt > 1.0:
            #2nd: efficient high risk CAL
            wgt = (mnTangHighRisk - b) / (A * (sdTangHighRisk**2))
            expret= wgt*mnTangHighRisk + (1-wgt)*b
            sdret = wgt*sdTangHighRisk 
            wgt_rf = 1-wgt
            wgt_lo = 0.0
            wgt_hi = wgt
            # print('Weight high risk CAL: ', wgt)
            if wgt < 1.0:
                #3rd: risky asset frontier
                wgt = 1 #This is should be interpreted as total weight in risky assets.
                # Method 1: solve analytically for utility-maximizing mix of efficient low and high risk portfolios
                cov_hilo = portTangLowRisk.T @cov @ portTangHighRisk
                wgt_lo = (mnTangLowRisk - mnTangHighRisk - A *(cov_hilo  - sdTangHighRisk**2))/(A*(sdTangLowRisk**2 + sdTangHighRisk**2 - 2*cov_hilo))
                expret = wgt_lo*mnTangLowRisk + (1-wgt_lo)* mnTangHighRisk
                sdret = np.sqrt((wgt_lo**2) *sdTangLowRisk**2 + ((1-wgt_lo)**2) * sdTangHighRisk**2 + 2*wgt_lo*(1-wgt_lo)*portTangLowRisk.T @cov @ portTangHighRisk)
                wgt_hi = 1-wgt_lo
                wgt_rf = 0.0

                # #Method 2: calculate frontier manually and choose max utility
                # eret_grid = np.linspace(mnTangLowRisk, mnTangHighRisk, 100)
                # df = pd.DataFrame(dtype='float', columns=['mn','sd','u'],index=np.arange(0,100))
                # for i,m in enumerate(eret_grid):
                #     portFrontier = P.frontier(m)
                #     df.loc[i,'mn'] = portFrontier @ mns
                #     df.loc[i,'sd'] = np.sqrt(portFrontier @ cov @ portFrontier)
                # df['u']  = df['mn'] - 0.5*A* df['sd']**2
                # opt_mn = df.loc[df['u'].idxmax(),'mn']
                # portFrontier = P.frontier(opt_mn)
                # expret = portFrontier @ mns
                # sdret  = np.sqrt(portFrontier @ cov @ portFrontier)
                # print('Weight frontier: ', wgt)

    u = expret - 0.5*A*sdret**2
    return u, wgt, wgt_rf, wgt_lo, wgt_hi



def figtbl(mn1, mn2, sd1, sd2, c, rs, extra, raver1, raver2, asset1_name, asset2_name):
    df = data(mn1, mn2, sd1, sd2, c, rs, extra)
    
    #Plot the portfolios of the two assets
    trace1 = go.Scatter(
        x=df["stdev"],
        y=df["mean"],
        mode="lines",
        # line={'color': green},
        text=100 * df["wt1"],
        customdata=100 * df["wt2"],
        hovertemplate=asset1_name+": %{text:.0f}%<br>"+asset2_name+": %{customdata:.0f}%<extra></extra>",
        line=dict(color="black"),
        name="Stock & Bond Frontier"
    )
    
    # Plot the two assets
    df = df[df.wt1.isin([0, 1])]
    df["text"] = np.where(df.wt1 == 1, asset1_name, asset2_name)
    trace2a = go.Scatter(
        x=df[df.wt1==1]["stdev"],
        y=df[df.wt1==1]["mean"],
        mode="markers",
        text=df[df.wt1==1]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="orange"),
        name=asset1_name
    )
    trace2b = go.Scatter(
        x=df[df.wt1==0]["stdev"],
        y=df[df.wt1==0]["mean"],
        mode="markers",
        text=df[df.wt1==0]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="red"),
        name=asset2_name
    )

    fig = go.Figure()
    fig.add_trace(trace2a)
    fig.add_trace(trace2b)
    fig.add_trace(trace1)



    def custom(string, ports,srTang,borrow_flag):
        # borrow_flag=1 adds statement about "relative to borrowing rate"
        cd = np.empty(shape=(len(ports), N+1, 1), dtype=float)
        for i in range(N):
            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)
        cd[:,N] = np.round(srTang,4)
        # print(cd)
        string += "<br>"
        for i in range(N):
            string += "asset " + str(i + 1)
            string += ": %{customdata["
            string += str(i)
            string += "]:.1%}<br>"
        if borrow_flag==1:
            string += "Sharpe ratio (relative to borrowing rate): %{customdata[" +  str(N) + "]:.4f}<br>"    
        else:
            string += "Sharpe ratio: %{customdata[" +  str(N) + "]:.4f}<br>"
        string += "<extra></extra>"
        return string, cd  

    # Plot the tangency portfolios
    c = c / 100
    rb = rs + extra     
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    mns = np.array(mns) / 100
    sds = [sd1, sd2]
    sds = np.array(sds) / 100
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    
    Shorts = 0.0     
    N = len(mns)
    P = portfolio(mns, cov, Shorts)    
    gmv = P.GMV @ mns
    # print('GMV return is: ',gmv)
    if (rs < gmv) or (not Shorts):
        portTang = P.tangency(rs)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rs)/sdTang
            string0 = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'
            string, cd = custom(string0, [portTang], srTang,0)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name=string0
            )
            fig.add_trace(trace)
            
            #Plot CAL (no leverage)
            if rb==rs:
                max_wgt = 4.0
            else:
                max_wgt = 1.0
            grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mnTang*100, sdTang*100, rs*100,rb*100,0, max_wgt)
            portlabel = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'
            string = "wealth in "+portlabel + " = %{text:.0f}%<br>" + "Sharpe ratio: " +  "{:.4f}".format(srTang) +"<extra></extra>"
            trace5 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string, 
                line=dict(color="blue"),
                name="CAL: " + portlabel
            )           
            fig.add_trace(trace5)
              
            
            

    if (rb != rs) and ((gmv > rb) or (not Shorts)):
        portTang = P.tangency(rb)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rb)/sdTang
            string = 'efficient high mean portfolio'
            string, cd = custom(string, [portTang], srTang,1)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name="efficient high mean portfolio"
            )
            fig.add_trace(trace)
            
            #Plot CAL (with leverage)            
            grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mnTang*100, sdTang*100, rs*100,rb*100, 1.0, 1.5)
            string = "wealth in efficient high mean portfolio = %{text:.0f}%<br>" + "Sharpe ratio (relative to borrowing rate): " + "{:.4f}".format(srTang) +"<extra></extra>"
            trace6 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string,
                line=dict(color="blue"),
                name = "CAL: efficient high mean"
            )           
            fig.add_trace(trace6)   
 




    # Utility plot info
    u1, wgt1, wgt_rf1, wgt_lo1, wgt_hi1 = opt_utility(mns, cov, Shorts, rs, rb, raver1)
    u2, wgt2, wgt_rf2, wgt_lo2, wgt_hi2 = opt_utility(mns, cov, Shorts, rs, rb, raver2)
    string1='Risk Aversion='+str(raver1)
    string2='Risk Aversion='+str(raver2)
    grid = np.linspace(0,1.4,100)
    sds = [w*np.max(sds) for w in grid]
    eret1 = [u1 + 0.5*raver1* (sd**2) for sd in sds]
    eret2 = [u2 + 0.5*raver2* (sd**2) for sd in sds] 
    # df = pd.DataFrame(data={'Standard Deviation': sds, string1: U1, string2: U2})
    string = "indifference curve for <br> optimal utility for risk aversion of "+str(np.round(raver1,1))+"<extra></extra>"
    trace7 = go.Scatter(
        x=sds, y=eret1, mode="lines", hovertemplate=string, name=string1, line=dict(color="purple",dash='dot'),
    )  
    string = "indifference curve for <br> optimal utility for risk aversion of "+str(np.round(raver2,1))+"<extra></extra>"
    trace8 = go.Scatter(
        x=sds, y=eret2, mode="lines", hovertemplate=string, name=string2, line=dict(color="purple"),
    )  
    fig.add_trace(trace7) 
    fig.add_trace(trace8) 
 
    
    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"
    fig.update_xaxes(range=[0, 1.25 * df["stdev"].max()])
    fig.update_yaxes(range=[0, 1.25 * df["mean"].max()])
    fig.update_yaxes(tickformat=".0%")
    fig.update_xaxes(tickformat=".0%")
    fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.74))
    # fig.show()


    #2nd plot of risky asset share as function of risk aversion:
    ravers = np.arange(0.2,20,0.1)
    cd = np.empty(shape=(len(ravers),5,1),dtype=float)
    wgts = [opt_utility(mns, cov, Shorts, rs, rb, A) for A in ravers]
    df = pd.DataFrame(wgts, columns=['u','wgt_risky','wgt_rf','wgt_lowrisk','wgt_highrisk'])
    if (rb != rs):
        custdat = np.empty(shape=(df.shape[0],3,1), dtype=float)
        custdat[:,0] = np.array(100*df.wgt_rf).reshape(-1,1)
        custdat[:,1] = np.array(100*df.wgt_lowrisk).reshape(-1,1)
        custdat[:,2] = np.array(100*df.wgt_highrisk).reshape(-1,1)
        string = 'risk-free: %{customdata[0]:.0f}%<br>'
        string+= 'efficient low-risk: %{customdata[1]:.0f}%<br>'
        string+= 'efficient high-risk: %{customdata[2]:.0f}%<br>'
        string+= '<extra></extra>'
        trace1 = go.Scatter(x=ravers,y=df['wgt_risky'],mode='lines',customdata=custdat,hovertemplate=string, line=dict(color="orange"))
        fig = go.Figure()
        fig.add_trace(trace1)
    else:
        custdat = np.empty(shape=(df.shape[0],2,1), dtype=float)
        custdat[:,0] = np.array(100*df.wgt_rf).reshape(-1,1)
        custdat[:,1] = np.array(100*df.wgt_lowrisk).reshape(-1,1)
        string = 'risk-free: %{customdata[0]:.0f}%<br>'
        string+= 'tangency: %{customdata[1]:.0f}%<br>'
        string+= '<extra></extra>'
        trace1 = go.Scatter(x=ravers,y=df['wgt_risky'],mode='lines',customdata=custdat,hovertemplate=string, line=dict(color="orange"))
        fig = go.Figure()
        fig.add_trace(trace1)       
    fig.layout.xaxis["title"] = "Risk Aversion"
    fig.layout.yaxis["title"] = "Weight in Risky Assets"
    fig.update_yaxes(tickformat=".1%")
    fig.update_xaxes(tickformat=".2")
    fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.74))
    fig.show()


figtbl(mn_stock,mn_bond,sd_stock,sd_bond,corr,rs,extra,raver1, raver2, "Stock","Bond")
```


### Capital Allocation with Differential Borrowing & Lending Rates

Now we again allow for risk-free borrowing to occur at a higher rate than risk-free saving: $r_f^{\text{borrow}}>r_f^{\text{saving}}$.  @sec-multiple-cals discussed how the set of efficient portfolios changes under this more realistic assumption.  A portion of the efficient set was the risky asset frontier between an efficient low risk portfolio $r_{\text{low}}$ and an efficient high mean portfolio $r_{\text{high}}$.  

Where do investors with different risk aversions choose to invest when faced with this investment opportunity set?  The utility-maximizing investment will invest $w^*_{\text{low}}$ in the efficient low risk portfolio, $w^*_{\text{high}}$ in the efficient high mean portfolio, and the remaining $1-w^*_{\text{low}}-w^*_{\text{high}}$ in risk-free saving or borrowing.  The optimal weights in the two risky asset portfolios are:

\begin{equation}
w^*_{\text{low}} = \begin{cases}
    \frac{E[r_{\text{low}}-r_f^{\text{saving}}]}{A \cdot \text{var}_{\text{low}}} & \text{if } A > \frac{E[r_{\text{low}}-r_f^{\text{saving}}]}{\text{var}_{\text{risky}}} \\
    a^* & \text{if } \frac{E[r_{\text{high}}-r_f^{\text{borrow}}]}{ \text{var}_{\text{high}}} \le A \le \frac{E[r_{\text{low}}-r_f^{\text{saving}}]}{\text{var}_{\text{low}}} \\
    0\% & \text{if } A < \frac{E[r_{\text{high}}-r_f^{\text{borrow}}]}{ \text{var}_{\text{high}}} \,. \\
\end{cases}
\end{equation}
\begin{equation}
w^*_{\text{high}} = \begin{cases}
    0\% & \text{if } A > \frac{E[r_{\text{low}}-r_f^{\text{saving}}]}{\text{var}_{\text{risky}}} \\
    1-a^* & \text{if } \frac{E[r_{\text{high}}-r_f^{\text{borrow}}]}{ \text{var}_{\text{high}}} \le A \le \frac{E[r_{\text{low}}-r_f^{\text{saving}}]}{\text{var}_{\text{low}}} \\
    \frac{E[r_{\text{high}}-r_f^{\text{borrow}}]}{A \cdot \text{var}_{\text{high}}} & \text{if } A < \frac{E[r_{\text{high}}-r_f^{\text{borrow}}]}{ \text{var}_{\text{high}}} \,. \\
\end{cases}
\end{equation}
where $a^*$ is defined as:^[For intermediate risk aversion levels, the optimal weight in the efficient low-risk portfolio solves $$ \underset{a}\max E[a\cdot r_{\text{low}} + (1-a)\cdot r_{\text{high}}] - 0.5\cdot A \cdot \text{var}[a\cdot r_{\text{low}} + (1-a)\cdot r_{\text{high}}]\,. $$  The covariance between the efficient low risk and high mean portfolios ($\text{cov}[r_{\text{low}}, r_{\text{high}}$) can be calculated as $w_{\text{low}}' V w_{\text{high}}$.]
$$ a^* = \frac{E[r_{\text{low}} - r_{\text{high}}] - A (\text{cov}[r_{\text{low}}, r_{\text{high}}]-\text{var}[r_{\text{high}}])}{A (\text{var}[r_{\text{low}}]+\text{var}[r_{\text{high}}]-2\text{cov}[r_{\text{low}}, r_{\text{high}}])}\,.$$ {#eq-frontier-optimal}




@fig-diffsaveborrow-and-preferences shows indifference curves at the highest possible utility level for investors with the indicated risk aversions. The portfolio where each indifference curve intersects the efficient frontier is that investor's optimal portfolio.

```{python}
#| label: fig-diffsaveborrow-and-preferences
#| fig-cap: Preferences and Efficient Portfolios 
import numpy as np
import pandas as pd
import plotly.graph_objects as go

mn_stock = 6
mn_bond  = 3.5
sd_stock = 15
sd_bond  = 3.5
corr = -5

rs = 2
extra = 2

raver1 = 2
raver2 = 5

def data(mn1, mn2, sd1, sd2, c, rs, extra):
    c = c / 100
    rb = rs + extra   
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    sds = [sd1, sd2]
    grid = np.linspace(0, 1, 101)
    ports = [np.array([w, 1 - w]) for w in grid]
    means = [p.T @ np.array(mns) for p in ports]
    df = pd.DataFrame(means)
    df.columns = ["mean"]
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    df["stdev"] = [np.sqrt(p.T @ cov @ p) for p in ports]
    df["wt1"] = grid
    df["wt2"] = 1 - df.wt1
    for col in ["mean", "stdev"]:
        df[col] = df[col] / 100
    df["sr_s"]= (df["mean"] - rs)/df["stdev"]
    df["sr_b"]= (df["mean"] - rb)/df["stdev"]
   
    return df

def rf_plus_risky(mn, sd, rs, rb, w_min, w_max):
    mn /= 100
    sd /= 100
    rs /= 100
    rb /= 100
    grid = np.linspace(w_min, w_max, 201)
    mns = [(rs + w * (mn - rs) if w <= 1 else rb + w * (mn - rb)) for w in grid]
    sds = [w * sd for w in grid]
    srs = (mn - rs)/sd
    srb = (mn - rb)/sd
    return grid, mns, sds, srs, srb

def opt_utility(mns, cov, Shorts, s, b, A):
    # P is a portfolio object based on expected returns, covariance matrix, and shorts
    P = portfolio(mns, cov, Shorts) 
    gmv = P.GMV @ mns
    if s==b:
        #tangency exp ret and sd
        if (s < gmv) or (not Shorts):
            portTang = P.tangency(s)
            mnTang = portTang @ mns
            if mnTang < np.max(mns):
                sdTang = np.sqrt(portTang @ cov @ portTang)

                #optimal weight in tangency based on risk-aversion
                wgt = (mnTang - s) / (A * (sdTang**2))
                expret= wgt*mnTang + (1-wgt)*s
                sdret = wgt*sdTang 
                wgt_rf = 1-wgt
                wgt_lo = wgt
                wgt_hi = 0.0
    else:
        #efficient low-risk portfolio
        if (s < gmv) or (not Shorts):
            portTangLowRisk = P.tangency(s)
            mnTangLowRisk = portTangLowRisk @ mns
            if mnTangLowRisk < np.max(mns):
                sdTangLowRisk = np.sqrt(portTangLowRisk @ cov @ portTangLowRisk)

        #efficient high-risk portfolio
        if ((b<gmv) or (not Shorts)):
            portTangHighRisk = P.tangency(b)
            mnTangHighRisk = portTangHighRisk @ mns
            if mnTangHighRisk < np.max(mns):
                sdTangHighRisk = np.sqrt(portTangHighRisk @ cov @ portTangHighRisk)

        #1st: efficient low risk CAL
        wgt = (mnTangLowRisk - s) / (A * (sdTangLowRisk**2))
        expret= wgt*mnTangLowRisk + (1-wgt)*s
        sdret = wgt*sdTangLowRisk 
        wgt_rf = 1-wgt
        wgt_lo = wgt
        wgt_hi = 0.0
        # print('Weight low risk CAL: ', wgt)
        if wgt > 1.0:
            #2nd: efficient high risk CAL
            wgt = (mnTangHighRisk - b) / (A * (sdTangHighRisk**2))
            expret= wgt*mnTangHighRisk + (1-wgt)*b
            sdret = wgt*sdTangHighRisk 
            wgt_rf = 1-wgt
            wgt_lo = 0.0
            wgt_hi = wgt
            # print('Weight high risk CAL: ', wgt)
            if wgt < 1.0:
                #3rd: risky asset frontier
                wgt = 1 #This is should be interpreted as total weight in risky assets.
                # Method 1: solve analytically for utility-maximizing mix of efficient low and high risk portfolios
                cov_hilo = portTangLowRisk.T @cov @ portTangHighRisk
                wgt_lo = (mnTangLowRisk - mnTangHighRisk - A *(cov_hilo  - sdTangHighRisk**2))/(A*(sdTangLowRisk**2 + sdTangHighRisk**2 - 2*cov_hilo))
                expret = wgt_lo*mnTangLowRisk + (1-wgt_lo)* mnTangHighRisk
                sdret = np.sqrt((wgt_lo**2) *sdTangLowRisk**2 + ((1-wgt_lo)**2) * sdTangHighRisk**2 + 2*wgt_lo*(1-wgt_lo)*portTangLowRisk.T @cov @ portTangHighRisk)
                wgt_hi = 1-wgt_lo
                wgt_rf = 0.0

                # #Method 2: calculate frontier manually and choose max utility
                # eret_grid = np.linspace(mnTangLowRisk, mnTangHighRisk, 100)
                # df = pd.DataFrame(dtype='float', columns=['mn','sd','u'],index=np.arange(0,100))
                # for i,m in enumerate(eret_grid):
                #     portFrontier = P.frontier(m)
                #     df.loc[i,'mn'] = portFrontier @ mns
                #     df.loc[i,'sd'] = np.sqrt(portFrontier @ cov @ portFrontier)
                # df['u']  = df['mn'] - 0.5*A* df['sd']**2
                # opt_mn = df.loc[df['u'].idxmax(),'mn']
                # portFrontier = P.frontier(opt_mn)
                # expret = portFrontier @ mns
                # sdret  = np.sqrt(portFrontier @ cov @ portFrontier)
                # print('Weight frontier: ', wgt)

    u = expret - 0.5*A*sdret**2
    return u, wgt, wgt_rf, wgt_lo, wgt_hi



def figtbl(mn1, mn2, sd1, sd2, c, rs, extra, raver1, raver2, asset1_name, asset2_name):
    df = data(mn1, mn2, sd1, sd2, c, rs, extra)
    
    #Plot the portfolios of the two assets
    trace1 = go.Scatter(
        x=df["stdev"],
        y=df["mean"],
        mode="lines",
        # line={'color': green},
        text=100 * df["wt1"],
        customdata=100 * df["wt2"],
        hovertemplate=asset1_name+": %{text:.0f}%<br>"+asset2_name+": %{customdata:.0f}%<extra></extra>",
        line=dict(color="black"),
        name="Stock & Bond Frontier"
    )
    
    # Plot the two assets
    df = df[df.wt1.isin([0, 1])]
    df["text"] = np.where(df.wt1 == 1, asset1_name, asset2_name)
    trace2a = go.Scatter(
        x=df[df.wt1==1]["stdev"],
        y=df[df.wt1==1]["mean"],
        mode="markers",
        text=df[df.wt1==1]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="orange"),
        name=asset1_name
    )
    trace2b = go.Scatter(
        x=df[df.wt1==0]["stdev"],
        y=df[df.wt1==0]["mean"],
        mode="markers",
        text=df[df.wt1==0]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="red"),
        name=asset2_name
    )

    fig = go.Figure()
    fig.add_trace(trace2a)
    fig.add_trace(trace2b)
    fig.add_trace(trace1)



    def custom(string, ports,srTang,borrow_flag):
        # borrow_flag=1 adds statement about "relative to borrowing rate"
        cd = np.empty(shape=(len(ports), N+1, 1), dtype=float)
        for i in range(N):
            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)
        cd[:,N] = np.round(srTang,4)
        # print(cd)
        string += "<br>"
        for i in range(N):
            string += "asset " + str(i + 1)
            string += ": %{customdata["
            string += str(i)
            string += "]:.1%}<br>"
        if borrow_flag==1:
            string += "Sharpe ratio (relative to borrowing rate): %{customdata[" +  str(N) + "]:.4f}<br>"    
        else:
            string += "Sharpe ratio: %{customdata[" +  str(N) + "]:.4f}<br>"
        string += "<extra></extra>"
        return string, cd  

    # Plot the tangency portfolios
    c = c / 100
    rb = rs + extra     
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    mns = np.array(mns) / 100
    sds = [sd1, sd2]
    sds = np.array(sds) / 100
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    
    Shorts = 0.0     
    N = len(mns)
    P = portfolio(mns, cov, Shorts)    
    gmv = P.GMV @ mns
    # print('GMV return is: ',gmv)
    if (rs < gmv) or (not Shorts):
        portTang = P.tangency(rs)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rs)/sdTang
            string0 = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'
            string, cd = custom(string0, [portTang], srTang,0)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name=string0
            )
            fig.add_trace(trace)
            
            #Plot CAL (no leverage)
            if rb==rs:
                max_wgt = 4.0
            else:
                max_wgt = 1.0
            grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mnTang*100, sdTang*100, rs*100,rb*100,0, max_wgt)
            portlabel = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'
            string = "wealth in "+portlabel + " = %{text:.0f}%<br>" + "Sharpe ratio: " +  "{:.4f}".format(srTang) +"<extra></extra>"
            trace5 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string, 
                line=dict(color="blue"),
                name="CAL: " + portlabel
            )           
            fig.add_trace(trace5)
              
            
            

    if (rb != rs) and ((gmv > rb) or (not Shorts)):
        portTang = P.tangency(rb)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rb)/sdTang
            string = 'efficient high mean portfolio'
            string, cd = custom(string, [portTang], srTang,1)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name="efficient high mean portfolio"
            )
            fig.add_trace(trace)
            
            #Plot CAL (with leverage)            
            grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mnTang*100, sdTang*100, rs*100,rb*100, 1.0, 1.5)
            string = "wealth in efficient high mean portfolio = %{text:.0f}%<br>" + "Sharpe ratio (relative to borrowing rate): " + "{:.4f}".format(srTang) +"<extra></extra>"
            trace6 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string,
                line=dict(color="blue"),
                name = "CAL: efficient high mean"
            )           
            fig.add_trace(trace6)   
 


    # Utility plot info
    u1, wgt1, wgt_rf1, wgt_lo1, wgt_hi1 = opt_utility(mns, cov, Shorts, rs, rb, raver1)
    u2, wgt2, wgt_rf2, wgt_lo2, wgt_hi2 = opt_utility(mns, cov, Shorts, rs, rb, raver2)
    string1='Risk Aversion='+str(raver1)
    string2='Risk Aversion='+str(raver2)
    grid = np.linspace(0,1.4,100)
    sds = [w*np.max(sds) for w in grid]
    eret1 = [u1 + 0.5*raver1* (sd**2) for sd in sds]
    eret2 = [u2 + 0.5*raver2* (sd**2) for sd in sds] 
    # df = pd.DataFrame(data={'Standard Deviation': sds, string1: U1, string2: U2})
    string = "indifference curve for <br> optimal utility for risk aversion of "+str(np.round(raver1,1))+"<extra></extra>"
    trace7 = go.Scatter(
        x=sds, y=eret1, mode="lines", hovertemplate=string, name=string1, line=dict(color="purple",dash='dot'),
    )  
    string = "indifference curve for <br> optimal utility for risk aversion of "+str(np.round(raver2,1))+"<extra></extra>"
    trace8 = go.Scatter(
        x=sds, y=eret2, mode="lines", hovertemplate=string, name=string2, line=dict(color="purple"),
    )  
    fig.add_trace(trace7) 
    fig.add_trace(trace8) 
 
    
    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"
    fig.update_xaxes(range=[0, 1.25 * df["stdev"].max()])
    fig.update_yaxes(range=[0, 1.25 * df["mean"].max()])
    fig.update_yaxes(tickformat=".0%")
    fig.update_xaxes(tickformat=".0%")
    fig.update_layout(legend=dict(yanchor="top", y =0.55, xanchor="left", x=0.6))
    fig.show()

figtbl(mn_stock,mn_bond,sd_stock,sd_bond,corr,rs,extra,raver1, raver2, "Stock","Bond")
```

@fig-diffsaveborrow-cal-allocation-by-riskaversion plots the allocation to risky assets as a function of risk aversion. Investors with very low levels of risk aversion will hold levered portfolios in the efficient high mean portfolio, and investors with very high levels of risk aversion will hold save some capital at the risk-free rate and the remainder in the efficient low risk portfolio.  Investors with intermediate risk aversion will invest 100% of their capital in risky assets, but at different locations along the risky-asset efficient frontier (see hover data in @fig-diffsaveborrow-cal-allocation-by-riskaversion).  These portfolios can be written as a combination of the efficient low risk portfolio and the efficient high mean portfolio (@eq-frontier-optimal).  A larger fraction is invested in the efficient high mean portfolio with lower risk aversion.  

```{python}
#| label: fig-diffsaveborrow-cal-allocation-by-riskaversion
#| fig-cap: Preferences and Efficient Portfolios 
import numpy as np
import pandas as pd
import plotly.graph_objects as go

mn_stock = 6
mn_bond  = 3.5
sd_stock = 15
sd_bond  = 3.5
corr = -5

rs = 2
extra = 2

raver1 = 2
raver2 = 5

def data(mn1, mn2, sd1, sd2, c, rs, extra):
    c = c / 100
    rb = rs + extra   
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    sds = [sd1, sd2]
    grid = np.linspace(0, 1, 101)
    ports = [np.array([w, 1 - w]) for w in grid]
    means = [p.T @ np.array(mns) for p in ports]
    df = pd.DataFrame(means)
    df.columns = ["mean"]
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    df["stdev"] = [np.sqrt(p.T @ cov @ p) for p in ports]
    df["wt1"] = grid
    df["wt2"] = 1 - df.wt1
    for col in ["mean", "stdev"]:
        df[col] = df[col] / 100
    df["sr_s"]= (df["mean"] - rs)/df["stdev"]
    df["sr_b"]= (df["mean"] - rb)/df["stdev"]
   
    return df

def rf_plus_risky(mn, sd, rs, rb, w_min, w_max):
    mn /= 100
    sd /= 100
    rs /= 100
    rb /= 100
    grid = np.linspace(w_min, w_max, 201)
    mns = [(rs + w * (mn - rs) if w <= 1 else rb + w * (mn - rb)) for w in grid]
    sds = [w * sd for w in grid]
    srs = (mn - rs)/sd
    srb = (mn - rb)/sd
    return grid, mns, sds, srs, srb

def opt_utility(mns, cov, Shorts, s, b, A):
    # P is a portfolio object based on expected returns, covariance matrix, and shorts
    P = portfolio(mns, cov, Shorts) 
    gmv = P.GMV @ mns
    if s==b:
        #tangency exp ret and sd
        if (s < gmv) or (not Shorts):
            portTang = P.tangency(s)
            mnTang = portTang @ mns
            if mnTang < np.max(mns):
                sdTang = np.sqrt(portTang @ cov @ portTang)

                #optimal weight in tangency based on risk-aversion
                wgt = (mnTang - s) / (A * (sdTang**2))
                expret= wgt*mnTang + (1-wgt)*s
                sdret = wgt*sdTang 
                wgt_rf = 1-wgt
                wgt_lo = wgt
                wgt_hi = 0.0
    else:
        #efficient low-risk portfolio
        if (s < gmv) or (not Shorts):
            portTangLowRisk = P.tangency(s)
            mnTangLowRisk = portTangLowRisk @ mns
            if mnTangLowRisk < np.max(mns):
                sdTangLowRisk = np.sqrt(portTangLowRisk @ cov @ portTangLowRisk)

        #efficient high-risk portfolio
        if ((b<gmv) or (not Shorts)):
            portTangHighRisk = P.tangency(b)
            mnTangHighRisk = portTangHighRisk @ mns
            if mnTangHighRisk < np.max(mns):
                sdTangHighRisk = np.sqrt(portTangHighRisk @ cov @ portTangHighRisk)

        #1st: efficient low risk CAL
        wgt = (mnTangLowRisk - s) / (A * (sdTangLowRisk**2))
        expret= wgt*mnTangLowRisk + (1-wgt)*s
        sdret = wgt*sdTangLowRisk 
        wgt_rf = 1-wgt
        wgt_lo = wgt
        wgt_hi = 0.0
        # print('Weight low risk CAL: ', wgt)
        if wgt > 1.0:
            #2nd: efficient high risk CAL
            wgt = (mnTangHighRisk - b) / (A * (sdTangHighRisk**2))
            expret= wgt*mnTangHighRisk + (1-wgt)*b
            sdret = wgt*sdTangHighRisk 
            wgt_rf = 1-wgt
            wgt_lo = 0.0
            wgt_hi = wgt
            # print('Weight high risk CAL: ', wgt)
            if wgt < 1.0:
                #3rd: risky asset frontier
                wgt = 1 #This is should be interpreted as total weight in risky assets.
                # Method 1: solve analytically for utility-maximizing mix of efficient low and high risk portfolios
                cov_hilo = portTangLowRisk.T @cov @ portTangHighRisk
                wgt_lo = (mnTangLowRisk - mnTangHighRisk - A *(cov_hilo  - sdTangHighRisk**2))/(A*(sdTangLowRisk**2 + sdTangHighRisk**2 - 2*cov_hilo))
                expret = wgt_lo*mnTangLowRisk + (1-wgt_lo)* mnTangHighRisk
                sdret = np.sqrt((wgt_lo**2) *sdTangLowRisk**2 + ((1-wgt_lo)**2) * sdTangHighRisk**2 + 2*wgt_lo*(1-wgt_lo)*portTangLowRisk.T @cov @ portTangHighRisk)
                wgt_hi = 1-wgt_lo
                wgt_rf = 0.0

                # #Method 2: calculate frontier manually and choose max utility
                # eret_grid = np.linspace(mnTangLowRisk, mnTangHighRisk, 100)
                # df = pd.DataFrame(dtype='float', columns=['mn','sd','u'],index=np.arange(0,100))
                # for i,m in enumerate(eret_grid):
                #     portFrontier = P.frontier(m)
                #     df.loc[i,'mn'] = portFrontier @ mns
                #     df.loc[i,'sd'] = np.sqrt(portFrontier @ cov @ portFrontier)
                # df['u']  = df['mn'] - 0.5*A* df['sd']**2
                # opt_mn = df.loc[df['u'].idxmax(),'mn']
                # portFrontier = P.frontier(opt_mn)
                # expret = portFrontier @ mns
                # sdret  = np.sqrt(portFrontier @ cov @ portFrontier)
                # print('Weight frontier: ', wgt)

    u = expret - 0.5*A*sdret**2
    return u, wgt, wgt_rf, wgt_lo, wgt_hi



def figtbl(mn1, mn2, sd1, sd2, c, rs, extra, raver1, raver2, asset1_name, asset2_name):
    df = data(mn1, mn2, sd1, sd2, c, rs, extra)
    
    #Plot the portfolios of the two assets
    trace1 = go.Scatter(
        x=df["stdev"],
        y=df["mean"],
        mode="lines",
        # line={'color': green},
        text=100 * df["wt1"],
        customdata=100 * df["wt2"],
        hovertemplate=asset1_name+": %{text:.0f}%<br>"+asset2_name+": %{customdata:.0f}%<extra></extra>",
        line=dict(color="black"),
        name="Stock & Bond Frontier"
    )
    
    # Plot the two assets
    df = df[df.wt1.isin([0, 1])]
    df["text"] = np.where(df.wt1 == 1, asset1_name, asset2_name)
    trace2a = go.Scatter(
        x=df[df.wt1==1]["stdev"],
        y=df[df.wt1==1]["mean"],
        mode="markers",
        text=df[df.wt1==1]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="orange"),
        name=asset1_name
    )
    trace2b = go.Scatter(
        x=df[df.wt1==0]["stdev"],
        y=df[df.wt1==0]["mean"],
        mode="markers",
        text=df[df.wt1==0]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="red"),
        name=asset2_name
    )

    fig = go.Figure()
    fig.add_trace(trace2a)
    fig.add_trace(trace2b)
    fig.add_trace(trace1)



    def custom(string, ports,srTang,borrow_flag):
        # borrow_flag=1 adds statement about "relative to borrowing rate"
        cd = np.empty(shape=(len(ports), N+1, 1), dtype=float)
        for i in range(N):
            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)
        cd[:,N] = np.round(srTang,4)
        # print(cd)
        string += "<br>"
        for i in range(N):
            string += "asset " + str(i + 1)
            string += ": %{customdata["
            string += str(i)
            string += "]:.1%}<br>"
        if borrow_flag==1:
            string += "Sharpe ratio (relative to borrowing rate): %{customdata[" +  str(N) + "]:.4f}<br>"    
        else:
            string += "Sharpe ratio: %{customdata[" +  str(N) + "]:.4f}<br>"
        string += "<extra></extra>"
        return string, cd  

    # Plot the tangency portfolios
    c = c / 100
    rb = rs + extra     
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    mns = np.array(mns) / 100
    sds = [sd1, sd2]
    sds = np.array(sds) / 100
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    
    Shorts = 0.0     
    N = len(mns)
    P = portfolio(mns, cov, Shorts)    
    gmv = P.GMV @ mns
    # print('GMV return is: ',gmv)
    if (rs < gmv) or (not Shorts):
        portTang = P.tangency(rs)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rs)/sdTang
            string0 = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'
            string, cd = custom(string0, [portTang], srTang,0)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name=string0
            )
            fig.add_trace(trace)
            
            #Plot CAL (no leverage)
            if rb==rs:
                max_wgt = 4.0
            else:
                max_wgt = 1.0
            grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mnTang*100, sdTang*100, rs*100,rb*100,0, max_wgt)
            portlabel = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'
            string = "wealth in "+portlabel + " = %{text:.0f}%<br>" + "Sharpe ratio: " +  "{:.4f}".format(srTang) +"<extra></extra>"
            trace5 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string, 
                line=dict(color="blue"),
                name="CAL: " + portlabel
            )           
            fig.add_trace(trace5)
              
            
            

    if (rb != rs) and ((gmv > rb) or (not Shorts)):
        portTang = P.tangency(rb)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rb)/sdTang
            string = 'efficient high mean portfolio'
            string, cd = custom(string, [portTang], srTang,1)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name="efficient high mean portfolio"
            )
            fig.add_trace(trace)
            
            #Plot CAL (with leverage)            
            grid, mns_cal, sds_cal, srs_cal, srb_cal = rf_plus_risky(mnTang*100, sdTang*100, rs*100,rb*100, 1.0, 1.5)
            string = "wealth in efficient high mean portfolio = %{text:.0f}%<br>" + "Sharpe ratio (relative to borrowing rate): " + "{:.4f}".format(srTang) +"<extra></extra>"
            trace6 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string,
                line=dict(color="blue"),
                name = "CAL: efficient high mean"
            )           
            fig.add_trace(trace6)   
 




    # Utility plot info
    u1, wgt1, wgt_rf1, wgt_lo1, wgt_hi1 = opt_utility(mns, cov, Shorts, rs, rb, raver1)
    u2, wgt2, wgt_rf2, wgt_lo2, wgt_hi2 = opt_utility(mns, cov, Shorts, rs, rb, raver2)
    string1='Risk Aversion='+str(raver1)
    string2='Risk Aversion='+str(raver2)
    grid = np.linspace(0,1.4,100)
    sds = [w*np.max(sds) for w in grid]
    eret1 = [u1 + 0.5*raver1* (sd**2) for sd in sds]
    eret2 = [u2 + 0.5*raver2* (sd**2) for sd in sds] 
    # df = pd.DataFrame(data={'Standard Deviation': sds, string1: U1, string2: U2})
    string = "indifference curve for <br> optimal utility for risk aversion of "+str(np.round(raver1,1))+"<extra></extra>"
    trace7 = go.Scatter(
        x=sds, y=eret1, mode="lines", hovertemplate=string, name=string1, line=dict(color="purple",dash='dot'),
    )  
    string = "indifference curve for <br> optimal utility for risk aversion of "+str(np.round(raver2,1))+"<extra></extra>"
    trace8 = go.Scatter(
        x=sds, y=eret2, mode="lines", hovertemplate=string, name=string2, line=dict(color="purple"),
    )  
    fig.add_trace(trace7) 
    fig.add_trace(trace8) 
 
    
    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"
    fig.update_xaxes(range=[0, 1.25 * df["stdev"].max()])
    fig.update_yaxes(range=[0, 1.25 * df["mean"].max()])
    fig.update_yaxes(tickformat=".0%")
    fig.update_xaxes(tickformat=".0%")
    fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.74))
    # fig.show()


    #2nd plot of risky asset share as function of risk aversion:
    ravers = np.arange(0.2,20,0.1)
    cd = np.empty(shape=(len(ravers),5,1),dtype=float)
    wgts = [opt_utility(mns, cov, Shorts, rs, rb, A) for A in ravers]
    df = pd.DataFrame(wgts, columns=['u','wgt_risky','wgt_rf','wgt_lowrisk','wgt_highrisk'])
    if (rb != rs):
        custdat = np.empty(shape=(df.shape[0],3,1), dtype=float)
        custdat[:,0] = np.array(100*df.wgt_rf).reshape(-1,1)
        custdat[:,1] = np.array(100*df.wgt_lowrisk).reshape(-1,1)
        custdat[:,2] = np.array(100*df.wgt_highrisk).reshape(-1,1)
        string = 'risk-free: %{customdata[0]:.0f}%<br>'
        string+= 'efficient low risk: %{customdata[1]:.0f}%<br>'
        string+= 'efficient high mean: %{customdata[2]:.0f}%<br>'
        string+= '<extra></extra>'
        trace1 = go.Scatter(x=ravers,y=df['wgt_risky'],mode='lines',customdata=custdat,hovertemplate=string, line=dict(color="orange"))
        fig = go.Figure()
        fig.add_trace(trace1)
    else:
        custdat = np.empty(shape=(df.shape[0],2,1), dtype=float)
        custdat[:,0] = np.array(100*df.wgt_rf).reshape(-1,1)
        custdat[:,1] = np.array(100*df.wgt_lowrisk).reshape(-1,1)
        string = 'risk-free: %{customdata[0]:.0f}%<br>'
        string+= 'tangency: %{customdata[1]:.0f}%<br>'
        string+= '<extra></extra>'
        trace1 = go.Scatter(x=ravers,y=df['wgt_risky'],mode='lines',customdata=custdat,hovertemplate=string, line=dict(color="orange"))
        fig = go.Figure()
        fig.add_trace(trace1)       
    fig.layout.xaxis["title"] = "Risk Aversion"
    fig.layout.yaxis["title"] = "Weight in Risky Assets"
    fig.update_yaxes(tickformat=".1%")
    fig.update_xaxes(tickformat=".2")
    fig.update_layout(legend=dict(yanchor="top", y =0.99, xanchor="left", x=0.74))
    fig.show()


figtbl(mn_stock,mn_bond,sd_stock,sd_bond,corr,rs,extra,raver1, raver2, "Stock","Bond")
```


## Appendix: The Portfolio Class in Python {#sec-portfolio-class}

A number of the examples in this chapter make use of the Portfolio class object defined below.  The Portfolio class object implements the various quadratic programming problems encountered in mean-variance analysis using the CVXOPT package.  The CVXOPT user guide is available <a href="https://cvxopt.org/userguide/index.html"> here </a>.

The function `cvxopt.solvers.qp` solves problems of the general form:
\begin{align}
    \underset{w}{\text{min  }}& \frac{1}{2} w' Q w + p'x \\
     \text{subject to  } & Gw \le h \\
                        & Aw = b \\
\end{align}

For our purposes, the optimizer is usually solving for a $N \times 1$ vector of portfolio weights, $w$.  The objective function often takes $Q$ as the $N \times N$ covariance matrix of returns and $p$ as a $N \times 1$ vector of zeros.  

The constraint $Gw \le h$ can be used to put position limits on the portfolio weights.  The most common use of this is short-selling constraints.  This is accomplished by setting $G$ equal to the negative of the $N \times N$ identity matrix (that is, a matrix with -1s on the diagonal and zero elsewhere), and $h$ equal to a $N \times 1$ vector of zeros.  Additional position limits could be enforced by adding rows to $G$ and $h$.  For instance, many funds have maximum position limits in addition to short-sale constraints.

The constraint $Aw=b$ usually includes the constraint that the portfolio is fulling invested; that is, the portfolio weights sum to 100%.  This is accomplished by setting $A$ equal to a $N \times 1$ vector of ones and setting $b=1$.  $A$ and $b$ can include additional rows for other constraints.  For instance, setting a target expected return would be accomplished by adding a row to $A$ with the asset mean vector and adding a row to $b$ with the target expected return.  This is done when solving for a point on the mean-variance frontier.

::: {.callout-tip collapse="true"}

## Defining the Portfolio Class in Python
``` p
import numpy as np
from cvxopt import matrix
from cvxopt.solvers import qp as Solver, options as SolverOptions
from scipy.optimize import minimize_scalar

SolverOptions["show_progress"] = False

class portfolio:
    def __init__(self, means, cov, Shorts):
        self.means = np.array(means)
        self.cov = np.array(cov)
        self.Shorts = Shorts
        self.n = len(means)
        if Shorts:
            w = np.linalg.solve(cov, np.ones(self.n))
            self.GMV = w / np.sum(w)
            w = np.linalg.solve(cov, means)
            self.piMu = w / np.sum(w)
        else:
            n = self.n
            Q = matrix(cov, tc="d")
            p = matrix(np.zeros(n), (n, 1), tc="d")
            G = matrix(-np.identity(n), tc="d")
            h = matrix(np.zeros(n), (n, 1), tc="d")
            A = matrix(np.ones(n), (1, n), tc="d")
            b = matrix([1], (1, 1), tc="d")
            sol = Solver(Q, p, G, h, A, b)
            self.GMV = np.array(sol["x"]).flatten() if sol["status"] == "optimal" else np.array(n * [np.nan])

    def frontier(self, m):
        if self.Shorts:
            gmv = self.GMV
            piMu = self.piMu
            m1 = gmv @ self.means
            m2 = piMu @ self.means
            a = (m - m2) / (m1 - m2)
            return a * gmv + (1 - a) * piMu
        else:
            n = self.n
            Q = matrix(self.cov, tc="d")
            p = matrix(np.zeros(n), (n, 1), tc="d")
            G = matrix(-np.identity(n), tc="d")
            h = matrix(np.zeros(n), (n, 1), tc="d")
            A = matrix(np.vstack((np.ones(n), self.means)), (2, n), tc="d")
            b = matrix([1, m], (2, 1), tc="d")
            sol = Solver(Q, p, G, h, A, b)
            return np.array(sol["x"]).flatten() if sol["status"] == "optimal" else np.array(n * [np.nan])

    def tangency(self, r):
        if self.Shorts:
            w = np.linalg.solve(self.cov, self.means - r)
            return w / np.sum(w)
        else:
            def f(m):
                w = self.frontier(m)
                mn = w @ self.means
                sd = np.sqrt(w.T @ self.cov @ w)
                return - (mn - r) / sd
            m = minimize_scalar(f, bounds=[max(r, np.min(self.means)), max(r, np.max(self.means))], method="bounded").x
            return self.frontier(m)

    def optimal(self, raver, rs=None, rb=None):
        n = self.n
        if self.Shorts:
            if (rs or rs==0) and (rb or rb==0):
                Q = np.zeros((n + 2, n + 2))
                Q[2:, 2:] = raver * self.cov
                Q = matrix(Q, tc="d")
                p = np.array([-rs, rb] + list(-self.means))
                p = matrix(p, (n + 2, 1), tc="d")
                G = np.zeros((2, n + 2))
                G[0, 0] = G[1, 1] = -1
                G = matrix(G, (2, n+2), tc="d")
                h = matrix([0, 0], (2, 1), tc="d")
                A = matrix([1, -1] + n*[1], (1, n+2), tc="d")
                b = matrix([1], (1, 1), tc="d")
                sol = Solver(Q, p, G, h, A, b)
                return np.array(sol["x"]).flatten()[2:] if sol["status"] == "optimal" else None
            else:
                w = np.linalg.solve(self.cov, self.means)
                a = np.sum(w)
                return (a/raver)*self.piMu + (1-a/raver)*self.GMV
        else:
           if (rs or rs==0) and (rb or rb==0):
                Q = np.zeros((n + 2, n + 2))
                Q[2:, 2:] = raver * self.cov
                Q = matrix(Q, tc="d")
                p = np.array([-rs, rb] + list(-self.means))
                p = matrix(p, (n+2, 1), tc="d")
                G = matrix(-np.identity(n + 2), tc="d")
                h = matrix(np.zeros(n+2), (n+2, 1), tc="d")
                A = matrix([1, -1] + n * [1], (1, n+2), tc="d")
                b = matrix([1], (1, 1), tc="d")
                sol = Solver(Q, p, G, h, A, b)
                return np.array(sol["x"]).flatten()[2:] if sol["status"] == "optimal" else None
           else:
                Q = matrix(raver * self.cov, tc="d")
                p = matrix(-self.means, (n, 1), tc="d")
                G = matrix(-np.identity(n), tc="d")
                h = matrix(np.zeros(n), (n, 1), tc="d")
                A = matrix(np.ones(n), (1, n), tc="d")
                b = matrix([1], (1, 1), tc="d")
                sol = Solver(Q, p, G, h, A, b)
                return np.array(sol["x"]).flatten() if sol["status"] == "optimal" else None
```
:::


## Appendix: Portfolios in Excel {#sec-excel}

MAYBE WE COLLECT ALL OF THE EXCEL TUTORIALS HERE AND DO PYTHON ONLY IN THE MAIN TEXT?

